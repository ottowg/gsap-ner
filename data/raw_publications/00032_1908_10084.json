{"text": "Sentence-BERT: Sentence Embeddings using Siamese BERT-Networks\n\nAbstract:\nand RoBERTa (Liu et al., 2019) has set a new state-of-the-art performance on sentence-pair regression tasks like semantic textual similarity (STS). However, it requires that both sentences are fed into the network, which causes a massive computational overhead: Finding the most similar pair in a collection of 10,000 sentences requires about 50 million inference computations (~65 hours) with BERT. The construction of BERT makes it unsuitable for semantic similarity search as well as for unsupervised tasks like clustering.\nIn this publication, we present Sentence-BERT (SBERT), a modification of the pretrained BERT network that use siamese and triplet network structures to derive semantically meaningful sentence embeddings that can be compared using cosine-similarity. This reduces the effort for finding the most similar pair from 65 hours with BERT / RoBERTa to about 5 seconds with SBERT, while maintaining the accuracy from BERT.\nWe evaluate SBERT and SRoBERTa on common STS tasks and transfer learning tasks, where it outperforms other state-of-the-art sentence embeddings methods. 1\n\n\n1 Introduction\nIn this publication, we present Sentence-BERT (SBERT), a modification of the BERT network using siamese and triplet networks that is able to derive semantically meaningful sentence embeddings 2. This enables BERT to be used for certain new tasks, which up-to-now were not applicable for BERT. These tasks include large-scale seman-tic similarity comparison, clustering, and information retrieval via semantic search.\nBERT set new state-of-the-art performance on various sentence classification and sentence-pair regression tasks. BERT uses a cross-encoder: Two sentences are passed to the transformer network and the target value is predicted. However, this setup is unsuitable for various pair regression tasks due to too many possible combinations. Finding in a collection of n = 10 000 sentences the pair with the highest similarity requires with BERT n\u2022(n\u22121)/2 = 49 995 000 inference computations. On a modern V100 GPU, this requires about 65 hours. Similar, finding which of the over 40 million existent questions of Quora is the most similar for a new question could be modeled as a pair-wise comparison with BERT, however, answering a single query would require over 50 hours.\nA common method to address clustering and semantic search is to map each sentence to a vector space such that semantically similar sentences are close. Researchers have started to input individual sentences into BERT and to derive fixedsize sentence embeddings. The most commonly used approach is to average the BERT output layer (known as BERT embeddings) or by using the output of the first token (the [CLS] token). As we will show, this common practice yields rather bad sentence embeddings, often worse than averaging GloVe embeddings (Pennington et al., 2014).\nTo alleviate this issue, we developed SBERT. The siamese network architecture enables that fixed-sized vectors for input sentences can be derived. Using a similarity measure like cosinesimilarity or Manhatten / Euclidean distance, semantically similar sentences can be found. These similarity measures can be performed extremely efficient on modern hardware, allowing SBERT to be used for semantic similarity search as well as for clustering. The complexity for finding the most similar sentence pair in a collection of 10,000 sentences is reduced from 65 hours with BERT to the computation of 10,000 sentence embeddings (~5 seconds with SBERT) and computing cosinesimilarity (~0.01 seconds). By using optimized index structures, finding the most similar Quora question can be reduced from 50 hours to a few milliseconds (Johnson et al., 2017).\nWe fine-tune SBERT on NLI data, which creates sentence embeddings that significantly outperform other state-of-the-art sentence embedding methods like InferSent (Conneau et al., 2017) and Universal Sentence Encoder (Cer et al., 2018). On seven Semantic Textual Similarity (STS) tasks, SBERT achieves an improvement of 11.7 points compared to InferSent and 5.5 points compared to Universal Sentence Encoder. On SentEval (Conneau and Kiela, 2018), an evaluation toolkit for sentence embeddings, we achieve an improvement of 2.1 and 2.6 points, respectively.\nSBERT can be adapted to a specific task. It sets new state-of-the-art performance on a challenging argument similarity dataset (Misra et al., 2016) and on a triplet dataset to distinguish sentences from different sections of a Wikipedia article (Dor et al., 2018).\nThe paper is structured in the following way: Section 3 presents SBERT, section 4 evaluates SBERT on common STS tasks and on the challenging Argument Facet Similarity (AFS) corpus (Misra et al., 2016). Section 5 evaluates SBERT on SentEval. In section 6, we perform an ablation study to test some design aspect of SBERT. In section 7, we compare the computational efficiency of SBERT sentence embeddings in contrast to other state-of-the-art sentence embedding methods.\n\n2 Related Work\nWe first introduce BERT, then, we discuss stateof-the-art sentence embedding methods.\nBERT (Devlin et al., 2018) is a pre-trained transformer network (Vaswani et al., 2017), which set for various NLP tasks new state-of-the-art results, including question answering, sentence classification, and sentence-pair regression. The input for BERT for sentence-pair regression consists of the two sentences, separated by a special [SEP] token. Multi-head attention over 12 (base-model) or 24 layers (large-model) is applied and the output is passed to a simple regression function to derive the final label. Using this setup, BERT set a new state-of-the-art performance on the Semantic Textual Semilarity (STS) benchmark (Cer et al., 2017). RoBERTa (Liu et al., 2019) showed, that the performance of BERT can further improved by small adaptations to the pre-training process. We also tested XLNet (Yang et al., 2019), but it led in general to worse results than BERT.\nA large disadvantage of the BERT network structure is that no independent sentence embeddings are computed, which makes it difficult to derive sentence embeddings from BERT. To bypass this limitations, researchers passed single sentences through BERT and then derive a fixed sized vector by either averaging the outputs (similar to average word embeddings) or by using the output of the special CLS token (for example: May et al. (2019); Zhang et al. (2019); Qiao et al. (2019)). These two options are also provided by the popular bert-as-a-service-repository 3. Up to our knowledge, there is so far no evaluation if these methods lead to useful sentence embeddings.\nSentence embeddings are a well studied area with dozens of proposed methods. Skip-Thought (Kiros et al., 2015) trains an encoder-decoder architecture to predict the surrounding sentences. InferSent (Conneau et al., 2017) uses labeled data of the Stanford Natural Language Inference dataset (Bowman et al., 2015) and the Multi-Genre NLI dataset (Williams et al., 2018) to train a siamese BiLSTM network with max-pooling over the output.  Conneau et al. showed, that InferSent consistently outperforms unsupervised methods like SkipThought. Universal Sentence Encoder (Cer et al., 2018) trains a transformer network and augments unsupervised learning with training on SNLI.  Hill et al. (2016) showed, that the task on which sentence embeddings are trained significantly impacts their quality. Previous work (Conneau et al., 2017; Cer et al., 2018) found that the SNLI datasets are suitable for training sentence embeddings.  Yang et al. (2018) presented a method to train on conversations from Reddit using siamese DAN and siamese transformer networks, which yielded good results on the STS benchmark dataset.  Humeau et al. (2019) addresses the run-time overhead of the cross-encoder from BERT and present a method (poly-encoders) to compute a score between m context vectors and pre- computed candidate embeddings using attention. This idea works for finding the highest scoring sentence in a larger collection. However, polyencoders have the drawback that the score function is not symmetric and the computational overhead is too large for use-cases like clustering, which would require O(n 2 ) score computations. Previous neural sentence embedding methods started the training from a random initialization. In this publication, we use the pre-trained BERT and RoBERTa network and only fine-tune it to yield useful sentence embeddings. This reduces significantly the needed training time: SBERT can be tuned in less than 20 minutes, while yielding better results than comparable sentence embedding methods.\n\n3 Model\nSBERT adds a pooling operation to the output of BERT / RoBERTa to derive a fixed sized sentence embedding. We experiment with three pooling strategies: Using the output of the CLS-token, computing the mean of all output vectors (MEANstrategy), and computing a max-over-time of the output vectors (MAX-strategy). The default configuration is MEAN.\nIn order to fine-tune BERT / RoBERTa, we create siamese and triplet networks (Schroff et al., 2015) to update the weights such that the produced sentence embeddings are semantically meaningful and can be compared with cosine-similarity.\nThe network structure depends on the available training data. We experiment with the following structures and objective functions. Classification Objective Function. We concatenate the sentence embeddings u and v with the element-wise difference |u \u2212 v| and multiply it with the trainable weightW t \u2208 R 3n\u00d7k : o = softmax(W t (u, v, |u \u2212 v|))\nwhere n is the dimension of the sentence embeddings and k the number of labels. We optimize cross-entropy loss. This structure is depicted in Figure 1.\nRegression Objective Function. The cosinesimilarity between the two sentence embeddings u and v is computed (Figure 2). We use meansquared-error loss as the objective function.\nTriplet Objective Function. Given an anchor sentence a, a positive sentence p, and a negative sentence n, triplet loss tunes the network such that the distance between a and p is smaller than the distance between a and n. Mathematically, we minimize the following loss function:max(||s a \u2212 s p || \u2212 ||s a \u2212 s n || + , 0)\nwith s x the sentence embedding for a/n/p, || \u2022 || a distance metric and margin . Margin ensures that s p is at least closer to s a than s n . As metric we use Euclidean distance and we set = 1 in our experiments.\n\n3.1 Training Details\nWe train SBERT on the combination of the SNLI (Bowman et al., 2015) and the Multi-Genre NLI\n\n4 Evaluation -Semantic Textual Similarity\nWe evaluate the performance of SBERT for common Semantic Textual Similarity (STS) tasks.\nState-of-the-art methods often learn a (complex) regression function that maps sentence embeddings to a similarity score. However, these regression functions work pair-wise and due to the combinatorial explosion those are often not scalable if the collection of sentences reaches a certain size. Instead, we always use cosine-similarity to compare the similarity between two sentence embeddings. We ran our experiments also with negative Manhatten and negative Euclidean distances as similarity measures, but the results for all approaches remained roughly the same.\n\n4.1 Unsupervised STS\nWe evaluate the performance of SBERT for STS without using any STS specific training data. We use the STS tasks 2012 -2016 (Agirre et al., 2012 (Agirre et al., , 2013 (Agirre et al., , 2014 (Agirre et al., , 2015 (Agirre et al., , 2016)), the STS benchmark (Cer et al., 2017), and the SICK-Relatedness dataset (Marelli et al., 2014). These datasets provide labels between 0 and 5 on the semantic relatedness of sentence pairs. We showed in (Reimers et al., 2016) that Pearson correlation is badly suited for STS. Instead, we compute the Spearman's rank correlation between the cosine-similarity of the sentence embeddings and the gold labels. The setup for the other sentence embedding methods is equivalent, the similarity is computed by cosinesimilarity. The results are depicted in Table 1.\nThe results shows that directly using the output of BERT leads to rather poor performances. Averaging the BERT embeddings achieves an average correlation of only 54.81, and using the CLStoken output only achieves an average correlation of 29.19. Both are worse than computing average GloVe embeddings.\nUsing the described siamese network structure and fine-tuning mechanism substantially improves the correlation, outperforming both InferSent and Universal Sentence Encoder substantially. The only dataset where SBERT performs worse than Universal Sentence Encoder is SICK-R. Universal Sentence Encoder was trained on various datasets, including news, question-answer pages and discussion forums, which appears to be more suitable to the data of SICK-R. In contrast, SBERT was pre-trained only on Wikipedia (via BERT) and on NLI data.\nWhile RoBERTa was able to improve the performance for several supervised tasks, we only observe minor difference between SBERT and SRoBERTa for generating sentence embeddings.\n\n4.2 Supervised STS\nThe STS benchmark (STSb) (Cer et al., 2017) provides is a popular dataset to evaluate supervised STS systems. The data includes 8,628 sentence pairs from the three categories captions, news, and forums. It is divided into train (5,749), dev (1,500) and test (1, 379). BERT set a new state-of-the-art performance on this dataset by passing both sentences to the network and using a simple regres-sion method for the output. BERT systems were trained with 10 random seeds and 4 epochs. SBERT was fine-tuned on the STSb dataset, SBERT-NLI was pretrained on the NLI datasets, then fine-tuned on the STSb dataset.\nWe use the training set to fine-tune SBERT using the regression objective function. At prediction time, we compute the cosine-similarity between the sentence embeddings. All systems are trained with 10 random seeds to counter variances (Reimers and Gurevych, 2018).\nThe results are depicted in Table 2. We experimented with two setups: Only training on STSb, and first training on NLI, then training on STSb. We observe that the later strategy leads to a slight improvement of 1-2 points. This two-step approach had an especially large impact for the BERT cross-encoder, which improved the performance by 3-4 points. We do not observe a significant difference between BERT and RoBERTa.\n\n4.3 Argument Facet Similarity\nWe evaluate SBERT on the Argument Facet Similarity (AFS) corpus by Misra et al. (2016). The AFS corpus annotated 6,000 sentential argument pairs from social media dialogs on three controversial topics: gun control, gay marriage, and death penalty. The data was annotated on a scale from 0 (\"different topic\") to 5 (\"completely equivalent\"). The similarity notion in the AFS corpus is fairly different to the similarity notion in the STS datasets from SemEval. STS data is usually descriptive, while AFS data are argumentative excerpts from dialogs. To be considered similar, arguments must not only make similar claims, but also provide a similar reasoning. Further, the lexical gap between the sentences in AFS is much larger. Hence, simple unsupervised methods as well as state-of-the-art STS systems perform badly on this dataset (Reimers et al., 2019).\nWe evaluate SBERT on this dataset in two scenarios: 1) As proposed by Misra et al., we evaluate SBERT using 10-fold cross-validation. A drawback of this evaluation setup is that it is not clear how well approaches generalize to different topics. Hence, 2) we evaluate SBERT in a cross-topic setup. Two topics serve for training and the approach is evaluated on the left-out topic. We repeat this for all three topics and average the results.\nSBERT is fine-tuned using the Regression Objective Function. The similarity score is computed using cosine-similarity based on the sentence embeddings. We also provide the Pearson correlation r to make the results comparable to Misra et al. However, we showed (Reimers et al., 2016) that Pearson correlation has some serious drawbacks and should be avoided for comparing STS systems. The results are depicted in Table 3.\nUnsupervised methods like tf-idf, average GloVe embeddings or InferSent perform rather badly on this dataset with low scores. Training SBERT in the 10-fold cross-validation setup gives a performance that is nearly on-par with BERT.\nHowever, in the cross-topic evaluation, we observe a performance drop of SBERT by about 7 points Spearman correlation. To be considered similar, arguments should address the same claims and provide the same reasoning. BERT is able to use attention to compare directly both sentences (e.g. word-by-word comparison), while SBERT must map individual sentences from an unseen topic to a vector space such that arguments with similar claims and reasons are close. This is a much more challenging task, which appears to require more than just two topics for training to work on-par with BERT.\n\n4.4 Wikipedia Sections Distinction\n\n\n5 Evaluation -SentEval\nSentEval (Conneau and Kiela, 2018) is a popular toolkit to evaluate the quality of sentence embeddings. Sentence embeddings are used as features for a logistic regression classifier. The logistic regression classifier is trained on various tasks in a 10-fold cross-validation setup and the prediction accuracy is computed for the test-fold. The purpose of SBERT sentence embeddings are not to be used for transfer learning for other tasks. Here, we think fine-tuning BERT as described by Devlin et al. (2018) for new tasks is the more suitable method, as it updates all layers of the BERT network. However, SentEval can still give an impression on the quality of our sentence embeddings for various tasks.\nWe compare the SBERT sentence embeddings to other sentence embeddings methods on the following seven SentEval transfer tasks:\n\u2022 MR: Sentiment prediction for movie reviews snippets on a five start scale (Pang and Lee, 2005).\n\u2022 CR: Sentiment prediction of customer product reviews (Hu and Liu, 2004).\n\u2022 SUBJ: Subjectivity prediction of sentences from movie reviews and plot summaries (Pang and Lee, 2004).\n\u2022 MPQA: Phrase level opinion polarity classification from newswire (Wiebe et al., 2005).\n\u2022 SST: Stanford Sentiment Treebank with binary labels (Socher et al., 2013).\n\u2022 TREC: Fine grained question-type classification from TREC (Li and Roth, 2002).\n\u2022 MRPC: Microsoft Research Paraphrase Corpus from parallel news sources (Dolan et al., 2004).\nThe results can be found in Table 5. SBERT is able to achieve the best performance in 5 out of 7 tasks. The average performance increases by about 2 percentage points compared to In-ferSent as well as the Universal Sentence Encoder. Even though transfer learning is not the purpose of SBERT, it outperforms other state-of-the-art sentence embeddings methods on this task. It appears that the sentence embeddings from SBERT capture well sentiment information: We observe large improvements for all sentiment tasks (MR, CR, and SST) from SentEval in comparison to InferSent and Universal Sentence Encoder.\nThe only dataset where SBERT is significantly worse than Universal Sentence Encoder is the TREC dataset. Universal Sentence Encoder was pre-trained on question-answering data, which appears to be beneficial for the question-type classification task of the TREC dataset.\nAverage BERT embeddings or using the CLStoken output from a BERT network achieved bad results for various STS tasks (Table 1), worse than average GloVe embeddings. However, for Sent-Eval, average BERT embeddings and the BERT CLS-token output achieves decent results (Table 5), outperforming average GloVe embeddings. The reason for this are the different setups. For the STS tasks, we used cosine-similarity to estimate the similarities between sentence embeddings. Cosine-similarity treats all dimensions equally. In contrast, SentEval fits a logistic regression classifier to the sentence embeddings. This allows that certain dimensions can have higher or lower impact on the classification result.\nWe conclude that average BERT embeddings / CLS-token output from BERT return sentence embeddings that are infeasible to be used with cosinesimilarity or with Manhatten / Euclidean distance. For transfer learning, they yield slightly worse results than InferSent or Universal Sentence Encoder. However, using the described fine-tuning setup with a siamese network structure on NLI datasets yields sentence embeddings that achieve a new state-of-the-art for the SentEval toolkit.\n\n6 Ablation Study\nWe have demonstrated strong empirical results for the quality of SBERT sentence embeddings. In this section, we perform an ablation study of different aspects of SBERT in order to get a better understanding of their relative importance.\nWe evaluated different pooling strategies (MEAN, MAX, and CLS). For the classification objective function, we evaluate different concatenation methods. For each possible configuration, we train SBERT with 10 different random seeds and average the performances.\nThe objective function (classification vs. regression) depends on the annotated dataset. For the classification objective function, we train SBERTbase on the SNLI and the Multi-NLI dataset. For the regression objective function, we train on the training set of the STS benchmark dataset. Performances are measured on the development split of the STS benchmark dataset. Results are shown in Table 6. When trained with the classification objective function on NLI data, the pooling strategy has a rather minor impact. The impact of the concatenation mode is much larger. InferSent (Conneau et al., 2017) and Universal Sentence Encoder (Cer et al., 2018) both use (u, v, |u \u2212 v|, u * v) as input for a softmax classifier. However, in our architecture, adding the element-wise u * v decreased the performance.\nThe most important component is the elementwise difference |u \u2212 v|. Note, that the concatenation mode is only relevant for training the softmax classifier. At inference, when predicting similarities for the STS benchmark dataset, only the sentence embeddings u and v are used in combination with cosine-similarity. The element-wise difference measures the distance between the dimensions of the two sentence embeddings, ensuring that similar pairs are closer and dissimilar pairs are further apart.\nWhen trained with the regression objective function, we observe that the pooling strategy has a large impact. There, the MAX strategy perform significantly worse than MEAN or CLS-token strategy. This is in contrast to (Conneau et al., 2017), who found it beneficial for the BiLSTM-layer of InferSent to use MAX instead of MEAN pooling.\n\n7 Computational Efficiency\nSentence embeddings need potentially be computed for Millions of sentences, hence, a high computation speed is desired. In this section, we compare SBERT to average GloVe embeddings, InferSent (Conneau et al., 2017), and Universal Sentence Encoder (Cer et al., 2018).\nFor our comparison we use the sentences from the STS benchmark (Cer et al., 2017). We compute average GloVe embeddings using a simple for-loop with python dictionary lookups and NumPy. InferSent 4 is based on PyTorch. For Universal Sentence Encoder, we use the Tensor-Flow Hub version 5, which is based on Tensor-Flow. SBERT is based on PyTorch. For improved computation of sentence embeddings, we implemented a smart batching strategy: Sentences with similar lengths are grouped together and are only padded to the longest element in a mini-batch. This drastically reduces computational overhead from padding tokens.\nPerformances were measured on a server with Intel i7-5820K CPU @ 3.30GHz, Nvidia Tesla V100 GPU, CUDA 9.2 and cuDNN. The results are depicted in Table 7 On CPU, InferSent is about 65% faster than SBERT. This is due to the much simpler network architecture. InferSent uses a single Bi-LSTM layer, while BERT uses 12 stacked transformer layers. However, an advantage of transformer networks is the computational efficiency on GPUs. There, SBERT with smart batching is about 9% faster than InferSent and about 55% faster than Universal Sentence Encoder. Smart batching achieves a speed-up of 89% on CPU and 48% on GPU. Average GloVe embeddings is obviously by a large margin the fastest method to compute sentence embeddings.\n\n8 Conclusion\nWe showed that BERT out-of-the-box maps sentences to a vector space that is rather unsuitable to be used with common similarity measures like cosine-similarity. The performance for seven STS tasks was below the performance of average GloVe embeddings.\nTo overcome this shortcoming, we presented Sentence-BERT (SBERT). SBERT fine-tunes BERT in a siamese / triplet network architecture. We evaluated the quality on various common benchmarks, where it could achieve a significant improvement over state-of-the-art sentence embeddings methods. Replacing BERT with RoBERTa did not yield a significant improvement in our experiments.\nSBERT is computationally efficient. On a GPU, it is about 9% faster than InferSent and about 55% faster than Universal Sentence Encoder. SBERT can be used for tasks which are computationally not feasible to be modeled with BERT. For example, clustering of 10,000 sentences with hierarchical clustering requires with BERT about 65 hours, as around 50 Million sentence combinations must be computed. With SBERT, we were able to reduce the effort to about 5 seconds.\n\nFootnotes:\n1: Code available: https://github.com/UKPLab/ sentence-transformers\n2: With semantically meaningful we mean that semantically similar sentences are close in vector space.\n3: https://github.com/hanxiao/ bert-as-service/\n4: https://github.com/facebookresearch/ InferSent\n5: https://tfhub.dev/google/ universal-sentence-encoder-large/3\n\nReferences:\n\n- Eneko Agirre, Carmen Banea, Claire Cardie, Daniel Cer, Mona Diab, Aitor Gonzalez-Agirre, Weiwei Guo, Inigo Lopez-Gazpio, Montse Maritxalar, Rada Mihalcea, German Rigau, Larraitz Uria, and Janyce Wiebe. 2015. SemEval-2015 Task 2: Semantic Tex- tual Similarity, English, Spanish and Pilot on Inter- pretability. In Proceedings of the 9th International Workshop on Semantic Evaluation (SemEval 2015), pages 252-263, Denver, Colorado. Association for Computational Linguistics.- Eneko Agirre, Carmen Banea, Claire Cardie, Daniel Cer, Mona Diab, Aitor Gonzalez-Agirre, Weiwei Guo, Rada Mihalcea, German Rigau, and Janyce Wiebe. 2014. SemEval-2014 Task 10: Multilingual Semantic Textual Similarity. In Proceedings of the 8th International Workshop on Semantic Evaluation (SemEval 2014), pages 81-91, Dublin, Ireland. As- sociation for Computational Linguistics.\n\n- Eneko Agirre, Carmen Banea, Daniel M. Cer, Mona T. Diab, Aitor Gonzalez-Agirre, Rada Mihalcea, Ger- man Rigau, and Janyce Wiebe. 2016. SemEval- 2016 Task 1: Semantic Textual Similarity, Mono- lingual and Cross-Lingual Evaluation. In Proceed- ings of the 10th International Workshop on Seman- tic Evaluation, SemEval@NAACL-HLT 2016, San Diego, CA, USA, June 16-17, 2016, pages 497-511.\n\n- Eneko Agirre, Daniel Cer, Mona Diab, Aitor Gonzalez- Agirre, and Weiwei Guo. 2013. *SEM 2013 shared task: Semantic Textual Similarity. In Second Joint Conference on Lexical and Computational Seman- tics (*SEM), Volume 1: Proceedings of the Main Conference and the Shared Task: Semantic Textual Similarity, pages 32-43, Atlanta, Georgia, USA. As- sociation for Computational Linguistics.\n\n- Eneko Agirre, Mona Diab, Daniel Cer, and Aitor Gonzalez-Agirre. 2012. SemEval-2012 Task 6: A Pilot on Semantic Textual Similarity. In Proceed- ings of the First Joint Conference on Lexical and Computational Semantics -Volume 1: Proceedings of the Main Conference and the Shared Task, and Volume 2: Proceedings of the Sixth International Workshop on Semantic Evaluation, SemEval '12, pages 385-393, Stroudsburg, PA, USA. Association for Computational Linguistics.\n\n- Samuel R. Bowman, Gabor Angeli, Christopher Potts, and Christopher D. Manning. 2015. A large anno- tated corpus for learning natural language inference. In Proceedings of the 2015 Conference on Empiri- cal Methods in Natural Language Processing, pages 632-642, Lisbon, Portugal. Association for Compu- tational Linguistics.\n\n- Daniel Cer, Mona Diab, Eneko Agirre, Iigo Lopez- Gazpio, and Lucia Specia. 2017. SemEval-2017 Task 1: Semantic Textual Similarity Multilingual and Crosslingual Focused Evaluation. In Proceed- ings of the 11th International Workshop on Semantic Evaluation (SemEval-2017), pages 1-14, Vancou- ver, Canada.\n\n- Daniel Cer, Yinfei Yang, Sheng-yi Kong, Nan Hua, Nicole Limtiaco, Rhomni St. John, Noah Constant, Mario Guajardo-Cespedes, Steve Yuan, Chris Tar, Yun-Hsuan Sung, Brian Strope, and Ray Kurzweil. 2018. Universal Sentence Encoder. arXiv preprint arXiv:1803.11175.\n\n- Alexis Conneau and Douwe Kiela. 2018. SentEval: An Evaluation Toolkit for Universal Sentence Represen- tations. arXiv preprint arXiv:1803.05449.\n\n- Alexis Conneau, Douwe Kiela, Holger Schwenk, Lo\u00efc Barrault, and Antoine Bordes. 2017. Supervised Learning of Universal Sentence Representations from Natural Language Inference Data. In Proceed- ings of the 2017 Conference on Empirical Methods in Natural Language Processing, pages 670-680, Copenhagen, Denmark. Association for Computa- tional Linguistics.\n\n- Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. 2018. BERT: Pre-training of Deep Bidirectional Transformers for Language Un- derstanding. arXiv preprint arXiv:1810.04805.\n\n- Bill Dolan, Chris Quirk, and Chris Brockett. 2004. Un- supervised Construction of Large Paraphrase Cor- pora: Exploiting Massively Parallel News Sources. In Proceedings of the 20th International Confer- ence on Computational Linguistics, COLING '04, Stroudsburg, PA, USA. Association for Computa- tional Linguistics.\n\n- Liat Ein Dor, Yosi Mass, Alon Halfon, Elad Venezian, Ilya Shnayderman, Ranit Aharonov, and Noam Slonim. 2018. Learning Thematic Similarity Metric from Article Sections Using Triplet Networks. In Proceedings of the 56th Annual Meeting of the As- sociation for Computational Linguistics (Volume 2: Short Papers), pages 49-54, Melbourne, Australia. Association for Computational Linguistics.\n\n- Felix Hill, Kyunghyun Cho, and Anna Korhonen. 2016. Learning Distributed Representations of Sen- tences from Unlabelled Data. In Proceedings of the 2016 Conference of the North American Chap- ter of the Association for Computational Linguis- tics: Human Language Technologies, pages 1367- 1377, San Diego, California. Association for Com- putational Linguistics.\n\n- Minqing Hu and Bing Liu. 2004. Mining and Sum- marizing Customer Reviews. In Proceedings of the Tenth ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, KDD '04, pages 168-177, New York, NY, USA. ACM.\n\n- Samuel Humeau, Kurt Shuster, Marie-Anne Lachaux, and Jason Weston. 2019. Real-time Inference in Multi-sentence Tasks with Deep Pretrained Transformers. arXiv preprint arXiv:1905.01969, abs/1905.01969.\n\n- Jeff Johnson, Matthijs Douze, and Herv\u00e9 J\u00e9gou. 2017. Billion-scale similarity search with GPUs. arXiv preprint arXiv:1702.08734.\n\n- Ryan Kiros, Yukun Zhu, Ruslan R Salakhutdinov, Richard Zemel, Raquel Urtasun, Antonio Torralba, and Sanja Fidler. 2015. Skip-Thought Vectors. In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors, Advances in Neural Infor- mation Processing Systems 28, pages 3294-3302. Curran Associates, Inc.\n\n- Xin Li and Dan Roth. 2002. Learning Question Classi- fiers. In Proceedings of the 19th International Con- ference on Computational Linguistics -Volume 1, COLING '02, pages 1-7, Stroudsburg, PA, USA. Association for Computational Linguistics.\n\n- Yinhan Liu, Myle Ott, Naman Goyal, Jingfei Du, Man- dar Joshi, Danqi Chen, Omer Levy, Mike Lewis, Luke Zettlemoyer, and Veselin Stoyanov. 2019. RoBERTa: A Robustly Optimized BERT Pretrain- ing Approach. arXiv preprint arXiv:1907.11692.\n\n- Marco Marelli, Stefano Menini, Marco Baroni, Luisa Bentivogli, Raffaella Bernardi, and Roberto Zam- parelli. 2014. A SICK cure for the evaluation of compositional distributional semantic models. In Proceedings of the Ninth International Conference on Language Resources and Evaluation (LREC'14), pages 216-223, Reykjavik, Iceland. European Lan- guage Resources Association (ELRA).\n\n- Chandler May, Alex Wang, Shikha Bordia, Samuel R. Bowman, and Rachel Rudinger. 2019. On Mea- suring Social Biases in Sentence Encoders. arXiv preprint arXiv:1903.10561.\n\n- Amita Misra, Brian Ecker, and Marilyn A. Walker. 2016. Measuring the Similarity of Sentential Ar- guments in Dialogue. In Proceedings of the SIG- DIAL 2016 Conference, The 17th Annual Meeting of the Special Interest Group on Discourse and Di- alogue, 13-15 September 2016, Los Angeles, CA, USA, pages 276-287.\n\n- Bo Pang and Lillian Lee. 2004. A Sentimental Educa- tion: Sentiment Analysis Using Subjectivity Sum- marization Based on Minimum Cuts. In Proceed- ings of the 42nd Meeting of the Association for Computational Linguistics (ACL'04), Main Volume, pages 271-278, Barcelona, Spain. Bo Pang and Lillian Lee. 2005. Seeing Stars: Exploit- ing Class Relationships for Sentiment Categoriza- tion with Respect to Rating Scales. In Proceedings of the 43rd Annual Meeting of the Association for Computational Linguistics (ACL'05), pages 115- 124, Ann Arbor, Michigan. Association for Compu- tational Linguistics.\n\n- Jeffrey Pennington, Richard Socher, and Christo- pher D. Manning. 2014. GloVe: Global Vectors for Word Representation. In Empirical Methods in Nat- ural Language Processing (EMNLP), pages 1532- 1543.\n\n- Yifan Qiao, Chenyan Xiong, Zheng-Hao Liu, and Zhiyuan Liu. 2019. Understanding the Be- haviors of BERT in Ranking. arXiv preprint arXiv:1904.07531.\n\n- Nils Reimers, Philip Beyer, and Iryna Gurevych. 2016. Task-Oriented Intrinsic Evaluation of Semantic Tex- tual Similarity. In Proceedings of the 26th Inter- national Conference on Computational Linguistics (COLING), pages 87-96.\n\n- Nils Reimers and Iryna Gurevych. 2018. Why Com- paring Single Performance Scores Does Not Al- low to Draw Conclusions About Machine Learn- ing Approaches. arXiv preprint arXiv:1803.09578, abs/1803.09578.\n\n- Nils Reimers, Benjamin Schiller, Tilman Beck, Jo- hannes Daxenberger, Christian Stab, and Iryna Gurevych. 2019. Classification and Clustering of Arguments with Contextualized Word Embeddings. In Proceedings of the 57th Annual Meeting of the As- sociation for Computational Linguistics, pages 567- 578, Florence, Italy. Association for Computational Linguistics.\n\n- Florian Schroff, Dmitry Kalenichenko, and James Philbin. 2015. FaceNet: A Unified Embedding for Face Recognition and Clustering. arXiv preprint arXiv:1503.03832, abs/1503.03832.\n\n- Richard Socher, Alex Perelygin, Jean Wu, Jason Chuang, Christopher D. Manning, Andrew Ng, and Christopher Potts. 2013. Recursive Deep Models for Semantic Compositionality Over a Sentiment Tree- bank. In Proceedings of the 2013 Conference on Empirical Methods in Natural Language Process- ing, pages 1631-1642, Seattle, Washington, USA. Association for Computational Linguistics.\n\n- Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez, \u0141ukasz Kaiser, and Illia Polosukhin. 2017. Attention is All you Need. In I. Guyon, U. V. Luxburg, S. Bengio, H. Wallach, R. Fergus, S. Vishwanathan, and R. Gar- nett, editors, Advances in Neural Information Pro- cessing Systems 30, pages 5998-6008.\n\n- Janyce Wiebe, Theresa Wilson, and Claire Cardie. 2005. Annotating Expressions of Opinions and Emotions in Language. Language Resources and Evaluation, 39(2):165-210.\n\n- Adina Williams, Nikita Nangia, and Samuel Bowman. 2018. A Broad-Coverage Challenge Corpus for Sentence Understanding through Inference. In Pro- ceedings of the 2018 Conference of the North Amer- ican Chapter of the Association for Computational Linguistics: Human Language Technologies, Vol- ume 1 (Long Papers), pages 1112-1122. Association for Computational Linguistics.\n\n- Yinfei Yang, Steve Yuan, Daniel Cer, Sheng-Yi Kong, Noah Constant, Petr Pilar, Heming Ge, Yun-hsuan Sung, Brian Strope, and Ray Kurzweil. 2018. Learning Semantic Textual Similarity from Conver- sations. In Proceedings of The Third Workshop on Representation Learning for NLP, pages 164- 174, Melbourne, Australia. Association for Compu- tational Linguistics.\n\n- Zhilin Yang, Zihang Dai, Yiming Yang, Jaime G. Carbonell, Ruslan Salakhutdinov, and Quoc V. Le. 2019. XLNet: Generalized Autoregressive Pretrain- ing for Language Understanding. arXiv preprint arXiv:1906.08237, abs/1906.08237.\n\n- Tianyi Zhang, Varsha Kishore, Felix Wu, Kilian Q. Weinberger, and Yoav Artzi. 2019. BERTScore: Evaluating Text Generation with BERT. arXiv preprint arXiv:1904.09675.\n\n", "annotations": {"Abstract": [{"begin": 64, "end": 1169, "idx": 0}], "Head": [{"begin": 1172, "end": 1186, "n": "1", "idx": 0}, {"begin": 5074, "end": 5088, "n": "2", "idx": 1}, {"begin": 8727, "end": 8734, "n": "3", "idx": 2}, {"begin": 10527, "end": 10547, "n": "3.1", "idx": 3}, {"begin": 10641, "end": 10682, "n": "4", "idx": 4}, {"begin": 11340, "end": 11360, "n": "4.1", "idx": 5}, {"begin": 13167, "end": 13185, "n": "4.2", "idx": 6}, {"begin": 14482, "end": 14511, "n": "4.3", "idx": 7}, {"begin": 17052, "end": 17086, "n": "4.4", "idx": 8}, {"begin": 17089, "end": 17111, "n": "5", "idx": 9}, {"begin": 20617, "end": 20633, "n": "6", "idx": 10}, {"begin": 22774, "end": 22800, "n": "7", "idx": 11}, {"begin": 24411, "end": 24423, "n": "8", "idx": 12}], "ReferenceToBib": [{"begin": 86, "end": 104, "target": "#b19", "idx": 0}, {"begin": 2910, "end": 2935, "target": "#b24", "idx": 1}, {"begin": 3758, "end": 3780, "target": "#b16", "idx": 2}, {"begin": 3943, "end": 3965, "target": "#b9", "idx": 3}, {"begin": 3997, "end": 4015, "target": "#b7", "idx": 4}, {"begin": 4201, "end": 4226, "target": "#b8", "idx": 5}, {"begin": 4465, "end": 4485, "target": "#b22", "idx": 6}, {"begin": 4583, "end": 4601, "target": "#b12", "idx": 7}, {"begin": 4783, "end": 4803, "target": "#b22", "idx": 8}, {"begin": 5180, "end": 5200, "target": "#b10", "idx": 9}, {"begin": 5239, "end": 5261, "target": "#b31", "idx": 10}, {"begin": 5802, "end": 5820, "target": "#b6", "idx": 11}, {"begin": 5830, "end": 5848, "target": "#b19", "idx": 12}, {"begin": 5978, "end": 5997, "target": "#b35", "idx": 13}, {"begin": 6468, "end": 6485, "target": "#b21", "idx": 14}, {"begin": 6487, "end": 6506, "target": "#b36", "idx": 15}, {"begin": 6508, "end": 6526, "target": "#b25", "idx": 16}, {"begin": 6806, "end": 6826, "target": "#b17", "idx": 17}, {"begin": 6914, "end": 6936, "target": "#b9", "idx": 18}, {"begin": 7006, "end": 7027, "target": "#b5", "idx": 19}, {"begin": 7060, "end": 7083, "target": "#b33", "idx": 20}, {"begin": 7153, "end": 7180, "idx": 21}, {"begin": 7282, "end": 7300, "target": "#b7", "idx": 22}, {"begin": 7389, "end": 7407, "target": "#b13", "idx": 23}, {"begin": 7522, "end": 7544, "target": "#b9", "idx": 24}, {"begin": 7545, "end": 7562, "target": "#b7", "idx": 25}, {"begin": 7640, "end": 7658, "target": "#b34", "idx": 26}, {"begin": 7826, "end": 7846, "target": "#b15", "idx": 27}, {"begin": 9159, "end": 9181, "target": "#b29", "idx": 28}, {"begin": 10594, "end": 10615, "target": "#b5", "idx": 29}, {"begin": 11484, "end": 11504, "target": "#b4", "idx": 30}, {"begin": 11505, "end": 11527, "target": "#b3", "idx": 31}, {"begin": 11528, "end": 11550, "target": "#b1", "idx": 32}, {"begin": 11551, "end": 11573, "target": "#b0", "idx": 33}, {"begin": 11574, "end": 11598, "target": "#b2", "idx": 34}, {"begin": 11618, "end": 11636, "target": "#b6", "idx": 35}, {"begin": 11671, "end": 11693, "target": "#b20", "idx": 36}, {"begin": 11801, "end": 11823, "target": "#b26", "idx": 37}, {"begin": 13211, "end": 13229, "target": "#b6", "idx": 38}, {"begin": 13444, "end": 13447, "idx": 39}, {"begin": 13448, "end": 13452, "idx": 40}, {"begin": 14031, "end": 14059, "target": "#b27", "idx": 41}, {"begin": 14579, "end": 14598, "target": "#b22", "idx": 42}, {"begin": 15345, "end": 15367, "target": "#b28", "idx": 43}, {"begin": 16071, "end": 16093, "target": "#b26", "idx": 44}, {"begin": 17121, "end": 17145, "target": "#b8", "idx": 45}, {"begin": 17600, "end": 17620, "target": "#b10", "idx": 46}, {"begin": 18020, "end": 18040, "target": "#b23", "idx": 47}, {"begin": 18097, "end": 18114, "target": "#b14", "idx": 48}, {"begin": 18200, "end": 18219, "target": "#b23", "idx": 49}, {"begin": 18289, "end": 18309, "target": "#b32", "idx": 50}, {"begin": 18365, "end": 18386, "target": "#b30", "idx": 51}, {"begin": 18448, "end": 18467, "target": "#b18", "idx": 52}, {"begin": 18541, "end": 18561, "target": "#b11", "idx": 53}, {"begin": 21711, "end": 21733, "target": "#b9", "idx": 54}, {"begin": 21765, "end": 21783, "target": "#b7", "idx": 55}, {"begin": 22655, "end": 22677, "target": "#b9", "idx": 56}, {"begin": 22994, "end": 23016, "target": "#b9", "idx": 57}, {"begin": 23049, "end": 23067, "target": "#b7", "idx": 58}, {"begin": 23132, "end": 23150, "target": "#b6", "idx": 59}], "ReferenceToFootnote": [{"begin": 1379, "end": 1380, "target": "#foot_1", "idx": 0}, {"begin": 6609, "end": 6610, "target": "#foot_2", "idx": 1}, {"begin": 23264, "end": 23265, "target": "#foot_3", "idx": 2}, {"begin": 23354, "end": 23355, "target": "#foot_4", "idx": 3}], "SectionFootnote": [{"begin": 25517, "end": 25860, "idx": 0}], "ReferenceString": [{"begin": 25877, "end": 26350, "id": "b0", "idx": 0}, {"begin": 26352, "end": 26732, "id": "b1", "idx": 1}, {"begin": 26736, "end": 27120, "id": "b2", "idx": 2}, {"begin": 27124, "end": 27510, "id": "b3", "idx": 3}, {"begin": 27514, "end": 27976, "id": "b4", "idx": 4}, {"begin": 27980, "end": 28303, "id": "b5", "idx": 5}, {"begin": 28307, "end": 28610, "id": "b6", "idx": 6}, {"begin": 28614, "end": 28874, "id": "b7", "idx": 7}, {"begin": 28878, "end": 29022, "id": "b8", "idx": 8}, {"begin": 29026, "end": 29381, "id": "b9", "idx": 9}, {"begin": 29385, "end": 29573, "id": "b10", "idx": 10}, {"begin": 29577, "end": 29893, "id": "b11", "idx": 11}, {"begin": 29897, "end": 30285, "id": "b12", "idx": 12}, {"begin": 30289, "end": 30651, "id": "b13", "idx": 13}, {"begin": 30655, "end": 30880, "id": "b14", "idx": 14}, {"begin": 30884, "end": 31084, "id": "b15", "idx": 15}, {"begin": 31088, "end": 31216, "id": "b16", "idx": 16}, {"begin": 31220, "end": 31537, "id": "b17", "idx": 17}, {"begin": 31541, "end": 31782, "id": "b18", "idx": 18}, {"begin": 31786, "end": 32021, "id": "b19", "idx": 19}, {"begin": 32025, "end": 32405, "id": "b20", "idx": 20}, {"begin": 32409, "end": 32577, "id": "b21", "idx": 21}, {"begin": 32581, "end": 32890, "id": "b22", "idx": 22}, {"begin": 32894, "end": 33493, "id": "b23", "idx": 23}, {"begin": 33497, "end": 33696, "id": "b24", "idx": 24}, {"begin": 33700, "end": 33847, "id": "b25", "idx": 25}, {"begin": 33851, "end": 34079, "id": "b26", "idx": 26}, {"begin": 34083, "end": 34286, "id": "b27", "idx": 27}, {"begin": 34290, "end": 34651, "id": "b28", "idx": 28}, {"begin": 34655, "end": 34832, "id": "b29", "idx": 29}, {"begin": 34836, "end": 35214, "id": "b30", "idx": 30}, {"begin": 35218, "end": 35554, "id": "b31", "idx": 31}, {"begin": 35558, "end": 35723, "id": "b32", "idx": 32}, {"begin": 35727, "end": 36099, "id": "b33", "idx": 33}, {"begin": 36103, "end": 36461, "id": "b34", "idx": 34}, {"begin": 36465, "end": 36691, "id": "b35", "idx": 35}, {"begin": 36695, "end": 36860, "id": "b36", "idx": 36}], "ReferenceToTable": [{"begin": 12152, "end": 12153, "target": "#tab_0", "idx": 0}, {"begin": 14095, "end": 14096, "target": "#tab_1", "idx": 1}, {"begin": 16229, "end": 16230, "target": "#tab_3", "idx": 2}, {"begin": 18597, "end": 18598, "target": "#tab_6", "idx": 3}, {"begin": 19560, "end": 19561, "target": "#tab_0", "idx": 4}, {"begin": 21528, "end": 21529, "idx": 5}, {"begin": 23838, "end": 23839, "target": "#tab_8", "idx": 6}], "Footnote": [{"begin": 25528, "end": 25595, "id": "foot_0", "n": "1", "idx": 0}, {"begin": 25596, "end": 25698, "id": "foot_1", "n": "2", "idx": 1}, {"begin": 25699, "end": 25746, "id": "foot_2", "n": "3", "idx": 2}, {"begin": 25747, "end": 25796, "id": "foot_3", "n": "4", "idx": 3}, {"begin": 25797, "end": 25860, "id": "foot_4", "n": "5", "idx": 4}], "Paragraph": [{"begin": 74, "end": 600, "idx": 0}, {"begin": 601, "end": 1014, "idx": 1}, {"begin": 1015, "end": 1169, "idx": 2}, {"begin": 1187, "end": 1603, "idx": 3}, {"begin": 1604, "end": 2370, "idx": 4}, {"begin": 2371, "end": 2936, "idx": 5}, {"begin": 2937, "end": 3781, "idx": 6}, {"begin": 3782, "end": 4337, "idx": 7}, {"begin": 4338, "end": 4602, "idx": 8}, {"begin": 4603, "end": 5072, "idx": 9}, {"begin": 5089, "end": 5174, "idx": 10}, {"begin": 5175, "end": 6048, "idx": 11}, {"begin": 6049, "end": 6715, "idx": 12}, {"begin": 6716, "end": 8725, "idx": 13}, {"begin": 8735, "end": 9081, "idx": 14}, {"begin": 9082, "end": 9318, "idx": 15}, {"begin": 9319, "end": 9614, "idx": 16}, {"begin": 9662, "end": 9813, "idx": 17}, {"begin": 9814, "end": 9990, "idx": 18}, {"begin": 9991, "end": 10269, "idx": 19}, {"begin": 10312, "end": 10525, "idx": 20}, {"begin": 10548, "end": 10639, "idx": 21}, {"begin": 10683, "end": 10771, "idx": 22}, {"begin": 10772, "end": 11338, "idx": 23}, {"begin": 11361, "end": 12154, "idx": 24}, {"begin": 12155, "end": 12456, "idx": 25}, {"begin": 12457, "end": 12989, "idx": 26}, {"begin": 12990, "end": 13165, "idx": 27}, {"begin": 13186, "end": 13794, "idx": 28}, {"begin": 13795, "end": 14060, "idx": 29}, {"begin": 14061, "end": 14480, "idx": 30}, {"begin": 14512, "end": 15368, "idx": 31}, {"begin": 15369, "end": 15810, "idx": 32}, {"begin": 15811, "end": 16231, "idx": 33}, {"begin": 16232, "end": 16463, "idx": 34}, {"begin": 16464, "end": 17050, "idx": 35}, {"begin": 17112, "end": 17817, "idx": 36}, {"begin": 17818, "end": 17943, "idx": 37}, {"begin": 17944, "end": 18041, "idx": 38}, {"begin": 18042, "end": 18116, "idx": 39}, {"begin": 18117, "end": 18221, "idx": 40}, {"begin": 18222, "end": 18310, "idx": 41}, {"begin": 18311, "end": 18387, "idx": 42}, {"begin": 18388, "end": 18468, "idx": 43}, {"begin": 18469, "end": 18562, "idx": 44}, {"begin": 18563, "end": 19166, "idx": 45}, {"begin": 19167, "end": 19436, "idx": 46}, {"begin": 19437, "end": 20137, "idx": 47}, {"begin": 20138, "end": 20615, "idx": 48}, {"begin": 20634, "end": 20870, "idx": 49}, {"begin": 20871, "end": 21131, "idx": 50}, {"begin": 21132, "end": 21937, "idx": 51}, {"begin": 21938, "end": 22436, "idx": 52}, {"begin": 22437, "end": 22772, "idx": 53}, {"begin": 22801, "end": 23068, "idx": 54}, {"begin": 23069, "end": 23686, "idx": 55}, {"begin": 23687, "end": 24409, "idx": 56}, {"begin": 24424, "end": 24675, "idx": 57}, {"begin": 24676, "end": 25051, "idx": 58}, {"begin": 25052, "end": 25515, "idx": 59}], "SectionHeader": [{"begin": 0, "end": 1169, "idx": 0}], "SectionReference": [{"begin": 25862, "end": 36862, "idx": 0}], "Sentence": [{"begin": 74, "end": 221, "idx": 0}, {"begin": 222, "end": 473, "idx": 1}, {"begin": 474, "end": 600, "idx": 2}, {"begin": 601, "end": 849, "idx": 3}, {"begin": 850, "end": 1014, "idx": 4}, {"begin": 1015, "end": 1169, "idx": 5}, {"begin": 1187, "end": 1381, "idx": 6}, {"begin": 1382, "end": 1479, "idx": 7}, {"begin": 1480, "end": 1603, "idx": 8}, {"begin": 1604, "end": 1716, "idx": 9}, {"begin": 1717, "end": 1830, "idx": 10}, {"begin": 1831, "end": 1937, "idx": 11}, {"begin": 1938, "end": 2088, "idx": 12}, {"begin": 2089, "end": 2140, "idx": 13}, {"begin": 2141, "end": 2370, "idx": 14}, {"begin": 2371, "end": 2522, "idx": 15}, {"begin": 2523, "end": 2632, "idx": 16}, {"begin": 2633, "end": 2788, "idx": 17}, {"begin": 2789, "end": 2936, "idx": 18}, {"begin": 2937, "end": 2981, "idx": 19}, {"begin": 2982, "end": 3083, "idx": 20}, {"begin": 3084, "end": 3212, "idx": 21}, {"begin": 3213, "end": 3379, "idx": 22}, {"begin": 3380, "end": 3629, "idx": 23}, {"begin": 3630, "end": 3781, "idx": 24}, {"begin": 3782, "end": 4016, "idx": 25}, {"begin": 4017, "end": 4188, "idx": 26}, {"begin": 4189, "end": 4337, "idx": 27}, {"begin": 4338, "end": 4378, "idx": 28}, {"begin": 4379, "end": 4602, "idx": 29}, {"begin": 4603, "end": 4804, "idx": 30}, {"begin": 4805, "end": 4843, "idx": 31}, {"begin": 4844, "end": 4923, "idx": 32}, {"begin": 4924, "end": 5072, "idx": 33}, {"begin": 5089, "end": 5174, "idx": 34}, {"begin": 5175, "end": 5409, "idx": 35}, {"begin": 5410, "end": 5524, "idx": 36}, {"begin": 5525, "end": 5688, "idx": 37}, {"begin": 5689, "end": 5821, "idx": 38}, {"begin": 5822, "end": 5956, "idx": 39}, {"begin": 5957, "end": 6048, "idx": 40}, {"begin": 6049, "end": 6222, "idx": 41}, {"begin": 6223, "end": 6528, "idx": 42}, {"begin": 6529, "end": 6611, "idx": 43}, {"begin": 6612, "end": 6715, "idx": 44}, {"begin": 6716, "end": 6792, "idx": 45}, {"begin": 6793, "end": 6903, "idx": 46}, {"begin": 6904, "end": 7151, "idx": 47}, {"begin": 7152, "end": 7254, "idx": 48}, {"begin": 7255, "end": 7387, "idx": 49}, {"begin": 7388, "end": 7507, "idx": 50}, {"begin": 7508, "end": 7638, "idx": 51}, {"begin": 7639, "end": 7824, "idx": 52}, {"begin": 7825, "end": 8047, "idx": 53}, {"begin": 8048, "end": 8128, "idx": 54}, {"begin": 8129, "end": 8332, "idx": 55}, {"begin": 8333, "end": 8426, "idx": 56}, {"begin": 8427, "end": 8554, "idx": 57}, {"begin": 8555, "end": 8725, "idx": 58}, {"begin": 8735, "end": 8841, "idx": 59}, {"begin": 8842, "end": 9046, "idx": 60}, {"begin": 9047, "end": 9081, "idx": 61}, {"begin": 9082, "end": 9318, "idx": 62}, {"begin": 9319, "end": 9380, "idx": 63}, {"begin": 9381, "end": 9449, "idx": 64}, {"begin": 9450, "end": 9484, "idx": 65}, {"begin": 9485, "end": 9614, "idx": 66}, {"begin": 9662, "end": 9741, "idx": 67}, {"begin": 9742, "end": 9773, "idx": 68}, {"begin": 9774, "end": 9813, "idx": 69}, {"begin": 9814, "end": 9844, "idx": 70}, {"begin": 9845, "end": 9933, "idx": 71}, {"begin": 9934, "end": 9990, "idx": 72}, {"begin": 9991, "end": 10018, "idx": 73}, {"begin": 10019, "end": 10212, "idx": 74}, {"begin": 10213, "end": 10269, "idx": 75}, {"begin": 10312, "end": 10393, "idx": 76}, {"begin": 10394, "end": 10454, "idx": 77}, {"begin": 10455, "end": 10525, "idx": 78}, {"begin": 10548, "end": 10639, "idx": 79}, {"begin": 10683, "end": 10771, "idx": 80}, {"begin": 10772, "end": 10893, "idx": 81}, {"begin": 10894, "end": 11067, "idx": 82}, {"begin": 11068, "end": 11167, "idx": 83}, {"begin": 11168, "end": 11338, "idx": 84}, {"begin": 11361, "end": 11451, "idx": 85}, {"begin": 11452, "end": 11694, "idx": 86}, {"begin": 11695, "end": 11787, "idx": 87}, {"begin": 11788, "end": 11873, "idx": 88}, {"begin": 11874, "end": 12003, "idx": 89}, {"begin": 12004, "end": 12117, "idx": 90}, {"begin": 12118, "end": 12154, "idx": 91}, {"begin": 12155, "end": 12246, "idx": 92}, {"begin": 12247, "end": 12400, "idx": 93}, {"begin": 12401, "end": 12456, "idx": 94}, {"begin": 12457, "end": 12643, "idx": 95}, {"begin": 12644, "end": 12730, "idx": 96}, {"begin": 12731, "end": 12908, "idx": 97}, {"begin": 12909, "end": 12989, "idx": 98}, {"begin": 12990, "end": 13165, "idx": 99}, {"begin": 13186, "end": 13295, "idx": 100}, {"begin": 13296, "end": 13388, "idx": 101}, {"begin": 13389, "end": 13453, "idx": 102}, {"begin": 13454, "end": 13608, "idx": 103}, {"begin": 13609, "end": 13669, "idx": 104}, {"begin": 13670, "end": 13794, "idx": 105}, {"begin": 13795, "end": 13878, "idx": 106}, {"begin": 13879, "end": 13964, "idx": 107}, {"begin": 13965, "end": 14060, "idx": 108}, {"begin": 14061, "end": 14097, "idx": 109}, {"begin": 14098, "end": 14203, "idx": 110}, {"begin": 14204, "end": 14283, "idx": 111}, {"begin": 14284, "end": 14411, "idx": 112}, {"begin": 14412, "end": 14480, "idx": 113}, {"begin": 14512, "end": 14599, "idx": 114}, {"begin": 14600, "end": 14759, "idx": 115}, {"begin": 14760, "end": 14852, "idx": 116}, {"begin": 14853, "end": 14971, "idx": 117}, {"begin": 14972, "end": 15060, "idx": 118}, {"begin": 15061, "end": 15169, "idx": 119}, {"begin": 15170, "end": 15239, "idx": 120}, {"begin": 15240, "end": 15368, "idx": 121}, {"begin": 15369, "end": 15502, "idx": 122}, {"begin": 15503, "end": 15614, "idx": 123}, {"begin": 15615, "end": 15666, "idx": 124}, {"begin": 15667, "end": 15749, "idx": 125}, {"begin": 15750, "end": 15810, "idx": 126}, {"begin": 15811, "end": 15871, "idx": 127}, {"begin": 15872, "end": 15962, "idx": 128}, {"begin": 15963, "end": 16051, "idx": 129}, {"begin": 16052, "end": 16194, "idx": 130}, {"begin": 16195, "end": 16231, "idx": 131}, {"begin": 16232, "end": 16357, "idx": 132}, {"begin": 16358, "end": 16463, "idx": 133}, {"begin": 16464, "end": 16582, "idx": 134}, {"begin": 16583, "end": 16681, "idx": 135}, {"begin": 16682, "end": 16752, "idx": 136}, {"begin": 16753, "end": 16922, "idx": 137}, {"begin": 16923, "end": 17050, "idx": 138}, {"begin": 17112, "end": 17215, "idx": 139}, {"begin": 17216, "end": 17294, "idx": 140}, {"begin": 17295, "end": 17452, "idx": 141}, {"begin": 17453, "end": 17551, "idx": 142}, {"begin": 17552, "end": 17709, "idx": 143}, {"begin": 17710, "end": 17817, "idx": 144}, {"begin": 17818, "end": 17943, "idx": 145}, {"begin": 17944, "end": 18041, "idx": 146}, {"begin": 18042, "end": 18116, "idx": 147}, {"begin": 18117, "end": 18221, "idx": 148}, {"begin": 18222, "end": 18310, "idx": 149}, {"begin": 18311, "end": 18387, "idx": 150}, {"begin": 18388, "end": 18468, "idx": 151}, {"begin": 18469, "end": 18562, "idx": 152}, {"begin": 18563, "end": 18666, "idx": 153}, {"begin": 18667, "end": 18795, "idx": 154}, {"begin": 18796, "end": 18934, "idx": 155}, {"begin": 18935, "end": 19166, "idx": 156}, {"begin": 19167, "end": 19271, "idx": 157}, {"begin": 19272, "end": 19436, "idx": 158}, {"begin": 19437, "end": 19600, "idx": 159}, {"begin": 19601, "end": 19753, "idx": 160}, {"begin": 19754, "end": 19799, "idx": 161}, {"begin": 19800, "end": 19902, "idx": 162}, {"begin": 19903, "end": 19951, "idx": 163}, {"begin": 19952, "end": 20039, "idx": 164}, {"begin": 20040, "end": 20137, "idx": 165}, {"begin": 20138, "end": 20327, "idx": 166}, {"begin": 20328, "end": 20430, "idx": 167}, {"begin": 20431, "end": 20615, "idx": 168}, {"begin": 20634, "end": 20725, "idx": 169}, {"begin": 20726, "end": 20870, "idx": 170}, {"begin": 20871, "end": 20934, "idx": 171}, {"begin": 20935, "end": 21022, "idx": 172}, {"begin": 21023, "end": 21131, "idx": 173}, {"begin": 21132, "end": 21220, "idx": 174}, {"begin": 21221, "end": 21321, "idx": 175}, {"begin": 21322, "end": 21419, "idx": 176}, {"begin": 21420, "end": 21500, "idx": 177}, {"begin": 21501, "end": 21530, "idx": 178}, {"begin": 21531, "end": 21647, "idx": 179}, {"begin": 21648, "end": 21700, "idx": 180}, {"begin": 21701, "end": 21850, "idx": 181}, {"begin": 21851, "end": 21937, "idx": 182}, {"begin": 21938, "end": 22005, "idx": 183}, {"begin": 22006, "end": 22093, "idx": 184}, {"begin": 22094, "end": 22252, "idx": 185}, {"begin": 22253, "end": 22436, "idx": 186}, {"begin": 22437, "end": 22546, "idx": 187}, {"begin": 22547, "end": 22631, "idx": 188}, {"begin": 22632, "end": 22772, "idx": 189}, {"begin": 22801, "end": 22920, "idx": 190}, {"begin": 22921, "end": 23068, "idx": 191}, {"begin": 23069, "end": 23151, "idx": 192}, {"begin": 23152, "end": 23253, "idx": 193}, {"begin": 23254, "end": 23286, "idx": 194}, {"begin": 23287, "end": 23387, "idx": 195}, {"begin": 23388, "end": 23414, "idx": 196}, {"begin": 23415, "end": 23617, "idx": 197}, {"begin": 23618, "end": 23686, "idx": 198}, {"begin": 23687, "end": 23803, "idx": 199}, {"begin": 23804, "end": 23889, "idx": 200}, {"begin": 23890, "end": 23943, "idx": 201}, {"begin": 23944, "end": 24029, "idx": 202}, {"begin": 24030, "end": 24116, "idx": 203}, {"begin": 24117, "end": 24237, "idx": 204}, {"begin": 24238, "end": 24302, "idx": 205}, {"begin": 24303, "end": 24409, "idx": 206}, {"begin": 24424, "end": 24584, "idx": 207}, {"begin": 24585, "end": 24675, "idx": 208}, {"begin": 24676, "end": 24741, "idx": 209}, {"begin": 24742, "end": 24808, "idx": 210}, {"begin": 24809, "end": 24963, "idx": 211}, {"begin": 24964, "end": 25051, "idx": 212}, {"begin": 25052, "end": 25087, "idx": 213}, {"begin": 25088, "end": 25188, "idx": 214}, {"begin": 25189, "end": 25280, "idx": 215}, {"begin": 25281, "end": 25449, "idx": 216}, {"begin": 25450, "end": 25515, "idx": 217}], "ReferenceToFigure": [{"begin": 9811, "end": 9812, "target": "#fig_0", "idx": 0}, {"begin": 9930, "end": 9931, "target": "#fig_1", "idx": 1}], "Div": [{"begin": 74, "end": 1169, "idx": 0}, {"begin": 1172, "end": 5072, "idx": 1}, {"begin": 5074, "end": 8725, "idx": 2}, {"begin": 8727, "end": 10525, "idx": 3}, {"begin": 10527, "end": 10639, "idx": 4}, {"begin": 10641, "end": 11338, "idx": 5}, {"begin": 11340, "end": 13165, "idx": 6}, {"begin": 13167, "end": 14480, "idx": 7}, {"begin": 14482, "end": 17050, "idx": 8}, {"begin": 17052, "end": 17087, "idx": 9}, {"begin": 17089, "end": 20615, "idx": 10}, {"begin": 20617, "end": 22772, "idx": 11}, {"begin": 22774, "end": 24409, "idx": 12}, {"begin": 24411, "end": 25515, "idx": 13}], "SectionMain": [{"begin": 1169, "end": 25515, "idx": 0}]}}