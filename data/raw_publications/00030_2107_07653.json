{"text": "TAPEX: TABLE PRE-TRAINING VIA LEARNING A NEURAL SQL EXECUTOR\n\nAbstract:\nRecent progress in language model pre-training has achieved a great success via leveraging large-scale unstructured textual data. However, it is still a challenge to apply pre-training on structured tabular data due to the absence of large-scale high-quality tabular data. In this paper, we propose TAPEX to show that table pretraining can be achieved by learning a neural SQL executor over a synthetic corpus, which is obtained by automatically synthesizing executable SQL queries and their execution outputs. TAPEX addresses the data scarcity challenge via guiding the language model to mimic a SQL executor on the diverse, large-scale and highquality synthetic corpus. We evaluate TAPEX on four benchmark datasets. Experimental results demonstrate that TAPEX outperforms previous table pre-training approaches by a large margin and achieves new state-of-the-art results on all of them. This includes improvements on the weakly-supervised WikiSQL denotation accuracy to 89.5% (+2.3%), the WikiTableQuestions denotation accuracy to 57.5% (+4.8%), the SQA denotation accuracy to 74.5% (+3.5%), and the TabFact accuracy to 84.2% (+3.2%). To our knowledge, this is the first work to exploit table pre-training via synthetic executable programs and to achieve new state-of-the-art results on various downstream tasks. Our code can be found at https://github.com/microsoft/Table-Pretraining.\n\n\n1 INTRODUCTION\nPre-trained language models (LMs) such as BERT (Devlin et al., 2019) and BART (Lewis et al., 2020) have hit a success on a range of free-form natural language (NL) tasks. By learning from a large amount of unstructured textual data, these models have demonstrated surprising capabilities in understanding NL sentences. Inspired by this huge success, researchers have attempted to extend pre-training to structured tabular data (Herzig et al., 2020; Yin et al., 2020; Yu et al., 2021a; Wang et al., 2021b; Deng et al., 2020; 2021; Shi et al., 2021a). However, different from free-form NL sentences, tabular data often contains rich and meaningful structural information, for which existing pre-training approaches designed for unstructured data are not well suited.\nTo apply pre-training techniques on structured tabular data, there exist two key challenges: (i) where to obtain a large-scale pre-training corpus with high quality, and (ii) how to design an efficient pretraining task for table pre-training. For the first challenge, existing works generally collect parallel data including NL sentences and tables as the pre-training corpus, since downstream tasks often involve a joint reasoning over both free-form NL sentences and tables. They either crawled tables and their surrounding NL sentences from the Web (Herzig et al., 2020; Yin et al., 2020; Deng et al., 2021), or synthesized NL sentences on available tables (Yu et al., 2021a; Shi et al., 2021a). However, as pointed by Yin et al. (2020), the raw data mined from the Web is extremely noisy and requires complicated heuristics to clean. Conversely, the synthesis method is easier to control the data quality, but it usually requires experts to write hundreds of templates, which is both costly and often lacking diversity. Regarding the pre-training task, existing works often employ different variants of Masked Language Modeling (MLM) (Devlin et al., 2019) to guide LMs to learn better representations of Input: Greece held its last Summer Olympics in which year? [Table] Output: 2004   Fine-tuning Fine-tuned LM for Downstream Task Figure 1 : The schematic overview of our method. For the sake of brevity, the table content in the input is simplified with the symbol [Table]. tabular data. For example, TAPAS (Herzig et al., 2020) used MLM with whole word masking, and TABERT (Yin et al., 2020) proposed Masked Column Prediction (MCP) to encourage the model to recover the names and data types of masked columns. Despite their success, they still largely treat tabular data as a structural format of text, which leads to the need of an extremely large corpus for their table pre-training. All of these hinder the progress of table pre-training.\nIn this paper, we present a novel execution-centric table pre-training approach TAPEX (TAble Pretraining via EXecution). It addresses the above challenges and achieves efficient table pre-training via approximating the structural reasoning process of formal languages over tables. The structural reasoning process is associated with the executability of tables, i.e., tables are inherently capable of supporting various reasoning operations (e.g., summing over a column in the table). In particular, TAPEX approximates the structural reasoning process of SQL queries by pre-training LMs to mimic the behavior of a SQL execution engine on tables. As shown in Figure 1, by sampling executable SQL queries over tables, TAPEX first synthesizes a large-scale pre-training corpus. Then it continues pre-training a language model to output the execution results of these SQL queries, which are obtained from the SQL execution engine. Since the diversity of SQL queries can be systematically guaranteed, we can easily synthesize a diverse, large-scale, and high-quality pre-training corpus.\nOur key insight is that if a language model can be pre-trained to faithfully \"execute\" SQL queries and produce correct results, it should have a deep understanding of tables. Thus, the execution pre-training task could be more efficient in understanding tables and reasoning over tables. To our knowledge, TAPEX is the first one to explore table pre-training via synthetic executable programs.\nTAPEX is conceptually simple and easy to implement. In this paper, we regard the pre-training as a sequence generation task and employ an encoder-decoder model. Specifically, we employ the pre-trained encoder-decoder language model BART (Lewis et al., 2020) as the backbone. Furthermore, we examine the effectiveness of TAPEX via two fundamental downstream tasks: table-based question answering (TableQA) and table-based fact verification (TableFV). To enable fine-tuning of downstream tasks to take full advantage of TAPEX, we reformulate these tasks using the encoderdecoder sequence generation paradigm. We evaluate TAPEX using four well-known benchmark datasets. Experimental results clearly demonstrate that TAPEX can bring significant and consistent improvements on these datasets. For example, TAPEX obtains an absolute improvement of 19.5% over BART in the WIKITABLEQUESTIONS dataset. Furthermore, TAPEX yields strong results even with a small pre-training corpus, demonstrating its high efficiency. Finally, TAPEX achieves new state-of-the-art results on all experimental benchmarks, outperforming previous approaches by a large margin, including complicated table pre-training approaches with several heuristics in data processing. We will make our code, model, and data publicly available to facilitate future research.\n\n2 FINE-TUNING ON DOWNSTREAM TASKS\nBefore diving into the details of our proposed table pre-training, we start by describing how to tackle downstream task fine-tuning with the encoder-decoder sequence generation paradigm. In this section, we first present the background of two fundamental table related downstream tasks: tablebased question answering (TableQA) and table-based fact verification (TableFV). Then we elaborate on our generative fine-tuning method in detail.\n\nFine-tuning\nWho is the other person who is 24 years old besides Reyna Royo ? [ HEAD] Contestant | Age | Hometown [ROW]  The illustration of the fine-tuning procedure in our method. During fine-tuning, we feed the concatenation of an NL sentence and its corresponding table taken from the downstream task to the model, and train it to output the answer (e.g., \"Marisela Moreno Montero\").\n\n2.1 DOWNSTREAM TASK FORMULATION\nAs mentioned in \u00a7 1, downstream tasks always involve joint reasoning over free-form NL sentences and tables. Therefore, examples of downstream tasks generally contain an NL sentence x and a (semi-)structured table T as the model input. Each NL sentence consists of K tokens asx = x 1 , x 2 , \u2022 \u2022 \u2022, x K , while each table T consists of M rows {r i } M\ni=1 , in which each row r i contains N cell values {s i,j } N j=1 . Each cell s i,j includes a list of tokens and corresponds to a table header c j . As for the output, there are variations among different tasks. In this paper, we focus on TableQA and TableFV. TableQA aims to retrieve table content to answer the user's question, and thus its output is either a list of cell values or number(s) calculated over the selected table region by aggregation functions (e.g., SUM). It is worth noting that for semi-structured tables, the answer may not be exactly table cell values, but their normalized forms (e.g., from 2k to 2,000), which makes downstream tasks more challenging (Oguz et al., 2020). As for TableFV, the output is a binary decision entailed or refused, indicating whether the NL sentence follows the fact indicated by the table.\n\n2.2 GENERATIVE FINE-TUNING\nIn this section, we present a generative approach for downstream task fine-tuning. Unlike previous works, we model both TableQA and TableFV as sequence generation tasks and leverage generative LMs to generate the output autoregressively. Taking TableQA as an example, given an NL question, our method generates the answer by decoding it in a word-by-word fashion.\nArchitecture Our method theoretically applies for any LM as long as it can generate sequence, such as GPT3 (Brown et al., 2020) and UniLM (Bao et al., 2020). In our experiments, we implemented our method based on BART (Lewis et al., 2020), a widely used pre-trained encoder-decoder model. BART follows a standard sequence-to-sequence Transformer architecture (Vaswani et al., 2017), with modifying ReLU activation functions to GeLU. It is pre-trained via corrupting sentences (i.e., randomly sampling length-variable spans and masking each one with a single [MASK] token) and then optimizing a reconstruction loss. As for the number of layers, we employ the BART Large configuration in our experiments, i.e., 12 layers are used in both the encoder and the decoder.\nModel Input As illustrated in Figure 2, the input contains an NL sentence and its corresponding table. Encoding the NL sentence is relatively straightforward, while encoding the table is non-trivial since it exhibits underlying structures. In practice, we flatten the table into a sequence so that it can be fed directly into the model. By inserting several special tokens to indicate the table boundaries, a flattened table can be represented asT * = [HEAD], c 1 , \u2022 \u2022 \u2022, c N , [ROW], 1, r 1 , [ROW], 2, r 2 , \u2022 \u2022 \u2022, r M .\nHere [HEAD] and [ROW] are special tokens indicating the region of table headers and rows respectively, and the number after [ROW] is used to indicate the row index. Notably, we also separate headers or cells in different columns using a vertical bar | . Finally, we prefix the flattened table T * with the NL sentence x and feed them into the model encoder.\nModel Output With attending on the encoder, the decoder is responsible for modeling the outputs of both TableQA and TableFV. For TableQA, the output is the concatenation of the answer(s) separated by commas, and the decoder generates it autoregressively. In this way, our model can readily support (almost) all operators and their compositions in TableQA. For TableFV, as BART does for sequence classification tasks (Lewis et al., 2020), the same input is fed into both the encoder and decoder, and a binary classifier upon the hidden state of the last token in the decoder is used for the output. Notably, our method can be easily extended to other table related tasks in a similar way.\n\nPre-training\nFigure 3 : The illustration of the pre-training procedure in our method. During pre-training, we feed the concatenation of a sampled SQL query and a sampled table to the model, and train it to output the corresponding execution result (e.g., \"Pairs\").\nFine-Tuning Strategy Since our approach can perform various downstream tasks on the same architecture, it can easily perform multi-task learning. Therefore, we explore two ways of finetuning, one for vanilla fine-tuning and the other for multi-task fine-tuning. The former is to fine-tune the model on each individual downstream task. The latter is inspired by TAPAS (Herzig et al., 2020) and T5 (Raffel et al., 2020), which first fine-tunes the model on related or similar intermediate downstream tasks and then continues to fine-tune it on the target downstream task.\nDiscussion Our approach comes with several advantages: (i) Flexibility: due to the powerful expressiveness of encoder-decoder models, our approach can readily adapt to (almost) any kind of output. (ii) Conveniency: our approach does not require any modification (e.g., table-specific masking) on pre-trained LMs, and can be trained in an end-to-end manner. (iii) Transferability: since we formulate downstream tasks as sequence generation tasks, which allows different tasks to share the same training protocol, it is easy to perform multi-task fine-tuning for our approach.\n\n3 TABLE PRE-TRAINING VIA EXECUTION\nAs mentioned in \u00a7 1, TAPEX achieves efficient table pre-training by training LMs to mimic the behavior of a SQL execution engine. In this section, we illustrate how to conduct table pre-training from two aspects: the pre-training task and the pre-training corpus.\n\n3.1 PRE-TRAINING TASK\nFollowing the MLM task in NL pre-training, existing works usually use reconstruction tasks for table pre-training. They generally take corrupted tables and NL sentences as input and try to recover the corrupted parts, in order to strengthen the linking between NL sentences and tables. While these pre-training tasks perform well, they tend to be less efficient since they usually require an extremely large pre-training corpus.\nTo design efficient tasks for table pre-training, we argue that the key lies in the executability of tables. That is to say, structured tables enable us to perform discrete operations on them via programming languages such as SQL queries, while unstructured text does not. Taking this into account, TAPEX adopts SQL execution as the only pre-training task. As illustrated in Figure 3, the pre-training of TAPEX is similar to the procedure of the above generative fine-tuning. Given an executable SQL query and a table T , TAPEX first concatenates the SQL query and the flattened table T * to feed into the model encoder. Then it obtains the query's execution result through an off-the-shelf SQL executor (e.g., MySQL) to serve as the supervision for the model decoder. Intuitively, the pretraining procedure is to encourage a language model to be a neural SQL executor. We believe that if a language model can be trained to faithfully \"execute\" SQL queries and produce correct results, then it should have a deep understanding of tables.  2020), we choose publicly available semistructured tables as the table source. However, rather than requiring millions of raw tables in (Yin et al., 2020), TAPEX works well even with only a few thousand tables. Therefore, instead of fetching noisy tables from the Web and then heuristically filtering them, we pick high-quality tables right from existing public datasets. Concretely, we randomly select nearly 1, 500 tables from the training set of WIKITABLEQUESTIONS (Pasupat & Liang, 2015) as the table source for our pre-training corpus. Notice that there is no overlap between the tables used in our pre-training and the tables used in the dev and test sets of all downstream tasks, so there is no data leakage problem.\n\n3.2 PRE-TRAINING CORPUS\nQuery Sampling Regarding the sampling of diverse SQL queries, there are various choices in the literature. We can either sample SQL queries according to a probabilistic context-free grammar (Wang et al., 2021a), or instantiate SQL templates over different tables (Zhong et al., 2020a). In our experiments, we follow the latter, where SQL templates are automatically extracted from the SQUALL dataset (Shi et al., 2020b). An example SQL template is: SELECT num1 WHERE text1 = val1, where num1 and text1 correspond to a numeric column and a text column respectively, and val1 refers to one of the cell values with respect to the column text1. Given a SQL template, at each instantiation, we uniformly sample headers and cell values from a sampled table to fill the template, forming a concrete SQL query. Notably, SQL queries that execute with empty results are discarded, because empty results do not reflect much information about the executability of tables. This way, we can obtain a large-scale pre-training corpus with high quality.\n\n4 EXPERIMENTS\nIn this section, we evaluate TAPEX on different downstream tasks to verify its effectiveness.\n\nDataset and Evaluation\nWe evaluate the performance of our approach on weakly-supervised WikiSQL (WIKISQL-WEAK) (Zhong et al., 2017), WIKITABLEQUESTIONS (Pasupat & Liang, 2015), SQA (Iyyer et al., 2017), and TABFACT (Chen et al., 2020). Compared to WIKISQL-WEAK, which only requires filtering and optionally aggregating on table cell values, WIKITABLE-QUESTIONS requires more complicated reasoning capabilities. SQA is a conversational benchmark, which requires our approach to model the conversational context. Datset details can be found in Appendix A. For TableQA datasets, the evaluation metric is denotation accuracy, which checks whether the predicted answer(s) is equal to the ground-truth answer(s). It is worth noting that we evaluate our approach on WIKISQL-WEAK with answer annotations provided by TAPAS (Herzig et al., 2020), since nearly 2% of answers obtained from the official evaluation script are incorrect. For TABFACT, the evaluation metric is accuracy, which is calculated using the percentage of correct prediction.\nImplementation Details We implement our approach based on fairseq (Ott et al., 2019). During pre-training, we synthesize up to 5 million pairs of SQL queries and their execution results for TAPEX. In the following, unless specified explicitly, all the experimental results are by default evaluated under the 5 million setting. Our pre-training procedure runs up to 50, 000 steps with a batch size of 256. It takes about 36 hours on 8 Tesla V100 GPUs to finish the pre-training. The best pre-training checkpoint is selected based on the loss on the validation set. For all downstream datasets, the fine-tuning procedure runs up to 20, 000 steps with a batch size of 128. For both pretraining and fine-tuning, the learning rate is 3\u00d710 \u22125 .\n\n4.1 MAIN RESULTS\nTable 1, Table 2, Table 3 and Table 4 summarize the experimental results of various models on WIKISQL-WEAK, WIKITABLEQUESTIONS, SQA and TABFACT respectively. For both dev and test sets of all datasets, we report the median performance of our approach for five random runs.\nWIKISQL-WEAK As shown in Table 1, TAPEX outperforms all the baselines by a large margin.\nOn the test set of WIKISQL-WEAK, TAPEX registers a denotation accuracy of 89.5%, which is 3.7% higher than BART and 2.3% higher than the previous best performance. This is significant since the previous best model has already utilized the execution-guided decoding. In short, TAPEX achieves a new state-of-the-art result on the well-known benchmark WIKISQL-WEAK.\nWIKITABLEQUESTIONS On the more challenging WIKITABLEQUESTIONS, TAPEX also achieves a new state-of-the-art denotation accuracy of 57.5%, surpassing the previous best system by 4.8% (Table 2). Meanwhile, we find that BART alone can only reach the denotation accuracy of 38.0%, much worse than the performance of previous pre-training models. We conjecture that the performance degradation could be attributed to the relatively small amount of training data in WIK-ITABLEQUESTIONS, which makes the adaptation of BART to tabular structures more challenging. Figure 4 : The visualization results of attention weights from other tokens to the cell \"adrian lewis\". Intuitively, the darker the color, the more closely the word is associated with \"adrian lewis\".\nHowever, TAPEX delivers a dramatic improvement of 19.5% over BART, indicating that in the low data regime, the improvements introduced by TAPEX are often more significant.\nSQA Table 3 presents the performance of various models on the test set of SQA, where TAPEX again obtains a new state-of-the-art denotation accuracy in terms of both the conversation level (48.4%) and the sentence level (74.5%). This improvement is also a surprise to us since SQA is a conversational dataset while our pre-training task is context-free. Meanwhile, the substantial improvements of TAPEX over BART on SQA continues to verify the same observation that TAPEX alleviates the low resource issue.\nTABFACT Beyond TableQA, TAPEX also excels at TableFV. As shown in Table 4, TAPEX achieves new state-of-the-art results on all subsets of TABFACT. For example, it surpasses the previous best system by 4.0% on Test complex . The result shows that TAPEX endows BART with generic table understanding capabilities, which could be adapted to different downstream tasks, regardless of whether these tasks are highly similar to the TAPEX pre-training task or not.\n\nOverall Results\nExperimental results on four datasets show that TAPEX can broadly improve the model ability on understanding tables, especially in the low data regime.\n\n4.2 MULTI-TASK RESULTS\nAs discussed in \u00a7 2.2, our approach can easily perform multi-task learning, thereby conferring benefits to downstream tasks. To verify it, we conducted multi-task fine-tuning experiments and obtained the following findings: (1) when initialized by BART, multi-task fine-tuning boosts the performance of the target task significantly;\n(2) when initialized by TAPEX, the gain of multi-task fine-tuning tends to be marginal, suggesting that most of the \"skills\" (loosely speaking) gained by multi-task learning can be acquired by our table pre-training. Detailed results can be found in Appendix B.\n\n5 ANALYSIS\nIn this section, we carefully analyze our approach in terms of various aspects. Besides, we perform an exploratory analysis to provide more insights for future work, which can be found in Appendix C.\n\nSQL Execution by Pre-training\nIn order to understand how well TAPEX performs SQL execution after pre-training, we analyze its performance on nearly 20, 000 held-out SQL queries over unseen tables. Overall, the SQL execution accuracy is relatively high, as TAPEX correctly \"executes\" 89.6% of the SQL queries 1. In particular, TAPEX performs better on Filter, Aggregate and Superlative operators, indicating that it is highly accurate in table cell selection and table aggregating. Regarding Arithmetic and Comparative operators, TAPEX also does a good job, demonstrating its numerical reasoning skill on tables. To summarize, TAPEX has learned to be a neural SQL executor with good selection, aggregating and numerical capabilities.\n\nTable Understanding by Pre-training\nTo provide insight on if TAPEX helps downstream tasks understand tables better, we visualize and analyze the self-attention of TAPEX (without fine-tuning) on sampled WIKITABLEQUESTIONS examples. As shown in Figure 4, TAPEX seems to focus more on the row and the header where a cell corresponds to. Taking the example from Figure 4, the attention weights imply that \"adrian lewis\" is closely associated with the first column \"player\" and the entire third row, which are the positions of \"adrian lewis\" in the structured table.\n\nGroup\nWhat was score for each winning game? 49.5 % 66.7% (+17.2%)\nTable 5 : The most common operators in the randomly selected 500 questions from WIKITABLE-QUESTIONS dev set. Listed are, the operator, the example question with the operator semantic (i.e., the colorful spans), the performance of BART and TAPEX on the operator. lyzed them in Table 5. One can find that TAPEX significantly boosts the performance on all operators, implying that it does enhance BART's capabilities for joint reasoning over text and tables.\nThe Scale of Pre-training Corpus Figure 5 illustrates downstream performance with different scales of the pre-training corpus. It can be seen that even if our pre-training corpus is synthetic, scaling up the pre-training corpus generally brings positive effects. The observation is analogous to the one in language modeling (Brown et al., 2020) : the larger the pre-training corpus, the better the downstream performance. By the comparison across different datasets, we can find that for simple tasks like WIKISQL-WEAK, the gains by scaling up pre-training corpus become marginal, while they remain non-trivial for complex tasks like TABFACT. Meanwhile, both downstream datasets in the low data regime show a positive trend by increasing the pre-training corpus. Conclusively, the scale matters when the downstream task is difficult, or the downstream dataset is relatively small. The Efficiency of Pre-training As mentioned in \u00a7 1, the pre-training efficiency of existing table pre-training approaches is relatively low, as they usually require an extremely large corpus. Therefore, taking WIKITABLEQUESTIONS as an example, we compare the pre-training efficiency of TAPEX with TAPAS (Herzig et al., 2020), TABERT (Yin et al., 2020) and GRAPPA (Yu et al., 2021a). It is worth noting that part of the pre-training corpus for GRAPPA comes from humanannotated, high-quality parallel data. As shown in Figure 6, TAPEX can yield very promising performance when using a much smaller pre-training corpus, indicating that our proposed SQL execution pre-training task is more efficient than other table pre-training tasks.\nLimitations The first limitation of our approach is that it cannot ideally handle large tables. As mentioned above, we employ the table flattening technique to represent a table. It works well when the table is relatively small, but it becomes infeasible when the table is too large to fit in memory. In practice, we can compress tables by removing some unrelated rows or columns, which would decrease downstream performance. The second limitation is that the task of text-to-SQL cannot benefit from our proposed table pre-training. We have tried to apply TAPEX for a text-to-SQL task, where the input remains the same and the output converts to SQL. However, TAPEX does not show a significant advantage over BART. We attribute this to two factors: first, our synthetic pre-training corpus does not contribute to grounding, one of the most important factors for semantic parsing (Liu et al., 2021); second, table reasoning capabilities (e.g., aggregate) learned by TAPEX may not be necessary for SQL generation. For example, a model could still understand an NL phrase \"total\" as the aggregation function \"sum\", even though it is unaware of the mathematical meaning of \"sum\".  (Yin et al., 2020; Herzig et al., 2020), leveraged human-annotated parallel NL-table datasets for pre-training (Deng et al., 2021; Yu et al., 2021a), or synthesized a NL-table corpus using human-written templates (Yu et al., 2021a; Eisenschlos et al., 2020). Our work is different from theirs because we are the first to use pure synthetic SQL-table data for table pre-training, which allows us to automatically synthesize a diverse, large-scale, and high-quality pre-training corpus. As for the pre-training task, existing works proposed several pretraining tasks, such as Mask Column Prediction (Yin et al., 2020), Multi-choice Cloze at the Cell Level (Wang et al., 2021b) and Structure Grounding (Deng et al., 2021). Different from all of them, we present a novel SQL execution task to perform table pre-training.\n\n6 RELATED WORK\n\n\nJoint Understanding on Table and Text\nAs our experiments are mainly on TableQA and TableFV, our work is also closely related to previous methods for these tasks. For TableQA, previous works almost formulate it as a weakly semantic parsing task (Liang et al., 2018; Wang et al., 2019a; Guo et al., 2021), which always employ reinforcement learning to optimize semantic parsers over tables. Although these parsers produce logic forms (e.g., SQL), they have difficulties in training due to the large search space and the presence of spurious programs (Goldman et al., 2018). In addition, another promising line of work has emerged in recent advances (Mueller et al., 2019; Herzig et al., 2020), which aims at answering NL sentences without logical forms. This line of work predicts answer(s) by selecting cell values and optionally applying an aggregation operator to them. They can be easily trained, but their modeling ability is limited. For example, it is hard to support compound aggregation operators such as max(Year) -min(Year). What makes our approach different from these works is that we employ generative models to handle TableQA and can enjoy the end-toend training and flexibility simultaneously. For TableFV, previous works usually employ specialized architectures with limited scalability (Shi et al., 2020a; Yang et al., 2020; Shi et al., 2021b). For example, Zhong et al. (2020b) leveraged a graph construction mechanism, a semantic parser, and a semantic composition model to capture the connections among the NL sentence and the table. While the approach works well for TableFV, it is not easily applied to other table-related tasks. Compared with them, our approach works well for a variety of downstream tasks in the same architecture.\n\n7 CONCLUSION\nIn this paper, we present TAPEX, an execution-centric table pre-training approach whose corpus is automatically synthesized via sampling SQL queries and their execution results. TAPEX addresses the data scarcity challenge in table pre-training by learning a neural SQL executor on a diverse, large-scale, and high-quality synthetic corpus. Experimental results on four downstream datasets demonstrate that TAPEX outperforms previous table pre-training approaches by a large margin and achieves new state-of-the-art results on all of them. Our work opens the way to exploit structured data by pre-training on synthetic executable programs, which is conceptually simple and has great potential to be extended to other research areas (e.g., knowledge base).\n\nETHICS STATEMENT\nIn this work, we present a novel pre-training approach for tabular data, which approximates the structural reasoning process of formal languages over tables to achieve efficient table pre-training. Different from previous works which employ web crawling to construct a large-scale NL-table corpus for pre-training, our pre-training corpus is synthesized via sampling SQL queries and their execution results on public tables. Compared with previous works, our pre-training corpus is more controllable with high-quality. For example, compared with TABERT which crawls 26 million noisy tables from the Web, our approach adopts 1, 500 high-quality tables from public datasets, which greatly alleviates the potential privacy and bias issues raised by web crawling. We evaluate our approach on two fundamental table-related tasks: table-based question answering and table-based fact verification. The former enables non-expert users to query databases without learning programming languages, while the latter helps users to verify whether a textual hypothesis is valid based on given tabular evidence. Experimental results on four well-known benchmark datasets show that our approach achieves new state-of-the-art results on all of them, especially in the low data regime. Fine-Grained Analysis To understand the impact from a fine-grained perspective, we divide questions from the WIKITABLEQUESTIONS dev set into the same four levels of difficulty, with the help of SQL query annotation for WIKITABLEQUESTIONS questions provided by SQUALL. All finegrained experimental results are presented in Figure 8. We can see that with the addition of harder SQL queries, the performance on questions at the same difficulty level are greatly improved. For example, the addition of Medium level SQL queries boosts the performance of Medium-level questions from 38.2% (\u2264 Easy) to 56.2% (\u2264 Medium), which is in line with expectations. More encouragingly, adding simpler SQL queries can even improve performance on harder questions. For example, compared to BART, the \u2264 Medium pre-training leads to an impressive improvement of up to 13.1% in the performance of Hard-level questions.\n\nBART\n\n\nC.2 IMPACT OF NATURAL LANGUAGE IN PRE-TRAINING\nNatural Language Generation Intuitively, compared to SQL queries, using NL sentences in pretraining is better for downstream tasks since the pre-training objective is nearly the same as the fine-tuning objective. However, it is non-trivial to obtain a fluent NL sentence which faithfully reflects the semantics of a SQL query. In this experiment, we follow Zhong et al. (2020a) to train a SQL-to-NL model and employ the model to translate SQL queries from the pre-training corpus into NL sentences. Concretely, our SQL-to-NL model is based on BART-Large (Lewis et al., 2020) and trained on the SQUALL dataset (Shi et al., 2020b), which contains nearly 9, 000 SQL-NL pairs. Then we apply the well-trained SQL-to-NL model to the pre-training corpus of TAPEX (0.5 Million) and obtain a NL pre-training corpus of the same size. By manually analyzing 100 sampled translated NL sentences, we are surprised to find that all NL sentences are fluent, and nearly 68% of them\n\nFootnotes:\n1: The full analysis about SQL execution can be found in Appendix D.\n2: https://github.com/forward/sql-parser\n\nReferences:\n\n- Rishabh Agarwal, Chen Liang, Dale Schuurmans, and Mohammad Norouzi. Learning to generalize from sparse and underspecified rewards. In ICML, 2019.- Hangbo Bao, Li Dong, Furu Wei, Wenhui Wang, Nan Yang, Xiaodong Liu, Yu Wang, Songhao Piao, Jianfeng Gao, M. Zhou, and H. Hon. Unilmv2: Pseudo-masked language models for unified language model pre-training. In ICML, 2020.\n\n- Tom Brown, Benjamin Mann, Nick Ryder, Melanie Subbiah, Jared D Kaplan, Prafulla Dhari- wal, Arvind Neelakantan, Pranav Shyam, Girish Sastry, Amanda Askell, Sandhini Agar- wal, Ariel Herbert-Voss, Gretchen Krueger, Tom Henighan, Rewon Child, Aditya Ramesh, Daniel Ziegler, Jeffrey Wu, Clemens Winter, Chris Hesse, Mark Chen, Eric Sigler, Ma- teusz Litwin, Scott Gray, Benjamin Chess, Jack Clark, Christopher Berner, Sam McCan- dlish, Alec Radford, Ilya Sutskever, and Dario Amodei. Language models are few-shot learners. In H. Larochelle, M. Ranzato, R. Hadsell, M. F. Balcan, and H. Lin (eds.), Ad- vances in Neural Information Processing Systems, volume 33, pp. 1877-1901. Curran Asso- ciates, Inc., 2020. URL https://proceedings.neurips.cc/paper/2020/file/ 1457c0d6bfcb4967418bfb8ac142f64a-Paper.pdf.\n\n- Wenhu Chen, Hongmin Wang, Jianshu Chen, Yunkai Zhang, Hong Wang, Shiyang Li, Xiyou Zhou, and William Yang Wang. Tabfact: A large-scale dataset for table-based fact verification. In International Conference on Learning Representations, 2020. URL https://openreview. net/forum?id=rkeJRhNYDH.\n\n- Pradeep Dasigi, Matt Gardner, Shikhar Murty, Luke Zettlemoyer, and Eduard Hovy. Iterative search for weakly supervised semantic parsing. In Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics: Human Lan- guage Technologies, Volume 1 (Long and Short Papers), pp. 2669-2680, Minneapolis, Min- nesota, June 2019. Association for Computational Linguistics. doi: 10.18653/v1/N19-1273. URL https://aclanthology.org/N19-1273.\n\n- Xiang Deng, Huan Sun, Alyssa Lees, You Wu, and Cong Yu. TURL: table understanding through representation learning. Proc. VLDB Endow., 14(3):307-319, 2020. doi: 10.5555/3430915. 3442430. URL http://www.vldb.org/pvldb/vol14/p307-deng.pdf.\n\n- Xiang Deng, Ahmed Hassan Awadallah, Christopher Meek, Oleksandr Polozov, Huan Sun, and Matthew Richardson. Structure-grounded pretraining for text-to-SQL. In Proceedings of the 2021 Conference of the North American Chapter of the Association for Computational Linguis- tics: Human Language Technologies, pp. 1337-1350, Online, June 2021. Association for Compu- tational Linguistics. doi: 10.18653/v1/2021.naacl-main.105. URL https://www.aclweb. org/anthology/2021.naacl-main.105.\n\n- Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. BERT: Pre-training of deep bidirectional transformers for language understanding. In Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, Volume 1 (Long and Short Papers), pp. 4171-4186, Minneapolis, Minnesota, June 2019. Association for Computational Linguistics. doi: 10.18653/v1/N19-1423. URL https: //www.aclweb.org/anthology/N19-1423.\n\n- Julian Eisenschlos, Syrine Krichene, and Thomas M\u00fcller. Understanding tables with interme- diate pre-training. In Findings of the Association for Computational Linguistics: EMNLP 2020, pp. 281-296, Online, November 2020. Association for Computational Linguistics. doi: 10.18653/v1/2020.findings-emnlp.27. URL https://www.aclweb.org/anthology/ 2020.findings-emnlp.27.\n\n- Omer Goldman, Veronica Latcinnik, Ehud Nave, Amir Globerson, and Jonathan Berant. Weakly supervised semantic parsing with abstract examples. In Proceedings of the 56th Annual Meet- ing of the Association for Computational Linguistics (Volume 1: Long Papers), pp. 1809-1819, Melbourne, Australia, July 2018. Association for Computational Linguistics. doi: 10.18653/v1/ P18-1168. URL https://www.aclweb.org/anthology/P18-1168.\n\n- Jiaqi Guo, Jian-Guang Lou, Ting Liu, and Dongmei Zhang. Weakly supervised semantic parsing by learning from mistakes. In Findings of the Association for Computational Linguistics: EMNLP 2021, pp. 2603-2617, Punta Cana, Dominican Republic, November 2021. Association for Com- putational Linguistics. URL https://aclanthology.org/2021.findings-emnlp.\n\n- Tonglei Guo and Huilin Gao. Using database rule for weak supervised text-to-sql generation. ArXiv, abs/1907.00620, 2019.\n\n- Jonathan Herzig, Pawel Krzysztof Nowak, Thomas M\u00fcller, Francesco Piccinno, and Julian Eisen- schlos. TaPas: Weakly supervised table parsing via pre-training. In Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics, pp. 4320-4333, Online, July 2020. Association for Computational Linguistics. doi: 10.18653/v1/2020.acl-main.398. URL https://www.aclweb.org/anthology/2020.acl-main.398.\n\n- Mohit Iyyer, Wen-tau Yih, and Ming-Wei Chang. Search-based neural structured learning for se- quential question answering. In Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), pp. 1821-1831, Vancouver, Canada, July 2017. Association for Computational Linguistics. doi: 10.18653/v1/P17-1167. URL https://aclanthology.org/P17-1167.\n\n- Mike Lewis, Yinhan Liu, Naman Goyal, Marjan Ghazvininejad, Abdelrahman Mohamed, Omer Levy, Veselin Stoyanov, and Luke Zettlemoyer. BART: Denoising sequence-to-sequence pre- training for natural language generation, translation, and comprehension. In Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics, pp. 7871-7880, On- line, July 2020. Association for Computational Linguistics. doi: 10.18653/v1/2020.acl-main.703. URL https://www.aclweb.org/anthology/2020.acl-main.703.\n\n- Chen Liang, Mohammad Norouzi, Jonathan Berant, Quoc V Le, and Ni Lao. Memory augmented policy optimization for program synthesis and semantic parsing. In Proceedings of NIPS, 2018.\n\n- Qian Liu, Bei Chen, Haoyan Liu, Jian-Guang Lou, Lei Fang, Bin Zhou, and Dongmei Zhang. A split-and-recombine approach for follow-up query analysis. In Proceedings of the 2019 Con- ference on Empirical Methods in Natural Language Processing and the 9th International Joint Conference on Natural Language Processing (EMNLP-IJCNLP), pp. 5316-5326, Hong Kong, China, November 2019. Association for Computational Linguistics. doi: 10.18653/v1/D19-1535. URL https://www.aclweb.org/anthology/D19-1535.\n\n- Qian Liu, Bei Chen, Jiaqi Guo, Jian-Guang Lou, Bin Zhou, and Dongmei Zhang. How far are we from effective context modeling? an exploratory study on semantic parsing in context twitter. In IJCAI, 2020.\n\n- Qian Liu, Dejian Yang, Jiahui Zhang, Jiaqi Guo, Bin Zhou, and Jian-Guang Lou. Awakening la- tent grounding from pretrained language models for semantic parsing. In Findings of the As- sociation for Computational Linguistics: ACL-IJCNLP 2021, pp. 1174-1189, Online, August 2021. Association for Computational Linguistics. doi: 10.18653/v1/2021.findings-acl.100. URL https://aclanthology.org/2021.findings-acl.100.\n\n- Sewon Min, Danqi Chen, Hannaneh Hajishirzi, and Luke Zettlemoyer. A discrete hard EM approach for weakly supervised question answering. In Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th International Joint Conference on Natural Language Processing (EMNLP-IJCNLP), pp. 2851-2864, Hong Kong, China, November 2019. Association for Computational Linguistics. doi: 10.18653/v1/D19-1284. URL https://www. aclweb.org/anthology/D19-1284.\n\n- Thomas Mueller, Francesco Piccinno, Peter Shaw, Massimo Nicosia, and Yasemin Altun. An- swering conversational questions on structured data without logical forms. In Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th In- ternational Joint Conference on Natural Language Processing (EMNLP-IJCNLP), pp. 5902- 5910, Hong Kong, China, November 2019. Association for Computational Linguistics. doi: 10.18653/v1/D19-1603. URL https://www.aclweb.org/anthology/D19-1603.\n\n- Arvind Neelakantan, Quoc V. Le, and Ilya Sutskever. Neural programmer: Inducing latent programs with gradient descent. In Yoshua Bengio and Yann LeCun (eds.), 4th International Conference on Learning Representations, ICLR 2016, San Juan, Puerto Rico, May 2-4, 2016, Conference Track Proceedings, 2016. URL http://arxiv.org/abs/1511.04834.\n\n- Arvind Neelakantan, Quoc V. Le, Mart\u00edn Abadi, Andrew McCallum, and Dario Amodei. Learning a natural language interface with neural programmer. In 5th International Conference on Learning Representations, ICLR 2017, Toulon, France, April 24-26, 2017, Conference Track Proceedings. OpenReview.net, 2017. URL https://openreview.net/forum?id=ry2YOrcge.\n\n- Barlas Oguz, Xilun Chen, Vladimir Karpukhin, Stan Peshterliev, Dmytro Okhonko, Michael Schlichtkrull, Sonal Gupta, Yashar Mehdad, and Scott Yih. Unik-qa: Unified representations of structured and unstructured knowledge for open-domain question answering. arXiv preprint arXiv:2012.14610, 2020.\n\n- Myle Ott, Sergey Edunov, Alexei Baevski, Angela Fan, Sam Gross, Nathan Ng, David Grangier, and Michael Auli. fairseq: A fast, extensible toolkit for sequence modeling. In Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics (Demonstrations), pp. 48-53, Minneapolis, Minnesota, June 2019. Association for Computational Linguistics. doi: 10.18653/v1/N19-4009. URL https://aclanthology. org/N19-4009.\n\n- Panupong Pasupat and Percy Liang. Compositional semantic parsing on semi-structured tables. In Proceedings of the 53rd Annual Meeting of the Association for Computational Linguistics and the 7th International Joint Conference on Natural Language Processing (Volume 1: Long Papers), pp. 1470-1480, Beijing, China, July 2015. Association for Computational Linguistics. doi: 10.3115/v1/P15-1142. URL https://aclanthology.org/P15-1142.\n\n- Colin Raffel, Noam Shazeer, Adam Roberts, Katherine Lee, Sharan Narang, Michael Matena, Yanqi Zhou, Wei Li, and Peter J Liu. Exploring the limits of transfer learning with a unified text-to-text transformer. Journal of Machine Learning Research, 21:1-67, 2020.\n\n- Peng Shi, Patrick Ng, Zhiguo Wang, Henghui Zhu, Alexander Hanbo Li, Jun Wang, C\u00edcero Nogueira dos Santos, and Bing Xiang. Learning contextual representations for semantic parsing with generation-augmented pre-training. In Thirty-Fifth AAAI Conference on Artificial Intelligence, AAAI 2021, Thirty-Third Conference on Innovative Applications of Artificial Intelligence, IAAI 2021, The Eleventh Symposium on Educational Advances in Artificial Intelligence, EAAI 2021, Virtual Event, February 2-9, 2021, pp. 13806-13814. AAAI Press, 2021a. URL https: //ojs.aaai.org/index.php/AAAI/article/view/17627.\n\n- Qi Shi, Yu Zhang, Qingyu Yin, and Ting Liu. Learn to combine linguistic and symbolic infor- mation for table-based fact verification. In Proceedings of the 28th International Conference on Computational Linguistics, pp. 5335-5346, Barcelona, Spain (Online), December 2020a. In- ternational Committee on Computational Linguistics. URL https://www.aclweb.org/ anthology/2020.coling-main.466.\n\n- Qi Shi, Yu Zhang, Qingyu Yin, and Ting Liu. Logic-level evidence retrieval and graph-based verification network for table-based fact verification. In Proceedings of the 2021 Confer- ence on Empirical Methods in Natural Language Processing, pp. 175-184, Online and Punta Cana, Dominican Republic, November 2021b. Association for Computational Linguistics. URL https://aclanthology.org/2021.emnlp-main.16.\n\n- Tianze Shi, Chen Zhao, Jordan Boyd-Graber, Hal Daum\u00e9 III, and Lillian Lee. On the potential of lexico-logical alignments for semantic parsing to SQL queries. In Findings of the Association for Computational Linguistics: EMNLP 2020, pp. 1849-1864, Online, November 2020b. Association for Computational Linguistics. doi: 10.18653/v1/2020.findings-emnlp.167. URL https:// www.aclweb.org/anthology/2020.findings-emnlp.167.\n\n- Yibo Sun, Duyu Tang, Nan Duan, Jingjing Xu, X. Feng, and Bing Qin. Knowledge-aware conver- sational semantic parsing over web tables. In NLPCC, 2019.\n\n- Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N. Gomez, Lukasz Kaiser, and Illia Polosukhin. Attention is all you need. In Isabelle Guyon, Ulrike von Luxburg, Samy Bengio, Hanna M. Wallach, Rob Fergus, S. V. N. Vishwanathan, and Roman Garnett (eds.), Advances in Neural Information Processing Systems 30: Annual Conference on Neural Information Processing Systems 2017, December 4-9, 2017, Long Beach, CA, USA, pp. 5998-6008, 2017. URL https://proceedings.neurips.cc/paper/2017/hash/ 3f5ee243547dee91fbd053c1c4a845aa-Abstract.html.\n\n- Bailin Wang, Ivan Titov, and Mirella Lapata. Learning semantic parsers from denotations with latent structured alignments and abstract programs. In Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th International Joint Confer- ence on Natural Language Processing (EMNLP-IJCNLP), pp. 3774-3785, Hong Kong, China, November 2019a. Association for Computational Linguistics. doi: 10.18653/v1/D19-1391. URL https://aclanthology.org/D19-1391.\n\n- Bailin Wang, Wenpeng Yin, Xi Victoria Lin, and Caiming Xiong. Learning to synthesize data for semantic parsing. In Proceedings of the 2021 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, pp. 2760- 2766, Online, June 2021a. Association for Computational Linguistics. doi: 10.18653/v1/2021. naacl-main.220. URL https://aclanthology.org/2021.naacl-main.220.\n\n- Chenglong Wang, Kedar Tatwawadi, Marc Brockschmidt, Po-Sen Huang, Yi Xin Mao, Oleksandr Polozov, and Rishabh Singh. Robust text-to-sql generation with execution-guided decoding. ArXiv, abs/1807.03100, 2018.\n\n- Qiang Wang, Bei Li, Tong Xiao, Jingbo Zhu, Changliang Li, Derek F. Wong, and Lidia S. Chao. Learning deep transformer models for machine translation. In Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics, pp. 1810-1822, Florence, Italy, July 2019b. Association for Computational Linguistics. doi: 10.18653/v1/P19-1176. URL https: //www.aclweb.org/anthology/P19-1176.\n\n- Zhiruo Wang, Haoyu Dong, Ran Jia, Jia Li, Zhiyi Fu, Shi Han, and Dongmei Zhang. TUTA: tree-based transformers for generally structured table pre-training. In Feida Zhu, Beng Chin Ooi, and Chunyan Miao (eds.), KDD '21: The 27th ACM SIGKDD Conference on Knowledge Discovery and Data Mining, Virtual Event, Singapore, August 14-18, 2021, pp. 1780-1790. ACM, 2021b. doi: 10.1145/3447548.3467434. URL https://doi.org/10.1145/3447548. 3467434.\n\n- Xiaoyu Yang, Feng Nie, Yufei Feng, Quan Liu, Zhigang Chen, and Xiaodan Zhu. Program en- hanced fact verification with verbalization and graph attention network. In Proceedings of the 2020 Conference on Empirical Methods in Natural Language Processing (EMNLP), pp. 7810-7825, Online, November 2020. Association for Computational Linguistics. doi: 10. 18653/v1/2020.emnlp-main.628. URL https://www.aclweb.org/anthology/2020. emnlp-main.628.\n\n- Pengcheng Yin, Graham Neubig, Wen-tau Yih, and Sebastian Riedel. TaBERT: Pretraining for joint understanding of textual and tabular data. In Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics, pp. 8413-8426, Online, July 2020. Association for Computational Linguistics. doi: 10.18653/v1/2020.acl-main.745. URL https://www. aclweb.org/anthology/2020.acl-main.745.\n\n- Tao Yu, Rui Zhang, Kai Yang, Michihiro Yasunaga, Dongxu Wang, Zifan Li, James Ma, Irene Li, Qingning Yao, Shanelle Roman, Zilin Zhang, and Dragomir Radev. Spider: A large-scale human-labeled dataset for complex and cross-domain semantic parsing and text-to-SQL task. In Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing, pp. 3911-3921, Brussels, Belgium, October-November 2018. Association for Computational Lin- guistics. doi: 10.18653/v1/D18-1425. URL https://www.aclweb.org/anthology/ D18-1425.\n\n- Tao Yu, Chien-Sheng Wu, Xi Victoria Lin, bailin wang, Yi Chern Tan, Xinyi Yang, Dragomir Radev, richard socher, and Caiming Xiong. Grappa: Grammar-augmented pre-training for table semantic parsing. In International Conference on Learning Representations, 2021a. URL https:// openreview.net/forum?id=kyaIeYj4zZ.\n\n- Tao Yu, Rui Zhang, Alex Polozov, Christopher Meek, and Ahmed Hassan Awadallah. Score: Pre- training for context representation in conversational semantic parsing. In International Confer- ence on Learning Representations, 2021b. URL https://openreview.net/forum?id= oyZxhRI2RiE.\n\n- Hongzhi Zhang, Yingyao Wang, Sirui Wang, Xuezhi Cao, Fuzheng Zhang, and Zhongyuan Wang. Table fact verification with structure-aware transformer. In Proceedings of the 2020 Conference on Empirical Methods in Natural Language Processing (EMNLP), pp. 1624-1629, Online, Novem- ber 2020. Association for Computational Linguistics. doi: 10.18653/v1/2020.emnlp-main.126. URL https://www.aclweb.org/anthology/2020.emnlp-main.126.\n\n- Yuchen Zhang, Panupong Pasupat, and Percy Liang. Macro grammars and holistic triggering for efficient semantic parsing. In Proceedings of the 2017 Conference on Empirical Methods in Nat- ural Language Processing, pp. 1214-1223, Copenhagen, Denmark, September 2017. Association for Computational Linguistics. doi: 10.18653/v1/D17-1125. URL https://www.aclweb. org/anthology/D17-1125.\n\n- Victor Zhong, Caiming Xiong, and Richard Socher. Seq2sql: Generating structured queries from natural language using reinforcement learning. CoRR, abs/1709.00103, 2017.\n\n- Victor Zhong, Mike Lewis, Sida I. Wang, and Luke Zettlemoyer. Grounded adaptation for zero-shot executable semantic parsing. In Proceedings of the 2020 Conference on Empirical Methods in Natural Language Processing (EMNLP), pp. 6869-6882, Online, November 2020a. Association for Computational Linguistics. doi: 10.18653/v1/2020.emnlp-main.558. URL https://www. aclweb.org/anthology/2020.emnlp-main.558.\n\n- Wanjun Zhong, Duyu Tang, Zhangyin Feng, Nan Duan, Ming Zhou, Ming Gong, Linjun Shou, Daxin Jiang, Jiahai Wang, and Jian Yin. LogicalFactChecker: Leveraging logical operations for fact checking with graph module network. In Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics, pp. 6053-6065, Online, July 2020b. Association for Computational Linguistics. doi: 10.18653/v1/2020.acl-main.539. URL https://www. aclweb.org/anthology/2020.acl-main.539.\n\n", "annotations": {"Abstract": [{"begin": 62, "end": 1459, "idx": 0}], "Head": [{"begin": 1462, "end": 1476, "n": "1", "idx": 0}, {"begin": 7000, "end": 7033, "n": "2", "idx": 1}, {"begin": 7473, "end": 7484, "idx": 2}, {"begin": 7861, "end": 7892, "n": "2.1", "idx": 3}, {"begin": 9088, "end": 9114, "n": "2.2", "idx": 4}, {"begin": 11815, "end": 11827, "idx": 5}, {"begin": 13226, "end": 13260, "n": "3", "idx": 6}, {"begin": 13526, "end": 13547, "n": "3.1", "idx": 7}, {"begin": 15741, "end": 15764, "n": "3.2", "idx": 8}, {"begin": 16803, "end": 16816, "n": "4", "idx": 9}, {"begin": 16912, "end": 16934, "idx": 10}, {"begin": 18688, "end": 18704, "n": "4.1", "idx": 11}, {"begin": 21319, "end": 21334, "idx": 12}, {"begin": 21488, "end": 21510, "n": "4.2", "idx": 13}, {"begin": 22108, "end": 22118, "n": "5", "idx": 14}, {"begin": 22320, "end": 22349, "idx": 15}, {"begin": 23054, "end": 23089, "idx": 16}, {"begin": 23617, "end": 23622, "idx": 17}, {"begin": 27748, "end": 27762, "n": "6", "idx": 18}, {"begin": 27765, "end": 27802, "idx": 19}, {"begin": 29521, "end": 29533, "n": "7", "idx": 20}, {"begin": 30290, "end": 30306, "idx": 21}, {"begin": 32472, "end": 32476, "idx": 22}, {"begin": 32479, "end": 32525, "idx": 23}], "ReferenceToBib": [{"begin": 1524, "end": 1545, "target": "#b7", "idx": 0}, {"begin": 1555, "end": 1575, "target": "#b14", "idx": 1}, {"begin": 1904, "end": 1925, "target": "#b12", "idx": 2}, {"begin": 1926, "end": 1943, "target": "#b39", "idx": 3}, {"begin": 1944, "end": 1961, "target": "#b41", "idx": 4}, {"begin": 1962, "end": 1981, "idx": 5}, {"begin": 1982, "end": 2000, "target": "#b5", "idx": 6}, {"begin": 2001, "end": 2006, "idx": 7}, {"begin": 2007, "end": 2025, "target": "#b27", "idx": 8}, {"begin": 2794, "end": 2815, "target": "#b12", "idx": 9}, {"begin": 2816, "end": 2833, "target": "#b39", "idx": 10}, {"begin": 2834, "end": 2852, "target": "#b6", "idx": 11}, {"begin": 2902, "end": 2920, "target": "#b41", "idx": 12}, {"begin": 2921, "end": 2939, "target": "#b27", "idx": 13}, {"begin": 2964, "end": 2981, "target": "#b39", "idx": 14}, {"begin": 3380, "end": 3401, "target": "#b7", "idx": 15}, {"begin": 3713, "end": 3720, "idx": 16}, {"begin": 3755, "end": 3776, "target": "#b12", "idx": 17}, {"begin": 3822, "end": 3840, "target": "#b39", "idx": 18}, {"begin": 5905, "end": 5925, "target": "#b14", "idx": 19}, {"begin": 8921, "end": 8940, "target": "#b23", "idx": 20}, {"begin": 9586, "end": 9606, "target": "#b2", "idx": 21}, {"begin": 9617, "end": 9635, "target": "#b1", "idx": 22}, {"begin": 9697, "end": 9717, "target": "#b14", "idx": 23}, {"begin": 9838, "end": 9860, "target": "#b32", "idx": 24}, {"begin": 10773, "end": 10779, "idx": 25}, {"begin": 10784, "end": 10789, "idx": 26}, {"begin": 10892, "end": 10897, "idx": 27}, {"begin": 11542, "end": 11562, "target": "#b14", "idx": 28}, {"begin": 12447, "end": 12468, "target": "#b12", "idx": 29}, {"begin": 12476, "end": 12497, "target": "#b26", "idx": 30}, {"begin": 15152, "end": 15170, "target": "#b39", "idx": 31}, {"begin": 15484, "end": 15507, "target": "#b25", "idx": 32}, {"begin": 15955, "end": 15975, "target": "#b34", "idx": 33}, {"begin": 16028, "end": 16049, "target": "#b46", "idx": 34}, {"begin": 16165, "end": 16183, "target": "#b30", "idx": 35}, {"begin": 17023, "end": 17043, "target": "#b45", "idx": 36}, {"begin": 17064, "end": 17087, "target": "#b25", "idx": 37}, {"begin": 17093, "end": 17113, "target": "#b13", "idx": 38}, {"begin": 17127, "end": 17146, "target": "#b3", "idx": 39}, {"begin": 17726, "end": 17747, "target": "#b12", "idx": 40}, {"begin": 18014, "end": 18032, "target": "#b24", "idx": 41}, {"begin": 24463, "end": 24483, "target": "#b2", "idx": 42}, {"begin": 25323, "end": 25344, "target": "#b12", "idx": 43}, {"begin": 25353, "end": 25371, "target": "#b39", "idx": 44}, {"begin": 25383, "end": 25401, "target": "#b41", "idx": 45}, {"begin": 26632, "end": 26650, "target": "#b18", "idx": 46}, {"begin": 26930, "end": 26948, "target": "#b39", "idx": 47}, {"begin": 26949, "end": 26969, "target": "#b12", "idx": 48}, {"begin": 27041, "end": 27060, "target": "#b6", "idx": 49}, {"begin": 27061, "end": 27078, "target": "#b41", "idx": 50}, {"begin": 27143, "end": 27161, "target": "#b41", "idx": 51}, {"begin": 27162, "end": 27187, "target": "#b8", "idx": 52}, {"begin": 27527, "end": 27545, "target": "#b39", "idx": 53}, {"begin": 27584, "end": 27604, "idx": 54}, {"begin": 27629, "end": 27648, "target": "#b6", "idx": 55}, {"begin": 28009, "end": 28029, "target": "#b15", "idx": 56}, {"begin": 28030, "end": 28049, "target": "#b33", "idx": 57}, {"begin": 28050, "end": 28067, "target": "#b10", "idx": 58}, {"begin": 28313, "end": 28335, "target": "#b9", "idx": 59}, {"begin": 28412, "end": 28434, "target": "#b20", "idx": 60}, {"begin": 28435, "end": 28455, "target": "#b12", "idx": 61}, {"begin": 29067, "end": 29086, "target": "#b28", "idx": 62}, {"begin": 29087, "end": 29105, "target": "#b38", "idx": 63}, {"begin": 29106, "end": 29124, "target": "#b29", "idx": 64}, {"begin": 29139, "end": 29159, "target": "#b47", "idx": 65}, {"begin": 32883, "end": 32903, "target": "#b46", "idx": 66}, {"begin": 33080, "end": 33100, "target": "#b14", "idx": 67}, {"begin": 33135, "end": 33154, "target": "#b30", "idx": 68}], "ReferenceToFootnote": [{"begin": 22628, "end": 22629, "target": "#foot_0", "idx": 0}], "SectionFootnote": [{"begin": 33492, "end": 33612, "idx": 0}], "ReferenceString": [{"begin": 33629, "end": 33774, "id": "b0", "idx": 0}, {"begin": 33776, "end": 33996, "id": "b1", "idx": 1}, {"begin": 34000, "end": 34802, "id": "b2", "idx": 2}, {"begin": 34806, "end": 35095, "id": "b3", "idx": 3}, {"begin": 35099, "end": 35579, "id": "b4", "idx": 4}, {"begin": 35583, "end": 35819, "id": "b5", "idx": 5}, {"begin": 35823, "end": 36302, "id": "b6", "idx": 6}, {"begin": 36306, "end": 36802, "id": "b7", "idx": 7}, {"begin": 36806, "end": 37172, "id": "b8", "idx": 8}, {"begin": 37176, "end": 37600, "id": "b9", "idx": 9}, {"begin": 37604, "end": 37952, "id": "b10", "idx": 10}, {"begin": 37956, "end": 38076, "id": "b11", "idx": 11}, {"begin": 38080, "end": 38498, "id": "b12", "idx": 12}, {"begin": 38502, "end": 38894, "id": "b13", "idx": 13}, {"begin": 38898, "end": 39407, "id": "b14", "idx": 14}, {"begin": 39411, "end": 39591, "id": "b15", "idx": 15}, {"begin": 39595, "end": 40089, "id": "b16", "idx": 16}, {"begin": 40093, "end": 40293, "id": "b17", "idx": 17}, {"begin": 40297, "end": 40709, "id": "b18", "idx": 18}, {"begin": 40713, "end": 41194, "id": "b19", "idx": 19}, {"begin": 41198, "end": 41708, "id": "b20", "idx": 20}, {"begin": 41712, "end": 42050, "id": "b21", "idx": 21}, {"begin": 42054, "end": 42402, "id": "b22", "idx": 22}, {"begin": 42406, "end": 42699, "id": "b23", "idx": 23}, {"begin": 42703, "end": 43161, "id": "b24", "idx": 24}, {"begin": 43165, "end": 43596, "id": "b25", "idx": 25}, {"begin": 43600, "end": 43860, "id": "b26", "idx": 26}, {"begin": 43864, "end": 44461, "id": "b27", "idx": 27}, {"begin": 44465, "end": 44854, "id": "b28", "idx": 28}, {"begin": 44858, "end": 45261, "id": "b29", "idx": 29}, {"begin": 45265, "end": 45683, "id": "b30", "idx": 30}, {"begin": 45687, "end": 45836, "id": "b31", "idx": 31}, {"begin": 45840, "end": 46404, "id": "b32", "idx": 32}, {"begin": 46408, "end": 46892, "id": "b33", "idx": 33}, {"begin": 46896, "end": 47322, "id": "b34", "idx": 34}, {"begin": 47326, "end": 47532, "id": "b35", "idx": 35}, {"begin": 47536, "end": 47939, "id": "b36", "idx": 36}, {"begin": 47943, "end": 48380, "id": "b37", "idx": 37}, {"begin": 48384, "end": 48822, "id": "b38", "idx": 38}, {"begin": 48826, "end": 49225, "id": "b39", "idx": 39}, {"begin": 49229, "end": 49763, "id": "b40", "idx": 40}, {"begin": 49767, "end": 50077, "id": "b41", "idx": 41}, {"begin": 50081, "end": 50359, "id": "b42", "idx": 42}, {"begin": 50363, "end": 50786, "id": "b43", "idx": 43}, {"begin": 50790, "end": 51172, "id": "b44", "idx": 44}, {"begin": 51176, "end": 51343, "id": "b45", "idx": 45}, {"begin": 51347, "end": 51749, "id": "b46", "idx": 46}, {"begin": 51753, "end": 52235, "id": "b47", "idx": 47}], "ReferenceToTable": [{"begin": 18711, "end": 18712, "target": "#tab_1", "idx": 0}, {"begin": 18720, "end": 18721, "target": "#tab_2", "idx": 1}, {"begin": 18729, "end": 18730, "target": "#tab_4", "idx": 2}, {"begin": 18741, "end": 18742, "target": "#tab_5", "idx": 3}, {"begin": 19009, "end": 19010, "target": "#tab_1", "idx": 4}, {"begin": 19617, "end": 19618, "target": "#tab_2", "idx": 5}, {"begin": 20366, "end": 20367, "target": "#tab_4", "idx": 6}, {"begin": 20934, "end": 20935, "target": "#tab_5", "idx": 7}, {"begin": 23689, "end": 23690, "idx": 8}, {"begin": 23965, "end": 23966, "idx": 9}], "Footnote": [{"begin": 33503, "end": 33571, "id": "foot_0", "n": "1", "idx": 0}, {"begin": 33572, "end": 33612, "id": "foot_1", "n": "2", "idx": 1}], "ReferenceToFormula": [{"begin": 15016, "end": 15020, "idx": 0}], "Paragraph": [{"begin": 72, "end": 1459, "idx": 0}, {"begin": 1477, "end": 2241, "idx": 1}, {"begin": 2242, "end": 4190, "idx": 2}, {"begin": 4191, "end": 5273, "idx": 3}, {"begin": 5274, "end": 5667, "idx": 4}, {"begin": 5668, "end": 6998, "idx": 5}, {"begin": 7034, "end": 7471, "idx": 6}, {"begin": 7485, "end": 7859, "idx": 7}, {"begin": 7893, "end": 8169, "idx": 8}, {"begin": 8245, "end": 9086, "idx": 9}, {"begin": 9115, "end": 9478, "idx": 10}, {"begin": 9479, "end": 10243, "idx": 11}, {"begin": 10244, "end": 10690, "idx": 12}, {"begin": 10768, "end": 11125, "idx": 13}, {"begin": 11126, "end": 11813, "idx": 14}, {"begin": 11828, "end": 12079, "idx": 15}, {"begin": 12080, "end": 12649, "idx": 16}, {"begin": 12650, "end": 13224, "idx": 17}, {"begin": 13261, "end": 13524, "idx": 18}, {"begin": 13548, "end": 13976, "idx": 19}, {"begin": 13977, "end": 15739, "idx": 20}, {"begin": 15765, "end": 16801, "idx": 21}, {"begin": 16817, "end": 16910, "idx": 22}, {"begin": 16935, "end": 17947, "idx": 23}, {"begin": 17948, "end": 18686, "idx": 24}, {"begin": 18705, "end": 18977, "idx": 25}, {"begin": 18978, "end": 19066, "idx": 26}, {"begin": 19067, "end": 19429, "idx": 27}, {"begin": 19430, "end": 20183, "idx": 28}, {"begin": 20184, "end": 20355, "idx": 29}, {"begin": 20356, "end": 20861, "idx": 30}, {"begin": 20862, "end": 21317, "idx": 31}, {"begin": 21335, "end": 21486, "idx": 32}, {"begin": 21511, "end": 21844, "idx": 33}, {"begin": 21845, "end": 22106, "idx": 34}, {"begin": 22119, "end": 22318, "idx": 35}, {"begin": 22350, "end": 23052, "idx": 36}, {"begin": 23090, "end": 23615, "idx": 37}, {"begin": 23623, "end": 23682, "idx": 38}, {"begin": 23683, "end": 24138, "idx": 39}, {"begin": 24139, "end": 25752, "idx": 40}, {"begin": 25753, "end": 27746, "idx": 41}, {"begin": 27803, "end": 29519, "idx": 42}, {"begin": 29534, "end": 30288, "idx": 43}, {"begin": 30307, "end": 32470, "idx": 44}, {"begin": 32526, "end": 33490, "idx": 45}], "SectionHeader": [{"begin": 0, "end": 1459, "idx": 0}], "SectionReference": [{"begin": 33614, "end": 52237, "idx": 0}], "Sentence": [{"begin": 72, "end": 201, "idx": 0}, {"begin": 202, "end": 344, "idx": 1}, {"begin": 345, "end": 582, "idx": 2}, {"begin": 583, "end": 743, "idx": 3}, {"begin": 744, "end": 789, "idx": 4}, {"begin": 790, "end": 960, "idx": 5}, {"begin": 961, "end": 1208, "idx": 6}, {"begin": 1209, "end": 1386, "idx": 7}, {"begin": 1387, "end": 1459, "idx": 8}, {"begin": 1477, "end": 1647, "idx": 9}, {"begin": 1648, "end": 1795, "idx": 10}, {"begin": 1796, "end": 2026, "idx": 11}, {"begin": 2027, "end": 2241, "idx": 12}, {"begin": 2242, "end": 2484, "idx": 13}, {"begin": 2485, "end": 2718, "idx": 14}, {"begin": 2719, "end": 2940, "idx": 15}, {"begin": 2941, "end": 3079, "idx": 16}, {"begin": 3080, "end": 3265, "idx": 17}, {"begin": 3266, "end": 3626, "idx": 18}, {"begin": 3627, "end": 3721, "idx": 19}, {"begin": 3722, "end": 3735, "idx": 20}, {"begin": 3736, "end": 3958, "idx": 21}, {"begin": 3959, "end": 4134, "idx": 22}, {"begin": 4135, "end": 4190, "idx": 23}, {"begin": 4191, "end": 4311, "idx": 24}, {"begin": 4312, "end": 4471, "idx": 25}, {"begin": 4472, "end": 4675, "idx": 26}, {"begin": 4676, "end": 4836, "idx": 27}, {"begin": 4837, "end": 4965, "idx": 28}, {"begin": 4966, "end": 5117, "idx": 29}, {"begin": 5118, "end": 5273, "idx": 30}, {"begin": 5274, "end": 5448, "idx": 31}, {"begin": 5449, "end": 5561, "idx": 32}, {"begin": 5562, "end": 5667, "idx": 33}, {"begin": 5668, "end": 5719, "idx": 34}, {"begin": 5720, "end": 5828, "idx": 35}, {"begin": 5829, "end": 5942, "idx": 36}, {"begin": 5943, "end": 6117, "idx": 37}, {"begin": 6118, "end": 6274, "idx": 38}, {"begin": 6275, "end": 6334, "idx": 39}, {"begin": 6335, "end": 6455, "idx": 40}, {"begin": 6456, "end": 6560, "idx": 41}, {"begin": 6561, "end": 6675, "idx": 42}, {"begin": 6676, "end": 6909, "idx": 43}, {"begin": 6910, "end": 6998, "idx": 44}, {"begin": 7034, "end": 7220, "idx": 45}, {"begin": 7221, "end": 7405, "idx": 46}, {"begin": 7406, "end": 7471, "idx": 47}, {"begin": 7485, "end": 7551, "idx": 48}, {"begin": 7552, "end": 7653, "idx": 49}, {"begin": 7654, "end": 7859, "idx": 50}, {"begin": 7893, "end": 8001, "idx": 51}, {"begin": 8002, "end": 8128, "idx": 52}, {"begin": 8129, "end": 8169, "idx": 53}, {"begin": 8245, "end": 8312, "idx": 54}, {"begin": 8313, "end": 8394, "idx": 55}, {"begin": 8395, "end": 8457, "idx": 56}, {"begin": 8458, "end": 8505, "idx": 57}, {"begin": 8506, "end": 8720, "idx": 58}, {"begin": 8721, "end": 8941, "idx": 59}, {"begin": 8942, "end": 9086, "idx": 60}, {"begin": 9115, "end": 9197, "idx": 61}, {"begin": 9198, "end": 9352, "idx": 62}, {"begin": 9353, "end": 9478, "idx": 63}, {"begin": 9479, "end": 9636, "idx": 64}, {"begin": 9637, "end": 9767, "idx": 65}, {"begin": 9768, "end": 9911, "idx": 66}, {"begin": 9912, "end": 10093, "idx": 67}, {"begin": 10094, "end": 10243, "idx": 68}, {"begin": 10244, "end": 10346, "idx": 69}, {"begin": 10347, "end": 10483, "idx": 70}, {"begin": 10484, "end": 10580, "idx": 71}, {"begin": 10581, "end": 10690, "idx": 72}, {"begin": 10768, "end": 10932, "idx": 73}, {"begin": 10933, "end": 11021, "idx": 74}, {"begin": 11022, "end": 11125, "idx": 75}, {"begin": 11126, "end": 11250, "idx": 76}, {"begin": 11251, "end": 11380, "idx": 77}, {"begin": 11381, "end": 11481, "idx": 78}, {"begin": 11482, "end": 11723, "idx": 79}, {"begin": 11724, "end": 11813, "idx": 80}, {"begin": 11828, "end": 11900, "idx": 81}, {"begin": 11901, "end": 12079, "idx": 82}, {"begin": 12080, "end": 12225, "idx": 83}, {"begin": 12226, "end": 12341, "idx": 84}, {"begin": 12342, "end": 12414, "idx": 85}, {"begin": 12415, "end": 12649, "idx": 86}, {"begin": 12650, "end": 12846, "idx": 87}, {"begin": 12847, "end": 13006, "idx": 88}, {"begin": 13007, "end": 13224, "idx": 89}, {"begin": 13261, "end": 13390, "idx": 90}, {"begin": 13391, "end": 13524, "idx": 91}, {"begin": 13548, "end": 13662, "idx": 92}, {"begin": 13663, "end": 13833, "idx": 93}, {"begin": 13834, "end": 13976, "idx": 94}, {"begin": 13977, "end": 14085, "idx": 95}, {"begin": 14086, "end": 14249, "idx": 96}, {"begin": 14250, "end": 14333, "idx": 97}, {"begin": 14334, "end": 14452, "idx": 98}, {"begin": 14453, "end": 14597, "idx": 99}, {"begin": 14598, "end": 14745, "idx": 100}, {"begin": 14746, "end": 14846, "idx": 101}, {"begin": 14847, "end": 15014, "idx": 102}, {"begin": 15015, "end": 15094, "idx": 103}, {"begin": 15095, "end": 15226, "idx": 104}, {"begin": 15227, "end": 15387, "idx": 105}, {"begin": 15388, "end": 15556, "idx": 106}, {"begin": 15557, "end": 15739, "idx": 107}, {"begin": 15765, "end": 15871, "idx": 108}, {"begin": 15872, "end": 16050, "idx": 109}, {"begin": 16051, "end": 16185, "idx": 110}, {"begin": 16186, "end": 16405, "idx": 111}, {"begin": 16406, "end": 16567, "idx": 112}, {"begin": 16568, "end": 16724, "idx": 113}, {"begin": 16725, "end": 16801, "idx": 114}, {"begin": 16817, "end": 16910, "idx": 115}, {"begin": 16935, "end": 17147, "idx": 116}, {"begin": 17148, "end": 17322, "idx": 117}, {"begin": 17323, "end": 17422, "idx": 118}, {"begin": 17423, "end": 17618, "idx": 119}, {"begin": 17619, "end": 17835, "idx": 120}, {"begin": 17836, "end": 17947, "idx": 121}, {"begin": 17948, "end": 18033, "idx": 122}, {"begin": 18034, "end": 18144, "idx": 123}, {"begin": 18145, "end": 18274, "idx": 124}, {"begin": 18275, "end": 18352, "idx": 125}, {"begin": 18353, "end": 18425, "idx": 126}, {"begin": 18426, "end": 18511, "idx": 127}, {"begin": 18512, "end": 18617, "idx": 128}, {"begin": 18618, "end": 18686, "idx": 129}, {"begin": 18705, "end": 18862, "idx": 130}, {"begin": 18863, "end": 18977, "idx": 131}, {"begin": 18978, "end": 19066, "idx": 132}, {"begin": 19067, "end": 19230, "idx": 133}, {"begin": 19231, "end": 19332, "idx": 134}, {"begin": 19333, "end": 19429, "idx": 135}, {"begin": 19430, "end": 19620, "idx": 136}, {"begin": 19621, "end": 19769, "idx": 137}, {"begin": 19770, "end": 19983, "idx": 138}, {"begin": 19984, "end": 20087, "idx": 139}, {"begin": 20088, "end": 20183, "idx": 140}, {"begin": 20184, "end": 20355, "idx": 141}, {"begin": 20356, "end": 20583, "idx": 142}, {"begin": 20584, "end": 20708, "idx": 143}, {"begin": 20709, "end": 20861, "idx": 144}, {"begin": 20862, "end": 20915, "idx": 145}, {"begin": 20916, "end": 21007, "idx": 146}, {"begin": 21008, "end": 21084, "idx": 147}, {"begin": 21085, "end": 21317, "idx": 148}, {"begin": 21335, "end": 21486, "idx": 149}, {"begin": 21511, "end": 21635, "idx": 150}, {"begin": 21636, "end": 21844, "idx": 151}, {"begin": 21845, "end": 22061, "idx": 152}, {"begin": 22062, "end": 22106, "idx": 153}, {"begin": 22119, "end": 22198, "idx": 154}, {"begin": 22199, "end": 22318, "idx": 155}, {"begin": 22350, "end": 22516, "idx": 156}, {"begin": 22517, "end": 22630, "idx": 157}, {"begin": 22631, "end": 22800, "idx": 158}, {"begin": 22801, "end": 22931, "idx": 159}, {"begin": 22932, "end": 23052, "idx": 160}, {"begin": 23090, "end": 23284, "idx": 161}, {"begin": 23285, "end": 23387, "idx": 162}, {"begin": 23388, "end": 23615, "idx": 163}, {"begin": 23623, "end": 23682, "idx": 164}, {"begin": 23683, "end": 23791, "idx": 165}, {"begin": 23792, "end": 23944, "idx": 166}, {"begin": 23945, "end": 23967, "idx": 167}, {"begin": 23968, "end": 24138, "idx": 168}, {"begin": 24139, "end": 24265, "idx": 169}, {"begin": 24266, "end": 24401, "idx": 170}, {"begin": 24402, "end": 24560, "idx": 171}, {"begin": 24561, "end": 24781, "idx": 172}, {"begin": 24782, "end": 24901, "idx": 173}, {"begin": 24902, "end": 25019, "idx": 174}, {"begin": 25020, "end": 25211, "idx": 175}, {"begin": 25212, "end": 25402, "idx": 176}, {"begin": 25403, "end": 25524, "idx": 177}, {"begin": 25525, "end": 25752, "idx": 178}, {"begin": 25753, "end": 25848, "idx": 179}, {"begin": 25849, "end": 25931, "idx": 180}, {"begin": 25932, "end": 26053, "idx": 181}, {"begin": 26054, "end": 26178, "idx": 182}, {"begin": 26179, "end": 26285, "idx": 183}, {"begin": 26286, "end": 26403, "idx": 184}, {"begin": 26404, "end": 26467, "idx": 185}, {"begin": 26468, "end": 26764, "idx": 186}, {"begin": 26765, "end": 26928, "idx": 187}, {"begin": 26929, "end": 27188, "idx": 188}, {"begin": 27189, "end": 27414, "idx": 189}, {"begin": 27415, "end": 27649, "idx": 190}, {"begin": 27650, "end": 27746, "idx": 191}, {"begin": 27803, "end": 27926, "idx": 192}, {"begin": 27927, "end": 28153, "idx": 193}, {"begin": 28154, "end": 28336, "idx": 194}, {"begin": 28337, "end": 28516, "idx": 195}, {"begin": 28517, "end": 28635, "idx": 196}, {"begin": 28636, "end": 28702, "idx": 197}, {"begin": 28703, "end": 28798, "idx": 198}, {"begin": 28799, "end": 28972, "idx": 199}, {"begin": 28973, "end": 29125, "idx": 200}, {"begin": 29126, "end": 29317, "idx": 201}, {"begin": 29318, "end": 29415, "idx": 202}, {"begin": 29416, "end": 29519, "idx": 203}, {"begin": 29534, "end": 29711, "idx": 204}, {"begin": 29712, "end": 29873, "idx": 205}, {"begin": 29874, "end": 30072, "idx": 206}, {"begin": 30073, "end": 30288, "idx": 207}, {"begin": 30307, "end": 30504, "idx": 208}, {"begin": 30505, "end": 30731, "idx": 209}, {"begin": 30732, "end": 30825, "idx": 210}, {"begin": 30826, "end": 31066, "idx": 211}, {"begin": 31067, "end": 31197, "idx": 212}, {"begin": 31198, "end": 31402, "idx": 213}, {"begin": 31403, "end": 31573, "idx": 214}, {"begin": 31574, "end": 31841, "idx": 215}, {"begin": 31842, "end": 31905, "idx": 216}, {"begin": 31906, "end": 32042, "idx": 217}, {"begin": 32043, "end": 32222, "idx": 218}, {"begin": 32223, "end": 32319, "idx": 219}, {"begin": 32320, "end": 32470, "idx": 220}, {"begin": 32526, "end": 32738, "idx": 221}, {"begin": 32739, "end": 32852, "idx": 222}, {"begin": 32853, "end": 33024, "idx": 223}, {"begin": 33025, "end": 33198, "idx": 224}, {"begin": 33199, "end": 33349, "idx": 225}, {"begin": 33350, "end": 33490, "idx": 226}], "ReferenceToFigure": [{"begin": 3585, "end": 3586, "idx": 0}, {"begin": 4856, "end": 4857, "idx": 1}, {"begin": 10281, "end": 10282, "idx": 2}, {"begin": 11835, "end": 11836, "idx": 3}, {"begin": 14359, "end": 14360, "idx": 4}, {"begin": 19991, "end": 19992, "idx": 5}, {"begin": 23304, "end": 23305, "idx": 6}, {"begin": 23419, "end": 23420, "idx": 7}, {"begin": 24179, "end": 24180, "target": "#fig_1", "idx": 8}, {"begin": 25544, "end": 25545, "target": "#fig_2", "idx": 9}, {"begin": 31903, "end": 31904, "idx": 10}], "Div": [{"begin": 72, "end": 1459, "idx": 0}, {"begin": 1462, "end": 6998, "idx": 1}, {"begin": 7000, "end": 7471, "idx": 2}, {"begin": 7473, "end": 7859, "idx": 3}, {"begin": 7861, "end": 9086, "idx": 4}, {"begin": 9088, "end": 11813, "idx": 5}, {"begin": 11815, "end": 13224, "idx": 6}, {"begin": 13226, "end": 13524, "idx": 7}, {"begin": 13526, "end": 15739, "idx": 8}, {"begin": 15741, "end": 16801, "idx": 9}, {"begin": 16803, "end": 16910, "idx": 10}, {"begin": 16912, "end": 18686, "idx": 11}, {"begin": 18688, "end": 21317, "idx": 12}, {"begin": 21319, "end": 21486, "idx": 13}, {"begin": 21488, "end": 22106, "idx": 14}, {"begin": 22108, "end": 22318, "idx": 15}, {"begin": 22320, "end": 23052, "idx": 16}, {"begin": 23054, "end": 23615, "idx": 17}, {"begin": 23617, "end": 27746, "idx": 18}, {"begin": 27748, "end": 27763, "idx": 19}, {"begin": 27765, "end": 29519, "idx": 20}, {"begin": 29521, "end": 30288, "idx": 21}, {"begin": 30290, "end": 32470, "idx": 22}, {"begin": 32472, "end": 32477, "idx": 23}, {"begin": 32479, "end": 33490, "idx": 24}], "SectionMain": [{"begin": 1459, "end": 33490, "idx": 0}]}}