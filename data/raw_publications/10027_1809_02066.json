{"text": "Two Dimensional Stochastic Configuration Networks for Image Data Analytics\n\nAbstract:\nStochastic configuration networks (SCNs) as a class of randomized learner model have been successfully employed in data analytics due to its universal approximation capability and fast modelling property. The technical essence lies in stochastically configuring hidden nodes (or basis functions) based on a supervisory mechanism rather than data-independent randomization as usually adopted for building randomized neural networks. Given image data modelling tasks, the use of onedimensional SCNs potentially demolishes the spatial information of images, and may result in undesirable performance. This paper extends the original SCNs to two-dimensional version, termed 2DSCNs, for fast building randomized learners with matrixinputs. Some theoretical analyses on the goodness of 2DSCNs against SCNs, including the complexity of the random parameter space, and the superiority of generalization, are presented. Empirical results over one regression, four benchmark handwritten digits classification, and two human face recognition datasets demonstrate that the proposed 2DSCNs perform favourably and show good potential for image data analytics.\n\nMain:\n\n\n\nI. INTRODUCTION\nAlong with the rising wave of deep learning, neural networks, by means of their universal approximation capability and well-developed learning techniques, have achieved great success in data analytics [1]. Usually, the input layer of a fully connected neural network (FCNN) is fed with vector inputs, rather than two-dimensional matrices such as images or higher dimensional tensors like videos or light fields [2] - [4]. Technically, the vectorization operation makes the dot product (between the inputs and hidden weights) computationally feasible but inevitably induces two drawbacks: (i) the dimensionality curse issue when the number of training samples is limited; (ii) the loss of spatial information of the original muti-dimensional input. Although convolutional neural networks (CNNs) have brought about some breakthroughs in image data modelling, by means of their good potential in abstract feature extraction, power in local connectivity and parameter sharing, etc. [5], the development of FCNNs with matrix inputs (or multidimensional inputs in general) is of great importance in terms of both theoretical and algorithmic viewpoints. In [6], Gao et al. first nominated the term 'Matrix Neural Networks (MatNet)' and extended the conventional back-prorogation (BP) algorithm [7] to a general version that is capable for dealing with 2D inputs. Empirical results in [6] and their parallel work [8] demonstrate some advantages of MatNet for image data modelling. Obviously, MatNet may still suffer some intrinsic drawbacks of gradient descent-based approaches such as local minimum and low convergence rate. That indicates a urgent demand for developing fast learning techniques to build FCNNs with 2D inputs, as an immediate motivation of this work.\nRandomized learning techniques have demonstrated their great potential in fast building neural network models and algorithms with less computational cost [9]. In particular, Random Vector Functional-Link (RVFL) networks developed in the early 90s [10], [11] and Stochastic Configuration Networks (SCNs) proposed recently [12] are two representatives of the randomized learner models. Technically, RVFL networks randomly assign the input weights and biases from a fixed distribution (range) that is totally data-independent, and optimize merely the output weights by solving a linear least squares problem. This trivial idea sounds computationally efficient, however, the obtained learner models may not have universal approximation capability when an inappropriate distribution (range) is used for the random assignment. This drawback indeed makes RVFL networks less practical in data modelling problems because more human intervention and/or empirical knowledge is required for problem-solving. Fortunately, SCNs, as state-of-the art randomized leaner models, were developed with rigorous theoretical fundamentals and advanced algorithm implementations [12]. The success of SCNs and their arXiv:1809.02066v1 [cs.LG] 6 Sep 2018 extensions [13], [14] in fast building universal approximators with randomness has been extensively demonstrated on data analytics. Generally, the very heart of SCNs framework lies in the supervisory (data-dependent) mechanism used to stochastically (and incrementally) configure the input weights and biases from an appropriate 'support range'. In the presence of multi-dimensional especially 2D inputs (e.g. images), both RVFL networks and SCNs require a regular vectorization operation before feeding the given input signal into the neural network model. Authors in [15] made a first attempt on two dimensional randomized learner models, via developing RVFL networks with matrix inputs (termed 2DRVFL) with applications in image data modelling. Although some advantages of the 2D model are experimentally demonstrated, the concerned methodology/framework still suffers from the drawbacks of RVFL networks as highlighted above.\nThis paper develops two dimensional SCNs on the basis of our previous SCN framework [12], aiming to fast build 2D randomized learner models that are capable for resolving data anlytics with matrix inputs. We first provide a detailed algorithmic implementation for 2DSCN, followed by a convergence analysis with special reference to the universal approximation theorem of SCNs. Then, some technical differences between 2DSCN and SCN are presented with highlights in various aspects, such as the support range for random parameters, the complexity for parameter space, data structure preservation. Among that and interestingly, our work is the first to think about a potential relationship between 2DSCN and CNN in problem-solving, that is, computations involved in 2DSCN in some sense can be viewed as equivalent to the 'convolution' and 'pooling' tricks performed in CNN structure. Later, some technical issues around why randomized learner models produced by 2DSCN algorithm are more prone to have a better generalization ability are investigated in-depth. In particular, some solid results from statistical learning theory are revisited with our special interpretation, for the purpose of qualitative analysis on learner models' generalization power and useful insights on certain very influential factors. Besides, we provide an intuitive sense that 2DSCN may exhibit similar philosophy as concerned in DropConnect [16] for effectively alleviating over-fitting. Importantly, to make a reasonable and practical judgement on the generalization ability of an obtained randomized learner model, we make efforts towards developing a nearly sharp estimation about the model's test error upper bound, thereby one can effectively predict the generalization performance. Extensive experimental study on both regression and classification problems (with matrix inputs setup) have demonstrated remarkable advantages of 2DSCN on image data modelling, compared to some existing randomized learning techniques. Also, our theoretical analysis has been successfully verified by the statistical simulation results. Overall, our main contributions can be summarized in three-fold:\n\u2022 From the algorithmic perspective, we extend our original SCN framework to 2D version, and the proposed 2DSCN algorithm can effectively deal with data modelling tasks with matrix inputs, compared with some existing randomized learning techniques;\n\u2022 Theoretically, the universal approximation property of 2DSCN-based learner models is verified and some technical differences between 1D and 2D randomized learner models are investigated in terms of various perspectives. Importantly, we provide an upper bound for the test error of a given randomized learner model, and demonstrate in theory how the hidden layer output matrix (computationally associated with the training inputs, the hidden input weights and biases, the number of hidden nodes, etc.) and the output weights can affect the randomized learner model's generalization power. \u2022 For practical applications, the merits of the developed 2DSCN algorithm on image data analytics have been illustrated on various benchmark tasks, such as the rotation angles predication for handwritten digits, handwritten digits classification, and human face recognition. The extensive experimental study conducted in this paper can lend some empirical support to end-users who would like to employ FCNNs rather than CNNs in image data modeling. The remainder of this paper is organized as follows. Section II provides some related work including the 2D random vector functional link (RVFL) networks and our original SCN framework. Section III details the proposed 2D stochastic configuration networks (2DSCNs) with algorithmic description, technical highlights, and some theoretical explanation, aiming to distinguish 2DSCN from the other randomized learning techniques. Section IV presents experimental study in terms of both image-based regression and classification problems, and Section V concludes this paper with further remarks and expectation.\n\nII. RELATED WORK\nThis section reviews two types of randomized learner models with highlights in their technical discrepancy. First, 2DRVFL networks as an extension of RVFL networks can deal with matrix inputs but could not guarantee universal approximation in data modelling, which causes some infeasibility as well as uncertainty for problem-solving; SCNs as an advanced universal approximator have demonstrated their effectiveness and efficiency in data analytics with vector inputs as usually done. Basically, the brief examination of these two methodology motivates us to think about the formulation of 2DSCN and also its potential advantages in image data modelling problems, as to be detailed in the following section.\n\nA. 2DRVFL Networks\n2DRVFL networks with matrix inputs has been empirically studied in [15]. Technically, it can be viewed as a trivial extension of the original RVFL networks in computation via employing two sets of input weights acting as matrix transformation over the left and right sides of inputs. Here we start directly with the problem formulation for 2DRVFL, rather than revisit the basics of RVFL networks. Given N training instances (x i , t i ) sampled from an unknown function, with inputsx i \u2208 R d1\u00d7d2 , outputs t i \u2208 R m ,\u03b2 j \u03c6(u T j x i v j + b j ) \u2212 t i 2 ,\nwhere u j , v j , b j are randomly assigned from[\u2212\u03bb, \u03bb] d1 , [\u2212\u03bb, \u03bb] d2 , [\u2212\u03bb, \u03bb],\nrespectively and remain fixed. g(\u2022) is the activation function.\nThe above LS problem can be represented by a matrix form, i.e., \u03b2 * = arg min\u03b2 H\u03b2 \u2212 T 2 F ()\nwhereH = \uf8eb \uf8ec \uf8ed g(u T 1 x 1 v 1 + b 1 ) \u2022 \u2022 \u2022 g(u T L x 1 v L + b L ) . . . \u2022 \u2022 \u2022 . . . g(u T 1 x N v 1 + b 1 ) \u2022 \u2022 \u2022 g(u T L x N v L + b L ) \uf8f6 \uf8f7 \uf8f8 is the hidden layer output matrix, T = [t 1 , t 2 , . . . , t N ] T , \u03b2 = [\u03b2 1 , \u03b2 2 , . . . , \u03b2 L ] T .\nA closed form solution can be obtained by using the pseudo-inverse method, i.e., \u03b2 * = H \u2020 T . Remark 1. Although RVFL networks (with either vector or matrix inputs) allows fast building a model by randomly assigning input weights and biases, some key technical issues are still unresolved. Theoretically, approximation error for this kind of randomized learner model are bounded in the statistical sense, which means preferable approximation performance is not guaranteed for every random assignment of the hidden parameters [11]. Besides, it has been proved that in the absence of such additional conditions, one may observe exponential growth of the number of terms needed to approximate a non-linear map, and/or the resulting learner model will be extreme sensitivity to the parameters [17]. From the algorithmic perspective, all these theoretical predictions do not address the learning algorithm or implementation issues for the randomized learner. Practical usage of this kind of randomized model encounter one key technical difficulty, that is, how to find an appropriate range for randomly assigning hidden parameters with considerable confidence to ensure the universal approximation property. So far, the most accurate (and trivial) way for implementing RVFL networks should employ trial-and-error/rule-of-thumb for parameter setting, that is to say, one needs perform various setting of \u03bb before getting an acceptable learner model. This trick sounds practical but still has potential drawbacks due to uncertainty causes by the randomness, as theoretically and empirically studied in [18]. We also note that one can try out different random selection range for u j and v j in 2DRVFL, such as u j \u2208 [\u2212\u03bb 1 , \u03bb 1 ] d1 and v j \u2208 [\u2212\u03bb 2 , \u03bb 2 ] d2 , but may need more grid-searching in algorithm implementation to find out the 'best' collection {\u03bb * 1 , \u03bb * 2 }.\n\nB. SCN framework\nOur recent work [12] is the first to touch the foundation of building universal approximator with random basis functions. More precisely, a new type of randomized learner model, termed stochastic configuration networks (SCNs), is developed by implanting a 'data-dependent' supervisory mechanism to the random assignment of input weights and biases. Readers who are interested in a complete roadmap of this novel work can refer to [12]. Here we just briefly revisit the essence and highlight some technical points.\nLet \u0393 := {g 1 , g 2 , g 3 ...} represent a set of real-valued functions, and span(\u0393) stands for the associated function space spanned by \u0393. L 2 (K) denote the space of all Lebesgue measurable functions f = [f 1 , f 2 , . . . , f m ] : R d \u2192 R m defined on K \u2282 R d , with the L 2 norm defined asf := m q=1 D |f q (x)| 2 dx 1/2 < \u221e.\nGiven another vector-valued function \u03c6 = [\u03c6 1 , \u03c6 2 , . . . , \u03c6 m ] : R d \u2192 R m , the inner product of \u03c6 and f is defined asf, \u03c6 := m q=1 f q , \u03c6 q = m q=1 K f q (x)\u03c6 q (x)dx.\nNote that this definition becomes the trivial case when m = 1, corresponding to a real-valued function defined on a compact set.\nBefore revising the universal approximation theory behind SCNs, we recall the problem formulation as follows. For a target function f : R d \u2192 R m , suppose that we have already built a neural network learner model with only one hidden layer andL \u2212 1 hidden nodes, i.e, f L\u22121 (x) = L\u22121 j=1 \u03b2 j g j (w T j x + b j ) (L = 1, 2, . . ., f 0 = 0), with \u03b2 j = [\u03b2 j,1 , . . . , \u03b2 j,m ] T , and residual error e L\u22121 = f \u2212 f L\u22121 = [e L\u22121,1 , . . . , e L\u22121,\nm ] far away from an acceptable accuracy level, our SCN framework can successfully offer a fast solution to incrementally add \u03b2 L , g L (w L and b L ) leading to f L = f L\u22121 + \u03b2 L g L until the residual error e L = f \u2212 f L falls into an expected tolerance . The following Theorem 1 restates the universal approximation property of SCNs, corresponding to Theorem 7 in [12].\nTheorem 1. Suppose that span(\u0393) is dense in L 2 space and \u2200g \u2208 \u0393, 0 < g < b g for some b g \u2208 R + . Given 0 < r < 1 and a nonnegative real number sequence {\u00b5 L } with lim L\u2192+\u221e \u00b5 L = 0, \u00b5 L \u2264 (1 \u2212 r), for L = 1, 2, . . ., denoted by\u03b4 L = m q=1 \u03b4 L,q , \u03b4 L,q = (1\u2212r \u2212\u00b5 L ) e L\u22121,q 2 , q = 1, 2, . . . , m,\nif the random basis function g L is generated to satisfy the following inequalities:e L\u22121,q , g L 2 \u2265 b 2 g \u03b4 L,q , q = 1, 2, . . . , m,\nand the output weights are evaluated by[\u03b2 1 , \u03b2 2 , . . . , \u03b2 L ] = arg min \u03b2 f \u2212 L j=1 \u03b2 j g j ,\nit holds that lim L\u2192+\u221e f \u2212f L = 0, where f L = L j=1 \u03b2 j g j ,\u03b2 j = [\u03b2 j,1 , . . . , \u03b2 j,m ] T .\nBasically, the algorithmic procedures for building SCNs can be summarized as repeating the following sessions with L = 1, 2, 3 . . . . until the given training error tolerance is reached:\n\u2022 Stochastically configure a new hidden node g L (i.e, find out random w L and b L from support range) based on the inequality (5); \u2022 Evaluate \u03b2 by solving the linear least squares problem expressed in Eq. ( 6); \u2022 Calculate the current training error e L and check the termination condition is met or not. Remark 2. We would like to highlight that SCNs outperforms some existing randomized learning techniques (e.g. RVFL networks) that employ a totally data-independent randomization in training process, and demonstrate considerable advantages in building fast learner models with sound learning and generalization ability. It implies a good potential for dealing with online stream and/or big data analytics. Recently, some extensions of SCNs are proposed towards various viewpoints. In [19], an ensemble version of SCNs with heterogeneous features was developed with applications in large-scale data analytics. In [14], we have generalized our SCNs to a deep version, termed as DeepSCNs, with both theoretical analysis and algorithm implementation. It has been empirically illustrated that DeepSCNs can be constructed efficiently (much faster than other deep neural networks) and share many great features, such as learning representation and consistency property between learning and generalization. Besides in [13], we built robust SCNs for the purpose of uncertain data modelling. This series of work to some extent exhibits the effectiveness of SCN framework and have displayed an advisable and useful way on studying/implantng randomness in neural networks.\n\nIII. 2D STOCHASTIC CONFIGURATION NETWORKS\nThis section details our proposal for two dimensional stochastic configuration networks (2DSCN). First, based on our original SCN framework, we can straightforwardly present the algorithm description for 2DSCN, followed by theoretically verifying the convergence property. Then, comparison around some technical points between these two methods are discussed. Afterwards, a theoretical analysis why randomized learner models with 2D inputs have a good potential for inducing better generalization is provided.\n\nA. Algorithm Implementation\nOn the basis of SCN framework, the problem of building 2DSCN can be formulated as follows. Given a target function f : R d1\u00d7d2 \u2192 R m , suppose that a 2DSCN with L \u2212 1 hidden nodes has already been constructed, that is,f L\u22121 (x) = L\u22121 j=1 \u03b2 j g j (u T j xv j + b j ) (L = 1, 2, . . ., f 0 = 0)\n, where g(\u2022) represents the activation function, u j \u2208 R d1 , v j \u2208 R d1 stand for the collection of input weights (to be stochastically configured with certain constrains), \u03b2 j = [\u03b2 j,1 , . . . , \u03b2 j,m ] T are the output weights. With the current residual error denoted bye L\u22121 = f \u2212 f L\u22121 = [e L\u22121,1 , . . . , e L\u22121,\nm ], which as supposed does not reach a pre-defined tolerance level, our objective is to fast generate a new hidden node g L (in lieu of u L , v L , and b L ) so that the resulted model f L has an improved residual error after evaluating all the output weights \u03b2 1 , \u03b2 2 , . . . , \u03b2 L based on a linear least squares problem.\nSuppose we have a training dataset with inputs X = {x 1 , x 2 , . . . , x N }, x i \u2208 R d1\u00d7d2 and its corresponding outputs T = {t 1 , t 2 , . . . , t N }, wheret i = [t i,1 , . . . , t i,m ] T \u2208 R m , i = 1, . . . , N , sampled based on a target function f : R d1\u00d7d2 \u2192 R m . Denoted by e L\u22121 := e L\u22121 (X) = [e L\u22121,1 (X), e L\u22121,2 (X), . . . , e L\u22121,m (X)] T \u2208 R N \u00d7m\nas the corresponding residual error vector before adding the Lth new hidden node, where e L\u22121,q := e L\u22121,q (X) = [e L\u22121,q (x 1 ), . . . , e L\u22121,q (x N )] \u2208 R N with q = 1, 2, . . . , m. With N two dimensional inputs {x 1 , x 2 . . . , x N }, the L-th hidden node activation can be expressed ash L := h L (X) = [g L (u T L x 1 v L +b L ), . . . , g L (u T L x N v L +b L )] T , () where u L \u2208 R d1 and v L \u2208 R d2 are input weights, b L is the bias.\nDenote a set of temporal variables \u03be L,q , q = 1, 2, ..., m as follows:\u03be L,q = e T L\u22121,q h L 2 h T L h L \u2212 (1 \u2212 r)e T L\u22121,q e L\u22121,q .\nBased on Theorem 1, it is natural to think about the inequality constrain for building 2DSCN by letting m q \u03be L,q \u2265 0. After successfully adding the L-th hidden node (g L ), the current hidden layer output matrix can be expressed asH L = [h 1 , h 2 , . . . , h L ].\nThen, the output weights are evaluated by solving a least squares problem, i.e.,\u03b2 * = arg min \u03b2 H L \u03b2 \u2212 T 2 F = H \u2020 L T,\nwhere H \u2020 L is the Moore-Penrose generalized inverse [20] and \u2022 F represents the Frobenius norm.\n\nB. Convergence Analysis\nThe key to verify the convergence of Algorithm 1 is to analyze the universal approximation property of 2DSCN. Recall the proof of Theorem 1 (Theorem 7 in [12]), one can observe that it is the inequality constrains that dominant the whole deduction, rather than the form of input weights (either vector or matrix). In fact, it still holds that e L is monotonically decreasing and convergent, e L 2 \u2264 r e L\u221212\nfor a given r \u2208 (0, 1). Therefore, lim L\u2192+\u221e e L = 0. We remark that r value is varying during the whole incremental process and the same approach intuitively applies to verify the convergence. Also, it sounds logical to set r as a sequence with monotonically increasing values, because it will become more difficult to meet the inequality condition after considerable amount of hidden nodes are successfully configured. To some extent, this user-determined (and problemdependent) parameter affects the algorithm convergence speed. In particular, one can set r sequence (monotonically increasing) with initial value quite close to one, which can ease the configuration phase when adding one hidden node as the inequality condition can be easily satisfied. Alternatively, user can start with a relatively small value (but cannot be too small), which however requires more configuration trials at one single step to find suitable input weights and biases that fit the inequality condition. It can lead to huge computational burdenAlgorithm 1: 2DSCN Input : Training inputs X = {x 1 , x 2 , . . . , x N }, x i \u2208 R d 1 \u00d7d 2 , outputs T = {t 1 , t 2 , . . . , t N }, t i \u2208 R m ;\nThe maximum number of hidden nodes Lmax; The expected error tolerance ; The maximum times of random configuration Tmax; Two sets of scalars \u03a5 = {\u03bb 1 , . . . , \u03bb end } and R = {r 1 , . . . , r end } Output: A 2DSCN model1 Initialization: e 0 := [t T 1 , t T 2 , . . . , t T N ] T , \u2126, W := [ ]; 2 while L \u2264 Lmax and e 0 F > do 3 for \u03bb \u2208 \u03a5 do 4 for r \u2208 R do 5 for k = 1, 2 . . . , Tmax do 6 Randomly assign u L , v L , b L from [\u2212\u03bb, \u03bb] d 1 , [\u2212\u03bb, \u03bb] d 2 , [\u2212\u03bb, \u03bb], respectively; 7\nCalculate h L by Eq. ( 7), and \u03be L,q by Eq. ( 8); or even more unnecessary fails during the configuration phase. Since the convergence property is guaranteed theoretically, one can think about some practical guideline for setting r sequence with reference to their practical task. Based on our experience, the first trick, i.e., initializing r with value close to one and then monotonically increase (progressively approaching one), offers more feasibility in algorithm implementation. Later in Section IV, we will recall this note in our experimental setup.8 if min{\u03be L,1 , \u03be L,2 , ..., \u03be L,m } \u2265 0 then 9 Save w L and b L in W , \u03be L = m q=1 \u03be L,q in \u2126; else go back to Step 5; end end if W is not empty then Find (u * L , v * L , b * L ) maximizing \u03be L in \u2126,\n\nC. Comparison with SCNs\n1) Support Range for Random Parameters: Technically, 2DSCN still inherits the essence of our original SCN framework, that is, stochastically configuring basis functions in light of a supervisory mechanism (see Theorem 1). This kind of data-dependent randomization way can effectively and efficiently locate the 'support range', where one can randomly generate hidden nodes with insurance for building universal approximators. Despite this common character, differences between support ranges induced by these two methods should be highlighted. Computationally, it holds thatu T xv = Tr(u T xv) = Tr(xvu T ) = Tr((uv) T x) = (vec(uv T )) T vec(x),\nwhere Tr means the matrix trace, u \u2208 R d1 , v \u2208 R d2 , vec(\u2022) \u2208 R d1d2 stands for vectorization of a given 2D array. We observe that although (vec(uv T )) T vec(x) can be viewed as a regular dot product (between the hidden weight vector and input) computation performed in SCN, the resulted (d 1 d 2 )dimensional vector vec(uv T ) may exhibit different distribution, in contrast to a random (d 1 d 2 )-dimensional vector from SCN-induced support range.\nWe should also note that there is no special requirements for the initial distribution of u and v performed in the algorithm implementation. For instance, one can set two different range parameter sets \u03a5 u = {\u03bb u 1 , . . . , \u03bb u end } and \u03a5 v = {\u03bb v 1 , . . . , \u03bb v end } respectively in their experimental setup. If so, in algorithm design, one more loop is need for searching appropriate \u03bb v from \u03a5 v when \u03bb u is chosen and fixed, or vice versa. Since universal approximation capability is always guaranteed, this complex manipulation sounds not computationally efficient in practical implementation . For simplicity, we just use the same random range setting for u and v, i.e., merely \u03a5, as noticed in step 3 of the above Algorithm 1.\nIn practice, u or v, which can be viewed as row/columndirection hidden weight, has its own support range, which relies on their initially employed distribution (\u03a5 u or \u03a5 v ) and the inequality constrain for hidden node configuration. Regarding discrepancies between 2DSCN and SCN in random parameter distribution, we will elaborate more details at the end of this section.\n2) Parameter Space: Despite that neural networks can universally approximate complex multivariate functions, they still suffers from difficulties on high-dimensional problems where the number of input features is much larger than the number of observations. Generally, a huge number of training observations is required for training/building an acceptable approximator, as normally performed in deep learning community. Empirically, problems with very limited number of training samples but of very high dimension usually need further technical concerns in algorithm development, like feature selection or learning representation with sparsity (e.g, Lasso). To avoid high-dimensional inputs and seek useful input features for the alleviation of overfitting are important and essential for the majority of machine learning techniques.\nIt is clear that one 2DSCN model with L hidden nodes has L d 1 -dimensional weights and L d 2 -dimensional input weights, L biases (scalar), L m-dimensional output weights, that is, L \u00d7 (d 1 + d 2 + 2) parameters in total; whist SCN model with the same structure has L (d 1 \u00d7 d 2 )-dimensional input weights and the same amount of biases and output weights, i.e., L \u00d7 (d 1 d 2 + 1 + m) parameters altogether. Technically, in SCN, it can impose a high dimensional parameter space that may cause potential difficulties to meet the stochastic configuration inequality (5), especially when the number of training samples is far lower than the dimensionality of the input weights. Besides, for a relatively large L, huge memory is needed for saving L \u00d7 (d 1 d 2 + 1 + m) parameters in computation. On the contrary, 2DSCN can effectively ease the high-dimensional issue and to some extent economize physical memory in practice.\n3) Data Structure Preservation: It sounds logical that 2DSCN has some advantages in preserving the spatial details of the given input images, due to that it cares about the 2Dneighborhood information (the order in which pixels appear) of the input rather than a simple vectorization operation performed in SCN. This argument has been raised and commonly accepted in literature, however, there is no sufficient scientific evidence verifying why and how the vectorization trick affect the structural information of the 2D inputs. In this part, we aims at examining the resemblance between 2DSCN methodology and convolutional neural networks (CNNs) in terms of computational perspective. A schematic diagram is plotted in Fig. 2 and corresponding explanations are as follows.\nRecall Eq. ( 10), the left low-dimensional vector u T is acting as a 'filter' used in extracting some random features from the 2D input x. In other words, each column of x is now considered as a block, i.e., image x = [x 1 , x 2 , . . . , x d2 ] is supposed to be represented by d 2 block-pixels, then u T x can be viewed as a 'convolution' operation between the 'filter' u T (of size 1 \u00d7 d 1 ) and the input x along the vertical direction, leading to a feature map [u T x 1 , u T x 2 , . . . , u T x d2 ]. Then, a 'pooling' operation, conducted by calculating a weighted sum of the obtained feature map, is used to aggregate feature information.\nAs a conjecture, 2DSCN might have some technical merits in common with CNNs for image data analytics. More theoretical and/or empirical research on this judgment are left for our future study.\n\nD. Superiority in Generalization\nIn this part, we will investigate in-depth why 2DSCN (and 2DRVFL) potentially leads to a better generalization performance than SCN (and RVFL). Four supportive theories (ST1 to ST4) are presented to explain our intuition prediction, that is, the stochastically configured input weights and biases of 2DSCN to a great extent are more prone to result in lower generalization error. Later some statistical verification are demonstrated to further justify our theoretical interpretation.\nST1: Learning Less-Overlapping Representations. Typically, elements of a weight vector have one-to-one correspondence with observed features and a weight vector is oftentimes interpreted by examining the top observed-features that correspond to the largest weights in this vector. In [21], the authors proposed a non-overlapness promoting regularization learning framework to improve interpretability and help alleviate overfitting. It imposes a structural constraint over the weight vectors, thus can effectively shrink the complexity of the function class induced by the neural network models and improve the generalization performance on unseen data. Assume that a model is parameterized by L vectors W = { wi } L i=1 , [21] proposed a hybrid regularizer consisting of a orthogonality-promoting term and sparsity-promoting term, denoted by\u2126(W) = tr(M ) \u2212 log det(M ) + \u03b3 L i=1 wi l1 ,\nwhere M is the Gram matrix associated with W, i.e., M i,j = wT i wj , \u03b3 is a tradeoff parameter between these two regularizers.\nTheoretically, the first term tr(M ) \u2212 log det(M ) controls the level of near-orthogonal over the weight vectors from W, while the second term L i=1 wi l1 encourage w i \u2208 W to have more elements close to zero. It is empirically verified that this hybrid form of regularizer can contribute to learner models with better generalization performance [21].\nBack to our thesis, we can roughly explain why 2D models (2DSCN and 2DRVFL) can outperform 1D models (SCN and RVFL), and simultaneously, why SCN-based models are better than RVFL-based ones: (i) Generally, there is no big difference between SCN and 2DSCN on the near-orthogonal level of W, however, random weights in 2DSCN can have higher level of sparsity than that in SCN, hence leading to a smaller L i=1 wi l1 . This deduction can also be used to differ 2DRVFL from RVFL as well; (ii) Given similar level of sparsity in W, SCN-based models are more prone to have a lower near-orthogonal level than RVFL-based ones, therefore, indicating a smaller tr(M ) \u2212 log det(M ). For further justifications on these intuitive arguments, we present analogous theories regarding the near-orthogonality of weight vectors in the following part (see ST2 below) and demonstrate some statistical results at the end of this section.\nST2: Weight Vector Angular Constraints for Diversity Promoting. Authors in [22], [23] have shown empirical effectiveness and explained in theory when and why a low generalization error can be achieved via adjusting the diversity of hidden nodes in neural networks. Theoretically, increasing the diversity of hidden nodes in a neural network model would reduce estimation error but increase approximation error, which implies that a low generalization error can be achieved when the diversity level is set appropriately. Specifically, nearorthogonality of the weight vectors (e.g, input weights and biases) can be used to characterize the diversity of hidden nodes in a neural network model, and a regularizer with weight vector angular constraints can be used to alleviate overfitting. To highlight the impact of near-orthogonality (of the weight vectors) on the generalization error, we will reformulate two main theoretical results addressed in [23]. Before that, some notations and preliminaries on statistical learning theory are revisited.\nConsider the hypothesis setF := {x \u2192 L j=1 \u03b2 j g( wT j x) \u03b2 2 \u2264 B, wj 2 \u2264 C, \u2200i = j, | wT i wj | \u2264 \u03c4 wi 2 wj 2 }.\nwhere \u03b2 stands for the output weightg(t) = 1/(1 + e \u2212t )\nis the sigmoid activation function. Given training samples {(x i , y i )} N i=1 generated independently from an unknown distribution P X Y . The generalization error of f \u2208 F is defined as R(f) = E P X Y [ 1 2 (f (x) \u2212 y) 2 ]. As P X Y is not available, one can only consider minimizing the empirical risk R(f ) = 1 2N N i=1 (f (x i ) \u2212 y i ) 2 in lieu of R(f ). Let f * \u2208 arg min f \u2208F R(f )\nbe the true risk minimizer and f \u2208 arg min f \u2208F R(f ) be the empirical risk minimizer. Then, the generalization error R( f ) := R( f ) \u2212 R(f * ) + R(f * ) (of the empirical risk minimizer f ) can be estimated by bounding the estimation error R( f )\u2212R(f * ) and the approximation error R(f * ), respectively. The following Theorem 2 and Theorem 3 show these two estimations in relation to the factor \u03c4 .\nTheorem 2 [23] (Estimation Error). With probability at least 1 \u2212 \u03b4, the estimation upper bound of estimation error decreases as \u03c4 becomes smaller, i.e.,R( f ) \u2212 R(f * ) \u2264 \u03b3 2 2 ln(4/\u03b4) + \u03b3B(2C + 4|g(0)|) \u221a m \u221a N , where \u03b3 = 1 + BC (m \u2212 1)\u03c4 + 1/4 + \u221a mB|g(0)|. Suppose the target function G = E[y|x] satisfy certain smoothness condition given by \u03c9 2 | G(\u03c9)|d\u03c9 \u2264 B/2\n, where G(\u03c9) represents the Fourier transformation of G. Then, the approximation error, which reflects the power of the hypothesis set F for approximating G, is expressed as follows.\nTheorem 3 [23] (Approximation Error). A smaller \u03c4 contributes to a larger upper bound of approximation error, that is, let C > 1 and L \u2264 2( \u03c0/2\u2212\u03b8 \u03b8 + 1), where \u03b8 = arccos(\u03c0), then there exists f \u2208 F such thatf \u2212G 2 \u2264 B( 1 \u221a m + 1 + 2 ln C C )+2 \u221a LBC sin( min(2L\u03b8, \u03c0) 2 ).\nBased on Theorem 2 and Theorem 3, we can come to a conclusion, that is, a larger upper bound of generalization error can be caused by the case when the weight vectors are highly near-orthogonal with each other (\u03c4 is extremely small) or the situation that \u03c4 is close or equal to 1 (e.g., there exist two weight vectors that are linearly dependent). Therefore, given two obtained (randomized) learner models with roughly the same training performance, the one equipped with hidden weight vectors of high near-orthogonality is likely to result in worse generalization. On the other hand, our previous work [18] reveals a key pitfall of RVFL networks that all high-dimensional data-independent random features are nearly orthogonal to each other with probability one. Fortunately, the supervisory mechanism used in SCN framework imposes an implicit relationship between each weight vector and can effectively reduce the probability of near-orthogonality. With all these clues, we can roughly explain why the leaner models produced by SCN and 2DSCN are more prone to result in a better generalization performance than RVFL and 2DRVFL. It would be interesting to organize rigourous theoretical analysis and extensive empirical study on differing the SCN framework from RVFL networks from this point of view. Also, it is meaningful to think about weight vector angular constraints in the development of SCNs, for the purpose of the enhancement of generalization. To avoid losing keynote for this work, we leave these useful explorations to our future research.\nST3: Vague Relationship between 2DSCN and Drop-Connect framework. To effectively alleviate over-fitting and improve the generalization performance, Dropout has been proposed for regularizing fully connected layers within neural networks by randomly setting a subset of activations to zero during training [24], [25]. DropConnect proposed by Wan et al. [16] is the extension of Dropout in which each connection, instead of each output unit, can be dropped with certain probability. Technically, DropConnect can be viewed as similar to Dropout because they both perform dynamic sparsity within the learner model during the training phase, however, differs in that the sparsity-based concerns are imposed on the hidden input weights, rather than on the output vectors of a layer. That means the fully connected layer with DropConnect becomes a sparsely connected layer in which the connections are chosen at random during the training stage. Importantly, as noted in [16], the mechanism employed in DropConnect is not equivalent to randomly assigning a sparse hidden input weights matrix (and remain fixed) during the training process, which indirectly invalidates the effectiveness of RVFL and 2DRVFL method even when they use sparse weights in the hidden layer.\nIntuitively, our proposed 2DSCN could be thought as related to DropConnect, in terms of the following points:\n\u2022 supervisory mechanism used in 2DSCN aims at incrementally configuring the weight vectors until convergence to a universal approximator, which is equivalent to the training objective of DropConnect; \u2022 once random weight vectors in 2DSCN have many small elements close to zero, their functionality is similar to the sparsity mechanism imposed in DropConnect on the hidden weights; \u2022 On the basis of the above two clues, the incremental process performed in 2DSCN can be viewed as similar to proceeding dynamic sparsity within the learner model during the training phase as used in DropConnect.\nWe would like to highlight that the original SCN does not have this kind of vague relationship with DropConnect, unless certain weights sparsity regularizer is concerned in the training process. In contrast, 2DSCN involves more weight vectors with small values, which indeed can be viewed as considerable degree of sparsity, have a good potential to inherit some merits of DropConnect and its parallel methodology. Fig. 3 highlights the characteristics of DropConnect, and provides a vivid demonstration of our logic why 2DSCN differs from SCN in exhibiting sparsity among the hidden input weights.\nST4: Novel Estimation of Test Error. Various statistical convergence rates for neural networks have been established when some constrains on the weights are concerned [26] - [29]. Empirically, small weights together with small training error can lead to significant improvements in generalization. All these investigations lend scientific supports to the heuristic techniques like weight decay and early stopping. The reason behind is that producing over-fitted mappings requires high curvature and hence large weights, while keeping the weights small during training can contribute to smooth mappings. Technically, the regularization learning framework, introducing various types of weight penalty such as L2 weight de- cay [30], [31], Lasso [32], Kullback-Leibler (KL)-divergence penalty [33], etc., shares a similar philosophy to help prevent overfitting.\nA comprehensive overview of existing theories/techniques concerning learner models's generalization capability is out of our focus in this paper. Instead, we revisit the theoretical result presented in [34], and illustrate mathematically how the output weights magnitudes affect randomized learner models' generalization power. For a better understanding and consistent problem formulation, we restate their main result with reference to our previous notations used in ST2, that is, Theorem 4 [34]. Consider the hypothesis set F p := {f (x) = \u03b1(w)g(w; w)dw |\u03b1(w)| \u2264 Bp(w)} with certain distribution p and function g satisfying sup x,w |g(x; w)| \u2264 1, and given a training data set with N input-output pairs drawn iid from some distribution P X Y , a randomized learner model f (x) = L j=1 g(x i ; w i ) can be obtained by randomly assigning w i , w 2 , . . . , w L from the distribution p and solving the empirical risk minimization problem 1min \u03b2 1 N N i=1 ( f (x i ) \u2212 y i ) 2 subject to \u03b2 \u221e \u2264 B/L.\nThen, with probability at least 1 \u2212 2\u03b4, the upper bound for the generalization error of f can be estimated byR[ f ] \u2264 min f \u2208Fp R[f ] + O 1 \u221a N + 1 \u221a L 2B log 1 \u03b4\nTheoretically, the upper bound in Theorem 3 implies that randomized learner models with good training result and small output weights can probably lead to preferable generalization performance, in terms of probability perspective. However, this cannot be used directly to bound the practical test error for evaluating the randomized learner models's generalization performance. More numerical estimation for the test error (resulted from algorithm realization in practice) is required to better characterize the generalization capability as well as the associated impacting factors.\nAs one of our main contributions in this work, a novel upper bound estimation for the test error is presented in terms of computational perspective. To facilitate our theoretical investigation, we view the hidden layer matrix H as a matrix-valued function of matrix variable, i.e., H : R N \u00d7d \u2192 R N \u00d7L , denoted by (see [35] for basic fundamentals on matrix calculus)H := H(X) = \uf8eb \uf8ec \uf8ed g(w T 1 x 1 + b 1 ) \u2022 \u2022 \u2022 g(w T L x 1 + b L ) . . . \u2022 \u2022 \u2022 . . . g(w T 1 x N + b 1 ) \u2022 \u2022 \u2022 g(w T L x N + b L ) \uf8f6 \uf8f7 \uf8f8\n(10) with the argument X represented byX = (x 1 , x 2 , . . . , x N ) T = \uf8eb \uf8ec \uf8ed x 1,1 \u2022 \u2022 \u2022 x 1,d . . . \u2022 \u2022 \u2022 . . . x N,1 \u2022 \u2022 \u2022 x N,d \uf8f6 \uf8f7 \uf8f8 (11)\nSuppose that H is differentiable and has continuous first-order gradient \u2207H, defined by a quartix belongs to R N \u00d7L\u00d7N \u00d7d , i.e.,\u2207H(X) = \uf8eb \uf8ec \uf8ed \u2207H 1,1 (X) \u2022 \u2022 \u2022 \u2207H 1,L (X) . . . \u2022 \u2022 \u2022 . . . \u2207H N,1 (X) \u2022 \u2022 \u2022 \u2207H N,L (X) \uf8f6 \uf8f7 \uf8f8 ,\nwhere for i = 1, 2, . . . , N , j = 1, 2, . . . , L\u2207H i,j (X) = \uf8eb \uf8ec \uf8ec \uf8ec \uf8ed \u2202g(w T j xi+bj ) \u2202x1,1 \u2022 \u2022 \u2022 \u2202g(w T j xi+bj ) \u2202x 1,d . . . \u2022 \u2022 \u2022 . . . \u2202g(w T j xi+bj ) \u2202x N,1 \u2022 \u2022 \u2022 \u2202g(w T j xi+bj ) \u2202x N,d \uf8f6 \uf8f7 \uf8f7 \uf8f7 \uf8f8 .\nThen, the first directional derivative in a given direction Z \u2208 R N \u00d7d can be represented by\u2192Z d H(X) := \uf8eb \uf8ec \uf8ec \uf8ec \uf8ed tr \u2207H 1,1 (X) T Z \u2022 \u2022 \u2022 tr \u2207H 1,L (X) T Z . . . \u2022 \u2022 \u2022 . . . tr \u2207H N,1 (X) T Z \u2022 \u2022 \u2022 tr \u2207H N,L (X) T Z \uf8f6 \uf8f7 \uf8f7 \uf8f7 \uf8f8\nIt is logical to think that the test sample matrix X can be represented by imposing sufficiently small random noises into the training sample matrix X, i.e., X := X + Z, where Z \u2208 R N \u00d7L is a random matrix, is sufficiently small. Then, we can take the first-order Taylor series expansion about X ( [35]), i.e.,H( X) := H(X + Z) = H(X) + \u2192Z d H(X) + o( 2 )\nTherefore, the test error can be estimated byH( X)\u03b2 \u2212 Y F = (H(X) + \u2192Z d H(X) + o( 2 ))\u03b2 \u2212 Y F \u2264 H(X)\u03b2 \u2212 Y F + \u2192Z d H(X) F \u03b2 F +o( 2 ) \u03b2 F ()\nwhere \u2022 F stands for the Frobenius norm, H(X)\u03b2 \u2212 Y F represents the training error.\nBasically, this rough estimation implies two points that should be highlighted: (i) The upper bound for the test error can be viewed as an increasing function of \u03b2 F , which means that learner models with smaller output weight values are more prone to generalize preferably on unseen data. This is consistent with the philosophy behind the regularization learning framework, that is, imposing a penalty term to control the output weights magnitudes during the training process.\n(ii) We can further investigate how the input weights and biases affect the value of \u2192Z d H(X) F . In particular, we use sigmoid function in the following deduction, i.e., g(t) = 1/(1 + e \u2212t ) and g (t) = g(t)(1 \u2212 g(t)). Mathematically, the (i, j)-thelement (i = 1, 2, . . . , N , j = 1, 2, . . . , L) inside \u2192Z d H(X) can be expressed as tr \u2207H i,j (X) T Z := N i =1 d k =1 \u2202g(w T j x i + b j ) \u2202x i ,k Z i ,k = \u2212g(w T j x i + b j )(1 \u2212 g(w T j x i + b j )) d k=1 w j,k Z i,k .\nThen, a rough upper bound for\u2192Z d H(X) F can be obtained, that is, \u2192Z d H(X) F := N i=1 L j=1 tr \u2207H i,j (X) T Z 2 = N i=1 L j=1 (g ij (1 \u2212 g ij )) 2 ( d k=1 w j,k Z i,k ) 2 \u2264 N i=1 L j=1 (g ij (1 \u2212 g ij )) 2 ( d k=1 w 2 j,k )( d k=1 Z 2 i,k ) = N i=1 L j=1 (g ij (1 \u2212 g ij )) 2 w j 2 2 Z i 2 2 \u2264 max 1\u2264i\u2264N Z i 2 \u2022 H \u2022 (O \u2212 H) \u2022 \u1e84 F ,\nwhere we use abbreviation g ij for g(w T j x i + b j )), Cauchy-Schwarz inequality in the first inequality. Z i stands for the i-th row vector of the matrix Z. H is defined in (10), O \u2208 R N \u00d7L is a matrix of ones (every element is equal to one), and \u1e84 \u2208 R N \u00d7L is formulated by copying N -times of the row vector ( w 1 2 , w 2 2 , . . . , w L 2 ), '\u2022' stands for the Hadamard (entrywise) product among the matrixes.\nSo far, we can summarize the above theoretical result in the following Theorem 5. Readers can refer to some notations aforementioned in the context.\nTheorem 5. Given training input X \u2208 R N \u00d7d and output Y \u2208 R N \u00d7m , suppose a randomized neural network model with L hidden nodes is build, corresponding to the hidden layer output matrix (on the training data) H \u2208 R N \u00d7L , the output weight matrix \u03b2, and the training error H\u03b2 \u2212 Y F . Let X := X + Z be the test (unseen) input data matrix, where Z \u2208 R N \u00d7L is a random matrix, is sufficiently small, H stand for the associated hidden layer output matrix, then, the test error can be bounded byH\u03b2 \u2212Y F \u2264 H\u03b2 \u2212Y F + max 1\u2264i\u2264N Z i 2 \u2022 H \u2022(O\u2212H)\u2022 \u1e84 F \u03b2 F +o( 2 ) \u03b2 F . ()\nRemark 3. We would like to highlight a trick concerned in the previous deduction for Theorem 5. Indeed, we have considered to preserve the bundle of computational units '(g ij (1 \u2212 g ij )) 2 w j 2 2 ' rather than to roughly estimate the whole term by '( 1 4 ) 2 w j 2 2 ', which consequently can result in a very blunt bound 1  4 W F Z F for \u2192Z d H(X) F . Unfortunately, upper bound 1  4 W F Z F sounds meaningless because it does not consider the saturation property of sigmoid function, and may cause some misleading that 'larger input weights can destroy the generalization capability'. In contrast, our proposed upper bound ( 13) is nearly sharp and can provide valuable information to identify the role of input weights (and biases) and training samples on the learner models's generalization power. It is the bundle of computational units H \u2022 (O \u2212 H) \u2022 \u1e84 F rather than merely the W F that acts as a suitable indicator for predicting the generalization performance. Besides, it should be noted that, input weights (and biases) with small values but enforcing the g(\u2022) \u2248 1 or g(\u2022) \u2248 0 (corresponding to the saturation range of sigmoid function), are more likely to result in a small value of H \u2022 (O \u2212 H) \u2022 \u1e84 F and consequently bring a small generalization error bound.\nOn the other hand, the right side of Eq. ( 13) has a strong resemblance to the regularized learning target by viewingmax 1\u2264i\u2264N Z i 2 \u2022 H \u2022(O \u2212H)\u2022 \u1e84 F as the regularization factor \u03c3 > 0, that is, H\u03b2 \u2212Y F + \u03c3 \u03b2 F ,\nconsidered as a whole to effectively alleviate over-fitting.\nWhy 2D randomized models are equipped with more small weights? Since small weights to some extent can probably have certain positive influence on enhancing a learner model's generalization ability, one major issue still left unclarified is that whether or not 2D randomized learner models possess this advantage. For that purpose and before ending this section, we would like to provide a statistical verification on the frequency when sufficiently small weights occur in 1D and 2D randomized models, aiming to further support the superiority of 2D randomized models.\nGiven distribution P (either uniform or gaussian), we investigate the statistical differences among the following three strategies for randomly assign parameters:\u2022 M1: Randomly assign w = [w 1 , w 2 , . . . , w d ] T from P; \u2022 M2: Randomly assign z 1 = [z 1,1 , z 1,2 , . . . , z 1,d ] T , z 2 = [z 2,1 , z 2,2 , . . . , z 2,d ] T from P, then calculate their Hadamard (entrywise) product w (1D\u2212P ) = z 1 \u2022 z 2 ; \u2022 M3: Randomly assign u = [u 1 , u 2 , . . . , u d1 ] T , v = [v 1 , v 2 , . . . , v d2 ] T , with d 1 d 2 = d,\nthen calculate uv T and let w 2D := vec(uv T ). A simple and vivid demonstration for the distribution of the random weights induced by M1 and M3 is provided in Fig. 4, in which it can be clearly seen that w 2D have more small values (near zero) than w. Based on our empirical experience, similar plotting (display) between M2 and M3 looks visually indistinguishable. More statistical results are helpful for making a reasonable distinction among M1\u223cM3. Our primary objective is to find out how frequently can these strategies contribute to a high dimensional random vector (w, w (1D\u2212P ) , or w 2D ) with considerable amount of elements whose values are close to zero. Here we present a theoretical result for answering this question and then provide an empirical verification in statistics. Specifically, from a probability perspective, we conclude that M3 are more prone to get a random vector with more elements close to 0, as mathematically expressed byP \uf8eb \uf8ed # i |w 2D i | \u2264 d \u2265 p \uf8f6 \uf8f8 \u2265 P \uf8eb \uf8ed # i |w (1D\u2212P ) i | \u2264 d \u2265 p \uf8f6 \uf8f8 \u2265 P \uf8eb \uf8ed # i |w i | \u2264 d \u2265 p \uf8f6 \uf8f8 ,\nwhere is a small value close to 0, as a reference factor for locating small elements of the random vector. #{\u2022} stands for the cardinality, which of course is equal to the number of elements we are interested in counting, i.e, whose absolute values equal/lower than . On the other hand, p is a threshold by which we can study the normalized percentage (#{\u2022}/d \u2208 [0, 1]) when interested elements occur in that random vector (w, w (1D\u2212P ) , or w 2D ). Instead of making efforts to give a rigourous mathematical proof, here we focus on a empirical study to verify the inequalities (14) in statistics. In particular, we set d 1 = d 2 = 28, d = 784, p = 8%, 10%, 12%, 15%, = 0.01, 0.03, 0.05, 0.1, respectively, and study two options for P, i.e., uniform (Case 1) and gaussian distribution (Case 2), then run 100,000 independent numerical simulations to approximate those three probability values compared in (14), in terms of each set of (p, ) for both distribution cases. In the following, we give some theoretical description and the statistical results for Case 1 and 2. 2 ln(\u2212x), \u22121 \u2264 z < 0 In the simulation, we conduct 100,000 independent trials for randomly assigning w, w (1D\u2212P ) , and w 2D according to M1 M3, respectively. Later we can count the number of times (denoted by M ) when the condition #{\u2022}/d \u2265 p are satisfied, followed by roughly estimating the true probability in (14) with P = M/100000. In Table I, we list the corresponding P values (arranged in order w 2D /w (1D\u2212P ) /w) for the cases with different settings of (e.g., 0.001, 0.005, 0.01) and p (e.g., 8%, 10%, 12%, 15%), demonstrating that 2D models have more opportunities to have small input weights during the training process. = 0.001 = 0.005 = 0.01 p = 8% 0.0047 / 0 / 0 0.1338 / 2.0e-5 / 0 0.4022 / 0.2838 / 0 p = 10% 1.1e-4 / 0 / 0 0.0160 / 0 / 0 0.1131 / 0 / 0 p = 12% 3.0e-5 / 0 / 0 0.0045 / 0 / 0 0.0497 / 0 / 0 p = 15% 0 / 0 / 0 6.7e-4 / 0 / 0 0.0126 / 0 / 0 Case 2. Given two independent normal random variables z 1 \u223c N (0, \u03c3 2 1 ) and z 2 \u223c N (0, \u03c3 2 2 ), the probability density function (p.d.f) of their product z = z 1 z 2 can be expressed byp(x) := 1 \u03c0\u03c3 1 \u03c3 2 K 0 |x| \u03c3 1 \u03c3 2 , x \u2208 R,\nwhere K 0 (\u2022) is a modified Bessel function of the second kind of order zero [36], as given byK 0 (x) = \u221e 0 e \u2212x cosh(t) dt\nSimilarly, we present the associated P values for w 2D /w (1D\u2212P ) /w respectively in Table II, in which the records also show that 2D randomized models are more prone to be equipped with small weights. = 0.001 = 0.005 = 0.01 p = 8% 0.0011 / 0 / 0 0.0445 / 0 / 0 0.1781 / 4.6e-4 / 0 p = 10% 1.0e-5 / 0 / 0 0.0025 / 0 / 0 0.0248 / 0 / 0 p = 12% 0 / 0 / 0 3.8e-4 / 0 / 0 0.0071 / 0 / 0 p = 15% 0 / 0 / 0 2.0e-5 / 0 / 0 9.2e-4 / 0 / 0\n\nIV. PERFORMANCE EVALUATION\nIn this section, we demonstrate the advantages of 2DSCNs in image data modelling tasks, compared with some baseline/randomized learning methods including SCN, RVFL and 2DRVFL networks. Both regression and classification problems with image inputs are examined in the simulation. Datasets description, experimental setup, results and discussions are detailed for each task, as introduced in the following.\n\nA. Regression: Rotation Angles Predication for Handwritten Digits\nWe first demonstrate the merits of the proposed 2DSCN by predicting the angles of rotation of handwritten digits. In particular, Neural Network Toolbox in MATLAB R2017b provides a collection of synthetic handwritten digits, which contains 5000 training and 5000 test images of digits with corresponding angles of rotation. Each image represents a rotated digit in grayscale and of normalized size (28 \u00d7 28). For example, 16 random samples are displayed in Fig. 5 In particular, a user-defined threshold \u03b8 (in degrees) is needed to measure PPA values, that is, calculating the error between the predicted and actual angles of rotation and then counting the number of predictions within an acceptable error margin \u03b8 from the true angles. Mathematically, the PPA value within threshold \u03b8 can be obtained by P P A = #{|P rediction Error| < \u03b8} N umber of Sample Images . we plot the corresponding box-and-whisker diagram in Fig. 6. It is obvious that 2DSCN works much more favorably than 2DRVFL for almost each digit class as there are less records with abnormal degree error marked in red plus symbol. 2DSCN shows better stability on prediction for every digit as there are less errors outside the interval [\u221240, 40] than that of 2DRVFL. One can easily observe that this finding also corresponds what we have presented in Table III. In particular, the learner model produced by 2DRVFL is more prone to result in larger predictive errors (with absolute values close/higher than 50) for digit '4' and '7'. Obviously, 2DSCN can contribute to a slightly better rotation correction than SCN for each setting of the learner model architecture, while they both outperform RVFL and 2DRVFL.\n\nB. Classification: Handwritten Digits Recognition\nIn this part, we compare our proposed 2DSCN algorithm with the other three randomized approaches on image classification problem. Four benchmark handwritten digits databases are employed in the comparison. Parameter setting for these four algorithms (w, b, u, v, \u03bb, T max , r) are the same as the configuration used in the previous regression task. In particular, Bangla, Devnagari, and Oriya handwritten databases provided by the ISI (Indian Statistical Institute, Kolkata) 2, CVL usually used for pattern recognition competitions 3, are employed in our experimental study as a benchmark resource for optical character recognition. Readers can refer to our previous work [12] for more descriptions about these datasets.\nHere we summarize the basic information about these four databases in Table IV. It should be noted that all the images of these four databases have been converted to grayscale and normalized size (28\u00d728) by applying the similar preprocessing procedures used in MNIST database 4, that is, scaled to 20x20 by preserving the aspect ratio and then the centroid of the image is placed on the center of a standard plane of size 28x28. Some sample images are shown in Fig. 8. 1) Results and Discussion: Fig. 5 displays performance comparison for both training and test in terms of different setting of L, in which the mean and standard deviation values of recognition rate are based on 10 independent trials (More trails can indicate more convinced results but not necessary based on our experience, because the standard deviation values are relatively small and stable at certain level). It is apparent that 2DSCN outperforms the others while RVFL has the worst results in all these four datasets. Interestingly, the test results of 2DSCN are much better than that of SCN, even when their training recognition rate is relatively close. Similar finding can be noticed among the comparison between 2DRVFL and SCN. For example, for Bangla, Devnagari, and Oriya, 2DRVFL occasionally can result in slightly higher recognition rates in testing even the corresponding training recognition rate is lower/quite close to that of SCN. It becomes much more clear in the subplots for CVL dataset, i.e., 2DRVFL works more favorably than SCN but still worse than 2DSCN, which to some extent lends strong support for our theoretical investigation on the superiority of randomized learners with 2D inputs.\n\nC. Case Study: Human Face Recognition\nIn this section, we further demonstrate the advantage of 2DSCN over the other three randomized learner models on human face recognition tasks, where the input dimensionality is far more larger than that of the handwritten digit problems addressed before. Followed by a brief description of the used databases, we present the performance comparison for these four methods. Later, as a verification for Theorem 5, we calculate the corresponding test error upper bounds for the randomized models produced by those four algorithms, and visualize their differences for both datasets. In addition, we compare the capabilities of those four algorithms in dealing with training images corrupted by certain level of random noises, aiming to show their robustness in problem-solving. Generally, our experimental results can strongly support the superiority of 2DSCN algorithm on image data modelling problems.\n1) Databases: Two benchmark datasets for human face recognition problem are employed in our experiments, as we introduce in the following. ORL [37] : The Olivetti (ORL, now AT&T) database contains ten 112 \u00d7 92 pixel gray scale images of 40 distinct subjects (individuals). Among those subjects, some images were taken at different times, with various lighting conditions, different types of facial expressions (open/closed eyes, smiling/not smiling) and varying facial details (glasses/no glasses). Specifically, all the images were taken against a dark homogeneous background with the subjects in an upright, frontal position (with tolerance for some side movement).\nFERET [38] : The Facial Recognition Technology (FERET) database contains a total of 14,126 gray scale images for 1199 subjects, which were collected over several sessions spanning over three years. In particular, for some individuals, over two years had elapsed between their first and last sittings, with some subjects being photographed multiple times. In our experimental study, we choose 72 subjects with 6 frontal images of size 112 \u00d7 92 per person.\nFor these two databases, we randomly select half of the images for each subject as the training samples and the other half for test.\n2) Results and Discussion: In our experiments, we employ the same parameter setting for these four algorithms (see part A for details), and conduct the performance comparison\u0398 i = { H \u2022 (O \u2212 H) \u2022 \u1e84 F \u2022 \u03b2 F } i max{ H \u2022 (O \u2212 H) \u2022 \u1e84 F \u2022 \u03b2 F } 200 i=1 ,\nwhere the index i corresponds to the i-th record among the total 200 records.\nFig. 12 plots all these 200 records for the four algorithms (50 records for each), in which we can clearly observe that 2DSCN exhibits a lowest test error upper bound than the other three methods while RVFL has the highest results. Apparently and interestingly, this is consistent with their real test recognition rate comparison shown in Fig. 11, therefore, verify the effectiveness and practicability of our Theorem 5. Based on our experience, similar results can be obtained with the other option of L setting, and as such, learner models built by 2DSCN algorithm have the smallest predictive test error upper bound estimation. As for the space limitation, more statistical results and analysis are left for our future work. 3) Robustness Illustration: To further investigate the superiority of 2DSCN over the other methods, we randomly select 50 images from ORL training set and artificially simulate contiguous occlusion by replacing a randomly located square block of each chosen image with an unrelated image (e.g., Koala). 30 of these corrupted images are display in Fig. As can be seen in Fig. 14, 2DSCN still performs best in generalization, at the same time, RVFL has the lowest test recognition rates. This observation can to some extent imply that 2D models may still exhibit their merits for problemsolving of robust image data modelling, on the basis of their underlying advantages as shown throughout this paper. We expect more interesting work employing/extending the current 2DSCN framework to deal with robust image recognition tasks or similar applications in parallel. By saying that, we have to admit that the technical issue around is out of our main focus in this work and more interesting follow-up researches are desirable in the future.\nV. CONCLUSIONS This paper develops two dimensional stochastic configuration networks (2DSCNs), which extend the original SCN framework for data analytics with matrix inputs. Compared to existing randomized learning techniques, the proposed algorithm maintains all the advantages of the original learning techniques for SCNs, such as fast modelling, universal approximation property, and sound generalization power. Some associations and differences between 2DSCNs and SCNs are theoretically investigated and empirically justified. Our main technical contribution in this paper lies in an interpretation on reasons behind the improved generalization of 2DSCNs against the original SCNs for image data modelling. Compared to the performance obtained from SCNs, RVFLs and 2DRVFLs, we conclude that 2DSCNs outperform in terms of both learning and generalization, and have great potential for real world applications.\nThere are many interesting studies left for future work. For example, a trivial extension of the current 2DSCN to robust version can be realized by an immediate combination of this work and our previous research [13]. It is also important to point out that, while this work focuses on shallow neural networks, the framework and the associated theoretical analysis are generic and general enough to adopt the deep machinery, therefore, one can make efforts towards building a deep 2DSCN to maintain both the superiority of DeepSCN [14] and the advantages of 2DSCN. It is also of practical importance to employ the proposed 2DSCN in stream image data modelling. Other than than, it would be interesting to further enhance 2DSCN by considering the regularization learning framework, or refined stochastic configuration inequality with sparsity constrains.\n\nFootnotes:\n1: *In [34], a general form of cost function is concerned. Here we specify a quadratic loss function and its associated Lipschitz constant has no impacts on the final estimation.\n2: http://www.isical.ac.in/ ujjwal/download/database.html\n3: http://www.caa.tuwien.ac.at/cvl/category/research/cvl-databases/\n4: http://yann.lecun.com/exdb/mnist/\n\nReferences:\n\n- I. Goodfellow, Y. Bengio, and A. Courville, Deep Learning. MIT Press, 2016.- N. Qi, Y. Shi, X. Sun, J. Wang, and B. Yin, \"Two dimensional synthesis sparse model,\" in Proceedings of IEEE International Conference on Multimedia and Expo. IEEE, 2013, pp. 1-6.\n\n- N. Qi, Y. Shi, X. Sun, J. Wang, and W. Ding, \"Two dimensional analysis sparse model,\" in Proceedings of the 20th IEEE International Conference on Image Processing. IEEE, 2013, pp. 310-314.\n\n- N. Qi, Y. Shi, X. Sun, J. Wang, B. Yin, and J. Gao, \"Multi-dimensional sparse models,\" IEEE Transactions on Pattern Analysis and Machine Intelligence, vol. 40, no. 1, pp. 163-178, 2018.\n\n- Y. LeCun, L. Bottou, Y. Bengio, and P. Haffner, \"Gradient-based learning applied to document recognition,\" Proceedings of the IEEE, vol. 86, no. 11, pp. 2278-2324, 1998.\n\n- J. Gao, Y. Guo, and Z. Wang, \"Matrix neural networks,\" arXiv preprint arXiv:1601.03805, 2016.\n\n- D. E. Rumelhart, G. E. Hinton, and R. J. Williams, \"Learning internal representations by backpropagating errors,\" Nature, vol. 323, pp. 533- 536, 1986.\n\n- S. Liu, Y. Sun, Y. Hu, J. Gao, F. Ju, and B. Yin, \"Matrix variate RBM model with gaussian distributions,\" in Proceedings of International Joint Conference on Neural Networks. IEEE, 2017, pp. 808-815.\n\n- S. Scardapane and D. Wang, \"Randomness in neural networks: An overview,\" WIREs Data Mining and Knowledge Discovery, vol. e1200. doi: 10.1002/widm.1200, 2017.\n\n- Y. H. Pao, G. H. Park, and D. J. Sobajic, \"Learning and generalization characteristics of the random vector functional-link net,\" Neurocomput- ing, vol. 6, no. 2, pp. 163-180, 1994.\n\n- B. Igelnik and Y. H. Pao, \"Stochastic choice of basis functions in adaptive function approximation and the functional-link net,\" IEEE Transactions on Neural Networks, vol. 6, no. 6, pp. 1320-1329, 1995.\n\n- D. Wang and M. Li, \"Stochastic configuration networks: Fundamentals and algorithms,\" IEEE Transactions on Cybernetics, vol. 47, no. 10, pp. 3466-3479, 2017.\n\n- D. Wang and M. Li, \"Robust stochastic configuration networks with kernel density estimation for uncertain data regression,\" Information Sciences, vol. 412, pp. 210-222, 2017.\n\n- D. Wang and M. Li, \"Deep stochastic configuration networks with uni- versal approximation property,\" arXiv:1702.05639, to appear in IJCNN 2018.\n\n- J. Lu, J. Zhao, and F. Cao, \"Extended feed forward neural networks with random weights for face recognition,\" Neurocomputing, vol. 136, pp. 96-102, 2014.\n\n- L. Wan, M. Zeiler, S. Zhang, Y. Le Cun, and R. Fergus, \"Regularization of neural networks using dropconnect,\" in Proceedings of the 30th International Conference on Machine Learning, 2013, pp. 1058-1066.\n\n- A. N. Gorban, I. Y. Tyukin, D. V. Prokhorov, and K. I. Sofeikov, \"Ap- proximation with random bases: Pro et contra,\" Information Sciences, vol. 364, pp. 129-145, 2016.\n\n- M. Li and D. Wang, \"Insights into randomized algorithms for neural networks: Practical issues and common pitfalls,\" Information Sciences, vol. 382-383, pp. 170-178, 2016.\n\n- D. Wang and C. Cui, \"Stochastic configuration networks ensemble with heterogeneous features for large-scale data analytics,\" Information Sciences, vol. 417, pp. 55-71, 2017.\n\n- P. Lancaster and M. Tismenetsky, The Theory of Matrices: With Appli- cations. Elsevier, 1985.\n\n- P. Xie, H. Zhang, and E. P. Xing, \"Learning less-overlapping represen- tations,\" arXiv preprint arXiv:1711.09300, 2017.\n\n- P. Xie, Y. Deng, and E. Xing, \"On the generalization error bounds of neural networks under diversity-inducing mutual angular regularization,\" arXiv preprint arXiv:1511.07110, 2015.\n\n- P. Xie, Y. Deng, Y. Zhou, A. Kumar, Y. Yu, J. Zou, and E. P. Xing, \"Learning latent space models with angular constraints,\" in Proceedings of the 34th International Conference on Machine Learning, 2017, pp. 3799-3810.\n\n- G. E. Hinton, N. Srivastava, A. Krizhevsky, I. Sutskever, and R. R. Salakhutdinov, \"Improving neural networks by preventing co-adaptation of feature detectors,\" arXiv preprint arXiv:1207.0580, 2012.\n\n- N. Srivastava, G. Hinton, A. Krizhevsky, I. Sutskever, and R. Salakhut- dinov, \"Dropout: A simple way to prevent neural networks from overfit- ting,\" Journal of Machine Learning Research, vol. 15, no. 1, pp. 1929- 1958, 2014.\n\n- P. L. Bartlett, \"For valid generalization the size of the weights is more important than the size of the network,\" in Advances in Neural Information Processing Systems, 1997, pp. 134-140.\n\n- P. L. Bartlett, \"The sample complexity of pattern classification with neural networks: the size of the weights is more important than the size of the network,\" IEEE Transactions on Information Theory, vol. 44, no. 2, pp. 525-536, 1998.\n\n- P. L. Bartlett and S. Mendelson, \"Rademacher and gaussian complexi- ties: Risk bounds and structural results,\" Journal of Machine Learning Research, vol. 3, no. Nov, pp. 463-482, 2002.\n\n- K. Zhong, Z. Song, P. Jain, P. L. Bartlett, and I. S. Dhillon, \"Recov- ery guarantees for one-hidden-layer neural networks,\" arXiv preprint arXiv:1706.03175, 2017.\n\n- A. E. Hoerl and R. W. Kennard, \"Ridge regression: Biased estimation for nonorthogonal problems,\" Technometrics, vol. 12, no. 1, pp. 55-67, 1970.\n\n- T. Poggio, V. Torre, and C. Koch, \"Computational vision and regular- ization theory,\" Nature, vol. 317, no. 26, pp. 314-319, 1985.\n\n- R. Tibshirani, \"Regression shrinkage and selection via the lasso,\" Journal of the Royal Statistical Society. Series B (Methodological), pp. 267-288, 1996.\n\n- Q. V. Le, J. Ngiam, A. Coates, A. Lahiri, B. Prochnow, and A. Y. Ng, \"On optimization methods for deep learning,\" in Proceedings of the 28th International Conference on International Conference on Machine Learning. Omnipress, 2011, pp. 265-272.\n\n- A. Rahimi and B. Recht, \"Weighted sums of random kitchen sinks: Replacing minimization with randomization in learning,\" in Advances in Neural Information Processing Systems, 2009, pp. 1313-1320.\n\n- J. Dattorro, Convex Optimization & Euclidean Distance Geometry. Meboo Publishing, 2010.\n\n- M. Springer and W. Thompson, \"The distribution of products of Beta, Gamma and Gaussian random variables,\" SIAM Journal on Applied Mathematics, vol. 18, no. 4, pp. 721-737, 1970.\n\n- F. S. Samaria and A. C. Harter, \"Parameterisation of a stochastic model for human face identification,\" in Proceedings of the 2nd IEEE Workshop on Applications of Computer Vision. IEEE, 1994, pp. 138-142.\n\n- P. J. Phillips, H. Wechsler, J. Huang, and P. J. Rauss, \"The FERET database and evaluation procedure for face-recognition algorithms,\" Image and Vision Computing, vol. 16, no. 5, pp. 295-306, 1998.\n\n", "annotations": {"ReferenceToTable": [{"begin": 50466, "end": 50467, "target": "#tab_1", "idx": 0}, {"begin": 51440, "end": 51442, "target": "#tab_1", "idx": 1}, {"begin": 53604, "end": 53607, "target": "#tab_1", "idx": 2}, {"begin": 54806, "end": 54808, "target": "#tab_1", "idx": 3}], "ReferenceToFootnote": [{"begin": 40232, "end": 40233, "target": "#foot_0", "idx": 0}, {"begin": 54484, "end": 54485, "target": "#foot_1", "idx": 1}, {"begin": 54541, "end": 54542, "target": "#foot_2", "idx": 2}, {"begin": 55006, "end": 55007, "target": "#foot_3", "idx": 3}], "SectionMain": [{"begin": 1239, "end": 62466, "idx": 0}], "ReferenceToFormula": [{"begin": 15918, "end": 15919, "target": "#formula_11", "idx": 0}, {"begin": 22336, "end": 22337, "target": "#formula_16", "idx": 1}, {"begin": 22359, "end": 22360, "target": "#formula_18", "idx": 2}, {"begin": 27852, "end": 27854, "idx": 3}, {"begin": 45603, "end": 45604, "target": "#formula_3", "idx": 4}, {"begin": 45979, "end": 45981, "target": "#formula_44", "idx": 5}, {"begin": 46665, "end": 46667, "target": "#formula_44", "idx": 6}], "SectionReference": [{"begin": 62822, "end": 69434, "idx": 0}], "SectionHeader": [{"begin": 0, "end": 1239, "idx": 0}], "Div": [{"begin": 86, "end": 1231, "idx": 0}, {"begin": 1242, "end": 9236, "idx": 1}, {"begin": 9238, "end": 9962, "idx": 2}, {"begin": 9964, "end": 12898, "idx": 3}, {"begin": 12900, "end": 17275, "idx": 4}, {"begin": 17277, "end": 17828, "idx": 5}, {"begin": 17830, "end": 20227, "idx": 6}, {"begin": 20229, "end": 23073, "idx": 7}, {"begin": 23075, "end": 28678, "idx": 8}, {"begin": 28680, "end": 51779, "idx": 9}, {"begin": 51781, "end": 52212, "idx": 10}, {"begin": 52214, "end": 53957, "idx": 11}, {"begin": 53959, "end": 56412, "idx": 12}, {"begin": 56414, "end": 62466, "idx": 13}], "Head": [{"begin": 1242, "end": 1257, "idx": 0}, {"begin": 9238, "end": 9254, "idx": 1}, {"begin": 9964, "end": 9982, "idx": 2}, {"begin": 12900, "end": 12916, "idx": 3}, {"begin": 17277, "end": 17318, "idx": 4}, {"begin": 17830, "end": 17857, "idx": 5}, {"begin": 20229, "end": 20252, "idx": 6}, {"begin": 23075, "end": 23098, "idx": 7}, {"begin": 28680, "end": 28712, "idx": 8}, {"begin": 51781, "end": 51807, "idx": 9}, {"begin": 52214, "end": 52279, "idx": 10}, {"begin": 53959, "end": 54008, "idx": 11}, {"begin": 56414, "end": 56451, "idx": 12}], "Paragraph": [{"begin": 86, "end": 1231, "idx": 0}, {"begin": 1258, "end": 3018, "idx": 1}, {"begin": 3019, "end": 5176, "idx": 2}, {"begin": 5177, "end": 7342, "idx": 3}, {"begin": 7343, "end": 7590, "idx": 4}, {"begin": 7591, "end": 9236, "idx": 5}, {"begin": 9255, "end": 9962, "idx": 6}, {"begin": 9983, "end": 10465, "idx": 7}, {"begin": 10538, "end": 10586, "idx": 8}, {"begin": 10621, "end": 10684, "idx": 9}, {"begin": 10685, "end": 10762, "idx": 10}, {"begin": 10778, "end": 10783, "idx": 11}, {"begin": 11030, "end": 12898, "idx": 12}, {"begin": 12917, "end": 13430, "idx": 13}, {"begin": 13431, "end": 13725, "idx": 14}, {"begin": 13762, "end": 13886, "idx": 15}, {"begin": 13938, "end": 14066, "idx": 16}, {"begin": 14067, "end": 14311, "idx": 17}, {"begin": 14514, "end": 14886, "idx": 18}, {"begin": 14887, "end": 15117, "idx": 19}, {"begin": 15190, "end": 15274, "idx": 20}, {"begin": 15327, "end": 15366, "idx": 21}, {"begin": 15425, "end": 15487, "idx": 22}, {"begin": 15522, "end": 15709, "idx": 23}, {"begin": 15710, "end": 17275, "idx": 24}, {"begin": 17319, "end": 17828, "idx": 25}, {"begin": 17858, "end": 18076, "idx": 26}, {"begin": 18151, "end": 18424, "idx": 27}, {"begin": 18470, "end": 18795, "idx": 28}, {"begin": 18796, "end": 18956, "idx": 29}, {"begin": 19162, "end": 19455, "idx": 30}, {"begin": 19610, "end": 19681, "idx": 31}, {"begin": 19744, "end": 19976, "idx": 32}, {"begin": 20010, "end": 20090, "idx": 33}, {"begin": 20131, "end": 20227, "idx": 34}, {"begin": 20253, "end": 20659, "idx": 35}, {"begin": 20661, "end": 21688, "idx": 36}, {"begin": 21834, "end": 22053, "idx": 37}, {"begin": 22313, "end": 22871, "idx": 38}, {"begin": 23099, "end": 23673, "idx": 39}, {"begin": 23746, "end": 24198, "idx": 40}, {"begin": 24199, "end": 24936, "idx": 41}, {"begin": 24937, "end": 25309, "idx": 42}, {"begin": 25310, "end": 26143, "idx": 43}, {"begin": 26144, "end": 27065, "idx": 44}, {"begin": 27066, "end": 27838, "idx": 45}, {"begin": 27839, "end": 28485, "idx": 46}, {"begin": 28486, "end": 28678, "idx": 47}, {"begin": 28713, "end": 29196, "idx": 48}, {"begin": 29197, "end": 30039, "idx": 49}, {"begin": 30085, "end": 30212, "idx": 50}, {"begin": 30213, "end": 30564, "idx": 51}, {"begin": 30565, "end": 31482, "idx": 52}, {"begin": 31483, "end": 32527, "idx": 53}, {"begin": 32528, "end": 32555, "idx": 54}, {"begin": 32642, "end": 32678, "idx": 55}, {"begin": 32699, "end": 32891, "idx": 56}, {"begin": 33091, "end": 33493, "idx": 57}, {"begin": 33494, "end": 33646, "idx": 58}, {"begin": 33859, "end": 34041, "idx": 59}, {"begin": 34042, "end": 34250, "idx": 60}, {"begin": 34315, "end": 35868, "idx": 61}, {"begin": 35869, "end": 37129, "idx": 62}, {"begin": 37130, "end": 37239, "idx": 63}, {"begin": 37240, "end": 37833, "idx": 64}, {"begin": 37834, "end": 38432, "idx": 65}, {"begin": 38433, "end": 39291, "idx": 66}, {"begin": 39292, "end": 40233, "idx": 67}, {"begin": 40292, "end": 40401, "idx": 68}, {"begin": 40455, "end": 41037, "idx": 69}, {"begin": 41038, "end": 41405, "idx": 70}, {"begin": 41539, "end": 41578, "idx": 71}, {"begin": 41684, "end": 41812, "idx": 72}, {"begin": 41908, "end": 41959, "idx": 73}, {"begin": 42119, "end": 42211, "idx": 74}, {"begin": 42346, "end": 42656, "idx": 75}, {"begin": 42702, "end": 42747, "idx": 76}, {"begin": 42844, "end": 42927, "idx": 77}, {"begin": 42928, "end": 43405, "idx": 78}, {"begin": 43406, "end": 43656, "idx": 79}, {"begin": 43884, "end": 43913, "idx": 80}, {"begin": 44218, "end": 44633, "idx": 81}, {"begin": 44634, "end": 44782, "idx": 82}, {"begin": 44783, "end": 45276, "idx": 83}, {"begin": 45349, "end": 46621, "idx": 84}, {"begin": 46622, "end": 46739, "idx": 85}, {"begin": 46835, "end": 46895, "idx": 86}, {"begin": 46896, "end": 47463, "idx": 87}, {"begin": 47464, "end": 47626, "idx": 88}, {"begin": 47989, "end": 48945, "idx": 89}, {"begin": 49049, "end": 51181, "idx": 90}, {"begin": 51225, "end": 51319, "idx": 91}, {"begin": 51349, "end": 51779, "idx": 92}, {"begin": 51808, "end": 52212, "idx": 93}, {"begin": 52280, "end": 53957, "idx": 94}, {"begin": 54009, "end": 54729, "idx": 95}, {"begin": 54730, "end": 56412, "idx": 96}, {"begin": 56452, "end": 57351, "idx": 97}, {"begin": 57352, "end": 58019, "idx": 98}, {"begin": 58020, "end": 58474, "idx": 99}, {"begin": 58475, "end": 58607, "idx": 100}, {"begin": 58608, "end": 58782, "idx": 101}, {"begin": 58859, "end": 58936, "idx": 102}, {"begin": 58937, "end": 60700, "idx": 103}, {"begin": 60701, "end": 61613, "idx": 104}, {"begin": 61614, "end": 62466, "idx": 105}], "ReferenceToBib": [{"begin": 1459, "end": 1462, "target": "#b0", "idx": 0}, {"begin": 1669, "end": 1672, "target": "#b1", "idx": 1}, {"begin": 1675, "end": 1678, "target": "#b3", "idx": 2}, {"begin": 2236, "end": 2239, "target": "#b4", "idx": 3}, {"begin": 2408, "end": 2411, "target": "#b5", "idx": 4}, {"begin": 2545, "end": 2548, "target": "#b6", "idx": 5}, {"begin": 2635, "end": 2638, "target": "#b5", "idx": 6}, {"begin": 2663, "end": 2666, "target": "#b7", "idx": 7}, {"begin": 3173, "end": 3176, "target": "#b8", "idx": 8}, {"begin": 3266, "end": 3270, "target": "#b9", "idx": 9}, {"begin": 3272, "end": 3276, "target": "#b10", "idx": 10}, {"begin": 3340, "end": 3344, "target": "#b11", "idx": 11}, {"begin": 4173, "end": 4177, "target": "#b11", "idx": 12}, {"begin": 4258, "end": 4262, "target": "#b12", "idx": 13}, {"begin": 4264, "end": 4268, "target": "#b13", "idx": 14}, {"begin": 4816, "end": 4820, "target": "#b14", "idx": 15}, {"begin": 5261, "end": 5265, "target": "#b11", "idx": 16}, {"begin": 6595, "end": 6599, "target": "#b15", "idx": 17}, {"begin": 10050, "end": 10054, "target": "#b14", "idx": 18}, {"begin": 11556, "end": 11560, "target": "#b10", "idx": 19}, {"begin": 11820, "end": 11824, "target": "#b16", "idx": 20}, {"begin": 12626, "end": 12630, "target": "#b17", "idx": 21}, {"begin": 12933, "end": 12937, "target": "#b11", "idx": 22}, {"begin": 13347, "end": 13351, "target": "#b11", "idx": 23}, {"begin": 14881, "end": 14885, "target": "#b11", "idx": 24}, {"begin": 16499, "end": 16503, "target": "#b18", "idx": 25}, {"begin": 16627, "end": 16631, "target": "#b13", "idx": 26}, {"begin": 17025, "end": 17029, "target": "#b12", "idx": 27}, {"begin": 20184, "end": 20188, "target": "#b19", "idx": 28}, {"begin": 20407, "end": 20411, "target": "#b11", "idx": 29}, {"begin": 26709, "end": 26712, "target": "#b4", "idx": 30}, {"begin": 29481, "end": 29485, "target": "#b20", "idx": 31}, {"begin": 29920, "end": 29924, "target": "#b20", "idx": 32}, {"begin": 30559, "end": 30563, "target": "#b20", "idx": 33}, {"begin": 31558, "end": 31562, "target": "#b21", "idx": 34}, {"begin": 31564, "end": 31568, "target": "#b22", "idx": 35}, {"begin": 32430, "end": 32434, "target": "#b22", "idx": 36}, {"begin": 33504, "end": 33508, "target": "#b22", "idx": 37}, {"begin": 34052, "end": 34056, "target": "#b22", "idx": 38}, {"begin": 34918, "end": 34922, "target": "#b17", "idx": 39}, {"begin": 36174, "end": 36178, "target": "#b23", "idx": 40}, {"begin": 36180, "end": 36184, "target": "#b24", "idx": 41}, {"begin": 36221, "end": 36225, "target": "#b15", "idx": 42}, {"begin": 36833, "end": 36837, "target": "#b15", "idx": 43}, {"begin": 38600, "end": 38604, "target": "#b25", "idx": 44}, {"begin": 38607, "end": 38611, "target": "#b28", "idx": 45}, {"begin": 39158, "end": 39162, "target": "#b29", "idx": 46}, {"begin": 39164, "end": 39168, "target": "#b30", "idx": 47}, {"begin": 39176, "end": 39180, "target": "#b31", "idx": 48}, {"begin": 39223, "end": 39227, "target": "#b32", "idx": 49}, {"begin": 39494, "end": 39498, "target": "#b33", "idx": 50}, {"begin": 39785, "end": 39789, "target": "#b33", "idx": 51}, {"begin": 41358, "end": 41362, "target": "#b34", "idx": 52}, {"begin": 42644, "end": 42648, "target": "#b34", "idx": 53}, {"begin": 44394, "end": 44398, "target": "#b9", "idx": 54}, {"begin": 49627, "end": 49631, "target": "#b13", "idx": 55}, {"begin": 49953, "end": 49957, "target": "#b13", "idx": 56}, {"begin": 50433, "end": 50437, "target": "#b13", "idx": 57}, {"begin": 51302, "end": 51306, "target": "#b35", "idx": 58}, {"begin": 53483, "end": 53492, "idx": 59}, {"begin": 54681, "end": 54685, "target": "#b11", "idx": 60}, {"begin": 57495, "end": 57499, "target": "#b36", "idx": 61}, {"begin": 58026, "end": 58030, "target": "#b37", "idx": 62}, {"begin": 61826, "end": 61830, "target": "#b12", "idx": 63}, {"begin": 62144, "end": 62148, "target": "#b13", "idx": 64}, {"begin": 62486, "end": 62490, "target": "#b33", "idx": 65}], "ReferenceString": [{"begin": 62837, "end": 62912, "id": "b0", "idx": 0}, {"begin": 62914, "end": 63092, "id": "b1", "idx": 1}, {"begin": 63096, "end": 63284, "id": "b2", "idx": 2}, {"begin": 63288, "end": 63473, "id": "b3", "idx": 3}, {"begin": 63477, "end": 63646, "id": "b4", "idx": 4}, {"begin": 63650, "end": 63743, "id": "b5", "idx": 5}, {"begin": 63747, "end": 63898, "id": "b6", "idx": 6}, {"begin": 63902, "end": 64101, "id": "b7", "idx": 7}, {"begin": 64105, "end": 64262, "id": "b8", "idx": 8}, {"begin": 64266, "end": 64447, "id": "b9", "idx": 9}, {"begin": 64451, "end": 64653, "id": "b10", "idx": 10}, {"begin": 64657, "end": 64813, "id": "b11", "idx": 11}, {"begin": 64817, "end": 64991, "id": "b12", "idx": 12}, {"begin": 64995, "end": 65138, "id": "b13", "idx": 13}, {"begin": 65142, "end": 65295, "id": "b14", "idx": 14}, {"begin": 65299, "end": 65502, "id": "b15", "idx": 15}, {"begin": 65506, "end": 65673, "id": "b16", "idx": 16}, {"begin": 65677, "end": 65847, "id": "b17", "idx": 17}, {"begin": 65851, "end": 66024, "id": "b18", "idx": 18}, {"begin": 66028, "end": 66121, "id": "b19", "idx": 19}, {"begin": 66125, "end": 66244, "id": "b20", "idx": 20}, {"begin": 66248, "end": 66428, "id": "b21", "idx": 21}, {"begin": 66432, "end": 66649, "id": "b22", "idx": 22}, {"begin": 66653, "end": 66851, "id": "b23", "idx": 23}, {"begin": 66855, "end": 67080, "id": "b24", "idx": 24}, {"begin": 67084, "end": 67271, "id": "b25", "idx": 25}, {"begin": 67275, "end": 67510, "id": "b26", "idx": 26}, {"begin": 67514, "end": 67698, "id": "b27", "idx": 27}, {"begin": 67702, "end": 67865, "id": "b28", "idx": 28}, {"begin": 67869, "end": 68013, "id": "b29", "idx": 29}, {"begin": 68017, "end": 68147, "id": "b30", "idx": 30}, {"begin": 68151, "end": 68305, "id": "b31", "idx": 31}, {"begin": 68309, "end": 68553, "id": "b32", "idx": 32}, {"begin": 68557, "end": 68751, "id": "b33", "idx": 33}, {"begin": 68755, "end": 68842, "id": "b34", "idx": 34}, {"begin": 68846, "end": 69023, "id": "b35", "idx": 35}, {"begin": 69027, "end": 69231, "id": "b36", "idx": 36}, {"begin": 69235, "end": 69432, "id": "b37", "idx": 37}], "Sentence": [{"begin": 86, "end": 290, "idx": 0}, {"begin": 291, "end": 517, "idx": 1}, {"begin": 518, "end": 683, "idx": 2}, {"begin": 684, "end": 820, "idx": 3}, {"begin": 821, "end": 996, "idx": 4}, {"begin": 997, "end": 1231, "idx": 5}, {"begin": 1258, "end": 1463, "idx": 6}, {"begin": 1464, "end": 1679, "idx": 7}, {"begin": 1680, "end": 2005, "idx": 8}, {"begin": 2006, "end": 2404, "idx": 9}, {"begin": 2405, "end": 2613, "idx": 10}, {"begin": 2614, "end": 2730, "idx": 11}, {"begin": 2731, "end": 2875, "idx": 12}, {"begin": 2876, "end": 3018, "idx": 13}, {"begin": 3019, "end": 3177, "idx": 14}, {"begin": 3178, "end": 3402, "idx": 15}, {"begin": 3403, "end": 3624, "idx": 16}, {"begin": 3625, "end": 3839, "idx": 17}, {"begin": 3840, "end": 4014, "idx": 18}, {"begin": 4015, "end": 4178, "idx": 19}, {"begin": 4179, "end": 4227, "idx": 20}, {"begin": 4228, "end": 4378, "idx": 21}, {"begin": 4379, "end": 4592, "idx": 22}, {"begin": 4593, "end": 4656, "idx": 23}, {"begin": 4657, "end": 4804, "idx": 24}, {"begin": 4805, "end": 4994, "idx": 25}, {"begin": 4995, "end": 5176, "idx": 26}, {"begin": 5177, "end": 5381, "idx": 27}, {"begin": 5382, "end": 5553, "idx": 28}, {"begin": 5554, "end": 5772, "idx": 29}, {"begin": 5773, "end": 6058, "idx": 30}, {"begin": 6059, "end": 6234, "idx": 31}, {"begin": 6235, "end": 6485, "idx": 32}, {"begin": 6486, "end": 6641, "idx": 33}, {"begin": 6642, "end": 6941, "idx": 34}, {"begin": 6942, "end": 7176, "idx": 35}, {"begin": 7177, "end": 7277, "idx": 36}, {"begin": 7278, "end": 7342, "idx": 37}, {"begin": 7343, "end": 7590, "idx": 38}, {"begin": 7591, "end": 7812, "idx": 39}, {"begin": 7813, "end": 8180, "idx": 40}, {"begin": 8181, "end": 8455, "idx": 41}, {"begin": 8456, "end": 8629, "idx": 42}, {"begin": 8630, "end": 8682, "idx": 43}, {"begin": 8683, "end": 8815, "idx": 44}, {"begin": 8816, "end": 9055, "idx": 45}, {"begin": 9056, "end": 9236, "idx": 46}, {"begin": 9255, "end": 9362, "idx": 47}, {"begin": 9363, "end": 9739, "idx": 48}, {"begin": 9740, "end": 9962, "idx": 49}, {"begin": 9983, "end": 10055, "idx": 50}, {"begin": 10056, "end": 10266, "idx": 51}, {"begin": 10267, "end": 10379, "idx": 52}, {"begin": 10380, "end": 10465, "idx": 53}, {"begin": 10538, "end": 10586, "idx": 54}, {"begin": 10621, "end": 10651, "idx": 55}, {"begin": 10652, "end": 10684, "idx": 56}, {"begin": 10685, "end": 10762, "idx": 57}, {"begin": 10778, "end": 10783, "idx": 58}, {"begin": 11030, "end": 11124, "idx": 59}, {"begin": 11125, "end": 11134, "idx": 60}, {"begin": 11135, "end": 11320, "idx": 61}, {"begin": 11321, "end": 11561, "idx": 62}, {"begin": 11562, "end": 11825, "idx": 63}, {"begin": 11826, "end": 11984, "idx": 64}, {"begin": 11985, "end": 12233, "idx": 65}, {"begin": 12234, "end": 12474, "idx": 66}, {"begin": 12475, "end": 12631, "idx": 67}, {"begin": 12632, "end": 12898, "idx": 68}, {"begin": 12917, "end": 13038, "idx": 69}, {"begin": 13039, "end": 13265, "idx": 70}, {"begin": 13266, "end": 13352, "idx": 71}, {"begin": 13353, "end": 13430, "idx": 72}, {"begin": 13431, "end": 13655, "idx": 73}, {"begin": 13656, "end": 13725, "idx": 74}, {"begin": 13762, "end": 13821, "idx": 75}, {"begin": 13822, "end": 13886, "idx": 76}, {"begin": 13938, "end": 14066, "idx": 77}, {"begin": 14067, "end": 14176, "idx": 78}, {"begin": 14177, "end": 14311, "idx": 79}, {"begin": 14514, "end": 14771, "idx": 80}, {"begin": 14772, "end": 14886, "idx": 81}, {"begin": 14887, "end": 14985, "idx": 82}, {"begin": 14986, "end": 15103, "idx": 83}, {"begin": 15104, "end": 15117, "idx": 84}, {"begin": 15190, "end": 15274, "idx": 85}, {"begin": 15327, "end": 15366, "idx": 86}, {"begin": 15425, "end": 15487, "idx": 87}, {"begin": 15522, "end": 15656, "idx": 88}, {"begin": 15657, "end": 15709, "idx": 89}, {"begin": 15710, "end": 16015, "idx": 90}, {"begin": 16016, "end": 16125, "idx": 91}, {"begin": 16126, "end": 16334, "idx": 92}, {"begin": 16335, "end": 16420, "idx": 93}, {"begin": 16421, "end": 16495, "idx": 94}, {"begin": 16496, "end": 16623, "idx": 95}, {"begin": 16624, "end": 16761, "idx": 96}, {"begin": 16762, "end": 17013, "idx": 97}, {"begin": 17014, "end": 17096, "idx": 98}, {"begin": 17097, "end": 17275, "idx": 99}, {"begin": 17319, "end": 17415, "idx": 100}, {"begin": 17416, "end": 17591, "idx": 101}, {"begin": 17592, "end": 17678, "idx": 102}, {"begin": 17679, "end": 17828, "idx": 103}, {"begin": 17858, "end": 17948, "idx": 104}, {"begin": 17949, "end": 18076, "idx": 105}, {"begin": 18151, "end": 18345, "idx": 106}, {"begin": 18346, "end": 18381, "idx": 107}, {"begin": 18382, "end": 18424, "idx": 108}, {"begin": 18470, "end": 18748, "idx": 109}, {"begin": 18749, "end": 18795, "idx": 110}, {"begin": 18796, "end": 18865, "idx": 111}, {"begin": 18866, "end": 18941, "idx": 112}, {"begin": 18942, "end": 18956, "idx": 113}, {"begin": 19162, "end": 19297, "idx": 114}, {"begin": 19298, "end": 19342, "idx": 115}, {"begin": 19343, "end": 19347, "idx": 116}, {"begin": 19348, "end": 19394, "idx": 117}, {"begin": 19395, "end": 19455, "idx": 118}, {"begin": 19610, "end": 19681, "idx": 119}, {"begin": 19744, "end": 19976, "idx": 120}, {"begin": 20010, "end": 20090, "idx": 121}, {"begin": 20131, "end": 20227, "idx": 122}, {"begin": 20253, "end": 20362, "idx": 123}, {"begin": 20363, "end": 20566, "idx": 124}, {"begin": 20567, "end": 20659, "idx": 125}, {"begin": 20661, "end": 20684, "idx": 126}, {"begin": 20685, "end": 20853, "idx": 127}, {"begin": 20854, "end": 21080, "idx": 128}, {"begin": 21081, "end": 21191, "idx": 129}, {"begin": 21192, "end": 21415, "idx": 130}, {"begin": 21416, "end": 21647, "idx": 131}, {"begin": 21648, "end": 21688, "idx": 132}, {"begin": 21834, "end": 21990, "idx": 133}, {"begin": 21991, "end": 22021, "idx": 134}, {"begin": 22022, "end": 22053, "idx": 135}, {"begin": 22313, "end": 22425, "idx": 136}, {"begin": 22426, "end": 22593, "idx": 137}, {"begin": 22594, "end": 22798, "idx": 138}, {"begin": 22799, "end": 22871, "idx": 139}, {"begin": 23099, "end": 23320, "idx": 140}, {"begin": 23321, "end": 23524, "idx": 141}, {"begin": 23525, "end": 23642, "idx": 142}, {"begin": 23643, "end": 23673, "idx": 143}, {"begin": 23746, "end": 23862, "idx": 144}, {"begin": 23863, "end": 24198, "idx": 145}, {"begin": 24199, "end": 24339, "idx": 146}, {"begin": 24340, "end": 24421, "idx": 147}, {"begin": 24422, "end": 24458, "idx": 148}, {"begin": 24459, "end": 24512, "idx": 149}, {"begin": 24513, "end": 24646, "idx": 150}, {"begin": 24647, "end": 24802, "idx": 151}, {"begin": 24803, "end": 24936, "idx": 152}, {"begin": 24937, "end": 25170, "idx": 153}, {"begin": 25171, "end": 25309, "idx": 154}, {"begin": 25310, "end": 25567, "idx": 155}, {"begin": 25568, "end": 25729, "idx": 156}, {"begin": 25730, "end": 25967, "idx": 157}, {"begin": 25968, "end": 26143, "idx": 158}, {"begin": 26144, "end": 26552, "idx": 159}, {"begin": 26553, "end": 26819, "idx": 160}, {"begin": 26820, "end": 26936, "idx": 161}, {"begin": 26937, "end": 27065, "idx": 162}, {"begin": 27066, "end": 27376, "idx": 163}, {"begin": 27377, "end": 27593, "idx": 164}, {"begin": 27594, "end": 27750, "idx": 165}, {"begin": 27751, "end": 27838, "idx": 166}, {"begin": 27839, "end": 27977, "idx": 167}, {"begin": 27978, "end": 28075, "idx": 168}, {"begin": 28076, "end": 28331, "idx": 169}, {"begin": 28332, "end": 28345, "idx": 170}, {"begin": 28346, "end": 28485, "idx": 171}, {"begin": 28486, "end": 28587, "idx": 172}, {"begin": 28588, "end": 28678, "idx": 173}, {"begin": 28713, "end": 28856, "idx": 174}, {"begin": 28857, "end": 29092, "idx": 175}, {"begin": 29093, "end": 29196, "idx": 176}, {"begin": 29197, "end": 29244, "idx": 177}, {"begin": 29245, "end": 29477, "idx": 178}, {"begin": 29478, "end": 29629, "idx": 179}, {"begin": 29630, "end": 29850, "idx": 180}, {"begin": 29851, "end": 30039, "idx": 181}, {"begin": 30085, "end": 30212, "idx": 182}, {"begin": 30213, "end": 30422, "idx": 183}, {"begin": 30423, "end": 30564, "idx": 184}, {"begin": 30565, "end": 30980, "idx": 185}, {"begin": 30981, "end": 31237, "idx": 186}, {"begin": 31238, "end": 31482, "idx": 187}, {"begin": 31483, "end": 31546, "idx": 188}, {"begin": 31547, "end": 31747, "idx": 189}, {"begin": 31748, "end": 32002, "idx": 190}, {"begin": 32003, "end": 32268, "idx": 191}, {"begin": 32269, "end": 32435, "idx": 192}, {"begin": 32436, "end": 32527, "idx": 193}, {"begin": 32528, "end": 32555, "idx": 194}, {"begin": 32642, "end": 32678, "idx": 195}, {"begin": 32699, "end": 32734, "idx": 196}, {"begin": 32735, "end": 32839, "idx": 197}, {"begin": 32840, "end": 32891, "idx": 198}, {"begin": 33091, "end": 33177, "idx": 199}, {"begin": 33178, "end": 33398, "idx": 200}, {"begin": 33399, "end": 33493, "idx": 201}, {"begin": 33494, "end": 33528, "idx": 202}, {"begin": 33529, "end": 33646, "idx": 203}, {"begin": 33859, "end": 33915, "idx": 204}, {"begin": 33916, "end": 34041, "idx": 205}, {"begin": 34042, "end": 34079, "idx": 206}, {"begin": 34080, "end": 34250, "idx": 207}, {"begin": 34315, "end": 34662, "idx": 208}, {"begin": 34663, "end": 34880, "idx": 209}, {"begin": 34881, "end": 35078, "idx": 210}, {"begin": 35079, "end": 35265, "idx": 211}, {"begin": 35266, "end": 35444, "idx": 212}, {"begin": 35445, "end": 35616, "idx": 213}, {"begin": 35617, "end": 35770, "idx": 214}, {"begin": 35771, "end": 35868, "idx": 215}, {"begin": 35869, "end": 35934, "idx": 216}, {"begin": 35935, "end": 36185, "idx": 217}, {"begin": 36186, "end": 36349, "idx": 218}, {"begin": 36350, "end": 36645, "idx": 219}, {"begin": 36646, "end": 36807, "idx": 220}, {"begin": 36808, "end": 37129, "idx": 221}, {"begin": 37130, "end": 37239, "idx": 222}, {"begin": 37240, "end": 37833, "idx": 223}, {"begin": 37834, "end": 38028, "idx": 224}, {"begin": 38029, "end": 38248, "idx": 225}, {"begin": 38249, "end": 38432, "idx": 226}, {"begin": 38433, "end": 38469, "idx": 227}, {"begin": 38470, "end": 38612, "idx": 228}, {"begin": 38613, "end": 38730, "idx": 229}, {"begin": 38731, "end": 38846, "idx": 230}, {"begin": 38847, "end": 39035, "idx": 231}, {"begin": 39036, "end": 39291, "idx": 232}, {"begin": 39292, "end": 39437, "idx": 233}, {"begin": 39438, "end": 39619, "idx": 234}, {"begin": 39620, "end": 39790, "idx": 235}, {"begin": 39791, "end": 40149, "idx": 236}, {"begin": 40150, "end": 40233, "idx": 237}, {"begin": 40292, "end": 40401, "idx": 238}, {"begin": 40455, "end": 40685, "idx": 239}, {"begin": 40686, "end": 40832, "idx": 240}, {"begin": 40833, "end": 41037, "idx": 241}, {"begin": 41038, "end": 41186, "idx": 242}, {"begin": 41187, "end": 41405, "idx": 243}, {"begin": 41539, "end": 41578, "idx": 244}, {"begin": 41684, "end": 41812, "idx": 245}, {"begin": 41908, "end": 41933, "idx": 246}, {"begin": 41934, "end": 41955, "idx": 247}, {"begin": 41956, "end": 41959, "idx": 248}, {"begin": 42119, "end": 42211, "idx": 249}, {"begin": 42346, "end": 42575, "idx": 250}, {"begin": 42576, "end": 42656, "idx": 251}, {"begin": 42702, "end": 42747, "idx": 252}, {"begin": 42844, "end": 42927, "idx": 253}, {"begin": 42928, "end": 43217, "idx": 254}, {"begin": 43218, "end": 43405, "idx": 255}, {"begin": 43406, "end": 43504, "idx": 256}, {"begin": 43505, "end": 43626, "idx": 257}, {"begin": 43627, "end": 43656, "idx": 258}, {"begin": 43884, "end": 43913, "idx": 259}, {"begin": 44218, "end": 44325, "idx": 260}, {"begin": 44326, "end": 44554, "idx": 261}, {"begin": 44555, "end": 44633, "idx": 262}, {"begin": 44634, "end": 44782, "idx": 263}, {"begin": 44783, "end": 45067, "idx": 264}, {"begin": 45068, "end": 45276, "idx": 265}, {"begin": 45349, "end": 45704, "idx": 266}, {"begin": 45705, "end": 45938, "idx": 267}, {"begin": 45939, "end": 46153, "idx": 268}, {"begin": 46154, "end": 46319, "idx": 269}, {"begin": 46320, "end": 46621, "idx": 270}, {"begin": 46622, "end": 46739, "idx": 271}, {"begin": 46835, "end": 46895, "idx": 272}, {"begin": 46896, "end": 46958, "idx": 273}, {"begin": 46959, "end": 47208, "idx": 274}, {"begin": 47209, "end": 47463, "idx": 275}, {"begin": 47464, "end": 47626, "idx": 276}, {"begin": 47989, "end": 48036, "idx": 277}, {"begin": 48037, "end": 48241, "idx": 278}, {"begin": 48242, "end": 48355, "idx": 279}, {"begin": 48356, "end": 48441, "idx": 280}, {"begin": 48442, "end": 48656, "idx": 281}, {"begin": 48657, "end": 48779, "idx": 282}, {"begin": 48780, "end": 48945, "idx": 283}, {"begin": 49049, "end": 49155, "idx": 284}, {"begin": 49156, "end": 49316, "idx": 285}, {"begin": 49317, "end": 49498, "idx": 286}, {"begin": 49499, "end": 49646, "idx": 287}, {"begin": 49647, "end": 50017, "idx": 288}, {"begin": 50018, "end": 50277, "idx": 289}, {"begin": 50278, "end": 50456, "idx": 290}, {"begin": 50457, "end": 50753, "idx": 291}, {"begin": 50754, "end": 51181, "idx": 292}, {"begin": 51225, "end": 51319, "idx": 293}, {"begin": 51349, "end": 51550, "idx": 294}, {"begin": 51551, "end": 51779, "idx": 295}, {"begin": 51808, "end": 51992, "idx": 296}, {"begin": 51993, "end": 52086, "idx": 297}, {"begin": 52087, "end": 52212, "idx": 298}, {"begin": 52280, "end": 52393, "idx": 299}, {"begin": 52394, "end": 52602, "idx": 300}, {"begin": 52603, "end": 52687, "idx": 301}, {"begin": 52688, "end": 53015, "idx": 302}, {"begin": 53016, "end": 53145, "idx": 303}, {"begin": 53146, "end": 53206, "idx": 304}, {"begin": 53207, "end": 53377, "idx": 305}, {"begin": 53378, "end": 53513, "idx": 306}, {"begin": 53514, "end": 53608, "idx": 307}, {"begin": 53609, "end": 53779, "idx": 308}, {"begin": 53780, "end": 53957, "idx": 309}, {"begin": 54009, "end": 54138, "idx": 310}, {"begin": 54139, "end": 54214, "idx": 311}, {"begin": 54215, "end": 54357, "idx": 312}, {"begin": 54358, "end": 54641, "idx": 313}, {"begin": 54642, "end": 54729, "idx": 314}, {"begin": 54730, "end": 54809, "idx": 315}, {"begin": 54810, "end": 55158, "idx": 316}, {"begin": 55159, "end": 55611, "idx": 317}, {"begin": 55612, "end": 55721, "idx": 318}, {"begin": 55722, "end": 55859, "idx": 319}, {"begin": 55860, "end": 55935, "idx": 320}, {"begin": 55936, "end": 56147, "idx": 321}, {"begin": 56148, "end": 56412, "idx": 322}, {"begin": 56452, "end": 56706, "idx": 323}, {"begin": 56707, "end": 56823, "idx": 324}, {"begin": 56824, "end": 57030, "idx": 325}, {"begin": 57031, "end": 57225, "idx": 326}, {"begin": 57226, "end": 57351, "idx": 327}, {"begin": 57352, "end": 57490, "idx": 328}, {"begin": 57491, "end": 57624, "idx": 329}, {"begin": 57625, "end": 57850, "idx": 330}, {"begin": 57851, "end": 58019, "idx": 331}, {"begin": 58020, "end": 58217, "idx": 332}, {"begin": 58218, "end": 58374, "idx": 333}, {"begin": 58375, "end": 58474, "idx": 334}, {"begin": 58475, "end": 58607, "idx": 335}, {"begin": 58608, "end": 58782, "idx": 336}, {"begin": 58859, "end": 58936, "idx": 337}, {"begin": 58937, "end": 59168, "idx": 338}, {"begin": 59169, "end": 59567, "idx": 339}, {"begin": 59568, "end": 59664, "idx": 340}, {"begin": 59665, "end": 59967, "idx": 341}, {"begin": 59968, "end": 60016, "idx": 342}, {"begin": 60017, "end": 60150, "idx": 343}, {"begin": 60151, "end": 60365, "idx": 344}, {"begin": 60366, "end": 60526, "idx": 345}, {"begin": 60527, "end": 60700, "idx": 346}, {"begin": 60701, "end": 60874, "idx": 347}, {"begin": 60875, "end": 61115, "idx": 348}, {"begin": 61116, "end": 61231, "idx": 349}, {"begin": 61232, "end": 61411, "idx": 350}, {"begin": 61412, "end": 61613, "idx": 351}, {"begin": 61614, "end": 61670, "idx": 352}, {"begin": 61671, "end": 61831, "idx": 353}, {"begin": 61832, "end": 62177, "idx": 354}, {"begin": 62178, "end": 62273, "idx": 355}, {"begin": 62274, "end": 62466, "idx": 356}], "ReferenceToFigure": [{"begin": 27790, "end": 27791, "target": "#fig_2", "idx": 0}, {"begin": 38254, "end": 38255, "target": "#fig_3", "idx": 1}, {"begin": 48154, "end": 48155, "target": "#fig_4", "idx": 2}, {"begin": 52741, "end": 52742, "target": "#fig_7", "idx": 3}, {"begin": 53204, "end": 53205, "idx": 4}, {"begin": 55196, "end": 55197, "idx": 5}, {"begin": 55231, "end": 55232, "target": "#fig_7", "idx": 6}, {"begin": 58942, "end": 58944, "target": "#fig_12", "idx": 7}, {"begin": 59281, "end": 59283, "target": "#fig_5", "idx": 8}, {"begin": 60040, "end": 60042, "target": "#fig_15", "idx": 9}], "Abstract": [{"begin": 76, "end": 1231, "idx": 0}], "SectionFootnote": [{"begin": 62468, "end": 62820, "idx": 0}], "Footnote": [{"begin": 62479, "end": 62657, "id": "foot_0", "n": "1", "idx": 0}, {"begin": 62658, "end": 62715, "id": "foot_1", "n": "2", "idx": 1}, {"begin": 62716, "end": 62783, "id": "foot_2", "n": "3", "idx": 2}, {"begin": 62784, "end": 62820, "id": "foot_3", "n": "4", "idx": 3}]}}