{"text": "Generative Adversarial Nets\n\nAbstract:\nWe propose a new framework for estimating generative models via an adversarial process, in which we simultaneously train two models: a generative model G that captures the data distribution, and a discriminative model D that estimates the probability that a sample came from the training data rather than G. The training procedure for G is to maximize the probability of D making a mistake. This framework corresponds to a minimax two-player game. In the space of arbitrary functions G and D, a unique solution exists, with G recovering the training data distribution and D equal to 1 2 everywhere. In the case where G and D are defined by multilayer perceptrons, the entire system can be trained with backpropagation. There is no need for any Markov chains or unrolled approximate inference networks during either training or generation of samples. Experiments demonstrate the potential of the framework through qualitative and quantitative evaluation of the generated samples.\n\n\n1 Introduction\nThe promise of deep learning is to discover rich, hierarchical models [2] that represent probability distributions over the kinds of data encountered in artificial intelligence applications, such as natural images, audio waveforms containing speech, and symbols in natural language corpora. So far, the most striking successes in deep learning have involved discriminative models, usually those that map a high-dimensional, rich sensory input to a class label [14, 22]. These striking successes have primarily been based on the backpropagation and dropout algorithms, using piecewise linear units [19, 9, 10] which have a particularly well-behaved gradient . Deep generative models have had less of an impact, due to the difficulty of approximating many intractable probabilistic computations that arise in maximum likelihood estimation and related strategies, and due to difficulty of leveraging the benefits of piecewise linear units in the generative context. We propose a new generative model estimation procedure that sidesteps these difficulties. 1 In the proposed adversarial nets framework, the generative model is pitted against an adversary: a discriminative model that learns to determine whether a sample is from the model distribution or the data distribution. The generative model can be thought of as analogous to a team of counterfeiters, trying to produce fake currency and use it without detection, while the discriminative model is analogous to the police, trying to detect the counterfeit currency. Competition in this game drives both teams to improve their methods until the counterfeits are indistiguishable from the genuine articles.\nThis framework can yield specific training algorithms for many kinds of model and optimization algorithm. In this article, we explore the special case when the generative model generates samples by passing random noise through a multilayer perceptron, and the discriminative model is also a multilayer perceptron. We refer to this special case as adversarial nets. In this case, we can train both models using only the highly successful backpropagation and dropout algorithms [17] and sample from the generative model using only forward propagation. No approximate inference or Markov chains are necessary.\n\n2 Related work\nAn alternative to directed graphical models with latent variables are undirected graphical models with latent variables, such as restricted Boltzmann machines (RBMs) [27, 16], deep Boltzmann machines (DBMs) [26] and their numerous variants. The interactions within such models are represented as the product of unnormalized potential functions, normalized by a global summation/integration over all states of the random variables. This quantity (the partition function) and its gradient are intractable for all but the most trivial instances, although they can be estimated by Markov chain Monte Carlo (MCMC) methods. Mixing poses a significant problem for learning algorithms that rely on MCMC [3, 5].\nDeep belief networks (DBNs) [16] are hybrid models containing a single undirected layer and several directed layers. While a fast approximate layer-wise training criterion exists, DBNs incur the computational difficulties associated with both undirected and directed models.\nAlternative criteria that do not approximate or bound the log-likelihood have also been proposed, such as score matching [18] and noise-contrastive estimation (NCE) [13]. Both of these require the learned probability density to be analytically specified up to a normalization constant. Note that in many interesting generative models with several layers of latent variables (such as DBNs and DBMs), it is not even possible to derive a tractable unnormalized probability density. Some models such as denoising auto-encoders [30] and contractive autoencoders have learning rules very similar to score matching applied to RBMs. In NCE, as in this work, a discriminative training criterion is employed to fit a generative model. However, rather than fitting a separate discriminative model, the generative model itself is used to discriminate generated data from samples a fixed noise distribution. Because NCE uses a fixed noise distribution, learning slows dramatically after the model has learned even an approximately correct distribution over a small subset of the observed variables.\nFinally, some techniques do not involve defining a probability distribution explicitly, but rather train a generative machine to draw samples from the desired distribution. This approach has the advantage that such machines can be designed to be trained by back-propagation. Prominent recent work in this area includes the generative stochastic network (GSN) framework [5], which extends generalized denoising auto-encoders [4] : both can be seen as defining a parameterized Markov chain, i.e., one learns the parameters of a machine that performs one step of a generative Markov chain. Compared to GSNs, the adversarial nets framework does not require a Markov chain for sampling. Because adversarial nets do not require feedback loops during generation, they are better able to leverage piecewise linear units [19, 9, 10], which improve the performance of backpropagation but have problems with unbounded activation when used ina feedback loop. More recent examples of training a generative machine by back-propagating into it include recent work on auto-encoding variational Bayes [20] and stochastic backpropagation [24].\n\n3 Adversarial nets\nThe adversarial modeling framework is most straightforward to apply when the models are both multilayer perceptrons. To learn the generator's distribution p g over data x, we define a prior on input noise variables p z (z), then represent a mapping to data space as G(z; \u03b8 g ), where G is a differentiable function represented by a multilayer perceptron with parameters \u03b8 g . We also define a second multilayer perceptron D(x; \u03b8 d ) that outputs a single scalar. D(x) represents the probability that x came from the data rather than p g . We train D to maximize the probability of assigning the correct label to both training examples and samples from G. We simultaneously train G to minimize log(1 \u2212 D(G(z))):\nIn other words, D and G play the following two-player minimax game with value function V (G, D):min G max D V (D, G) = E x\u223cpdata(x) [log D(x)] + E z\u223cpz(z) [log(1 \u2212 D(G(z)))].\nIn the next section, we present a theoretical analysis of adversarial nets, essentially showing that the training criterion allows one to recover the data generating distribution as G and D are given enough capacity, i.e., in the non-parametric limit. See Figure 1 for a less formal, more pedagogical explanation of the approach. In practice, we must implement the game using an iterative, numerical approach. Optimizing D to completion in the inner loop of training is computationally prohibitive, and on finite datasets would result in overfitting. Instead, we alternate between k steps of optimizing D and one step of optimizing G. This results in D being maintained near its optimal solution, so long as G changes slowly enough. This strategy is analogous to the way that SML/PCD [31, 29] training maintains samples from a Markov chain from one learning step to the next in order to avoid burning in a Markov chain as part of the inner loop of learning. The procedure is formally presented in Algorithm 1.\nIn practice, equation\n\n4 Theoretical Results\nThe generator G implicitly defines a probability distribution p g as the distribution of the samples G(z) obtained when z \u223c p z . Therefore, we would like Algorithm 1 to converge to a good estimator of p data , if given enough capacity and training time. The results of this section are done in a nonparametric setting, e.g. we represent a model with infinite capacity by studying convergence in the space of probability density functions.\nWe will show in section 4.1 that this minimax game has a global optimum for p g = p data . We will then show in section 4.2 that Algorithm 1 optimizes Eq 1, thus obtaining the desired result.\nAlgorithm 1 Minibatch stochastic gradient descent training of generative adversarial nets. The number of steps to apply to the discriminator, k, is a hyperparameter. We used k = 1, the least expensive option, in our experiments.\nfor number of training iterations do for k steps do \u2022 Sample minibatch of m noise samples {z (1) , . . . , z (m) } from noise prior p g (z).\n\u2022 Sample minibatch of m examples {x (1) , . . . , x (m) } from data generating distribution p data (x).\n\u2022 Update the discriminator by ascending its stochastic gradient:\u2207 \u03b8 d 1 m m i=1 log D x (i) + log 1 \u2212 D G z (i) .\nend for \u2022 Sample minibatch of m noise samples {z (1) , . . . , z (m) } from noise prior p g (z).\n\u2022 Update the generator by descending its stochastic gradient:\u2207 \u03b8g 1 m m i=1 log 1 \u2212 D G z (i)\n.\n\nend for\nThe gradient-based updates can use any standard gradient-based learning rule. We used momentum in our experiments.\n\n4.1 Global Optimality of p g = p data\nWe first consider the optimal discriminator D for any given generator G. Proposition 1. For G fixed, the optimal discriminator D isD * G (x) = p data (x) p data (x) + p g (x)\nProof. The training criterion for the discriminator D, given any generator G, is to maximize the quantity V (G, D)V (G, D) = x p data (x) log(D(x))dx + z p z (z) log(1 \u2212 D(g(z)))dz = x p data (x) log(D(x)) + p g (x) log(1 \u2212 D(x))dx\nFor any (a, b) \u2208 R 2 \\ {0, 0}, the function y \u2192 a log(y) + b log(1 \u2212 y) achieves its maximum in [0, 1] at a a+b . The discriminator does not need to be defined outside of Supp(p data ) \u222a Supp(p g ), concluding the proof.\nNote that the training objective for D can be interpreted as maximizing the log-likelihood for estimating the conditional probability P (Y = y|x), where Y indicates whether x comes from p data (with y = 1) or from p g (with y = 0). The minimax game in Eq. 1 can now be reformulated as:C(G) = max D V (G, D) =E x\u223cpdata [log D * G (x)] + E z\u223cpz [log(1 \u2212 D * G (G(z)))] (4) =E x\u223cpdata [log D * G (x)] + E x\u223cpg [log(1 \u2212 D * G (x))] =E x\u223cpdata log p data (x) P data (x) + p g (x) + E x\u223cpg log p g (x) p data (x) + p g (x)\nTheorem 1. The global minimum of the virtual training criterion C(G) is achieved if and only if p g = p data . At that point, C(G) achieves the value \u2212 log 4.\nProof. For p g = p data , D * G (x) = 1 2 , (consider Eq. 2). Hence, by inspecting Eq. 4 at D * G (x) = 1 2 , we find C(G) = log 1  2 + log 1 2 = \u2212 log 4. To see that this is the best possible value of C(G), reached only for p g = p data , observe thatE x\u223cpdata [\u2212 log 2] + E x\u223cpg [\u2212 log 2] = \u2212 log 4\nand that by subtracting this expression from C(G) = V (D * G , G), we obtain:C(G) = \u2212 log(4) + KL p data p data + p g 2 + KL p g p data + p g 2 ()\nwhere KL is the Kullback-Leibler divergence. We recognize in the previous expression the Jensen-Shannon divergence between the model's distribution and the data generating process:C(G) = \u2212 log(4) + 2 \u2022 JSD (p data p g )\nSince the Jensen-Shannon divergence between two distributions is always non-negative and zero only when they are equal, we have shown that C * = \u2212 log( 4) is the global minimum of C(G) and that the only solution is p g = p data , i.e., the generative model perfectly replicating the data generating process.\n\n4.2 Convergence of Algorithm 1\nProposition 2. If G and D have enough capacity, and at each step of Algorithm 1, the discriminator is allowed to reach its optimum given G, and p g is updated so as to improve the criterionE x\u223cp data [log D * G (x)] + E x\u223cpg [log(1 \u2212 D * G (x))\n] then p g converges to p data Proof. Consider V (G, D) = U (p g , D) as a function of p g as done in the above criterion. Note that U (p g , D) is convex in p g . The subderivatives of a supremum of convex functions include the derivative of the function at the point where the maximum is attained. In other words, if f (x) = sup \u03b1\u2208A f \u03b1 (x) and f \u03b1 (x) is convex in x for every \u03b1, then \u2202f \u03b2 (x) \u2208 \u2202f if \u03b2 = arg sup \u03b1\u2208A f \u03b1 (x). This is equivalent to computing a gradient descent update for p g at the optimal D given the corresponding G. sup D U (p g , D) is convex in p g with a unique global optima as proven in Thm 1, therefore with sufficiently small updates of p g , p g converges to p x , concluding the proof.\nIn practice, adversarial nets represent a limited family of p g distributions via the function G(z; \u03b8 g ), and we optimize \u03b8 g rather than p g itself. Using a multilayer perceptron to define G introduces multiple critical points in parameter space. However, the excellent performance of multilayer perceptrons in practice suggests that they are a reasonable model to use despite their lack of theoretical guarantees.\n\n5 Experiments\nWe trained adversarial nets an a range of datasets including MNIST [23], the Toronto Face Database (TFD) [28], and CIFAR-10 [21]. The generator nets used a mixture of rectifier linear activations [19, 9] and sigmoid activations, while the discriminator net used maxout [10] activations. Dropout [17] was applied in training the discriminator net. While our theoretical framework permits the use of dropout and other noise at intermediate layers of the generator, we used noise as the input to only the bottommost layer of the generator network.\nWe estimate probability of the test set data under p g by fitting a Gaussian Parzen window to the samples generated with G and reporting the log-likelihood under this distribution. The \u03c3 parameter Model MNIST TFD DBN [3] 138 \u00b1 2 1909 \u00b1 66 Stacked CAE [3] 121 \u00b1 1.6 2110 \u00b1 50 Deep GSN [6] 214 \u00b1 1.1 1890 \u00b1 29 Adversarial nets 225 \u00b1 2 2057 \u00b1 26\nTable 1 : Parzen window-based log-likelihood estimates. The reported numbers on MNIST are the mean loglikelihood of samples on test set, with the standard error of the mean computed across examples. On TFD, we computed the standard error across folds of the dataset, with a different \u03c3 chosen using the validation set of each fold. On TFD, \u03c3 was cross validated on each fold and mean log-likelihood on each fold were computed.\nFor MNIST we compare against other models of the real-valued (rather than binary) version of dataset.\nof the Gaussians was obtained by cross validation on the validation set. This procedure was introduced in Breuleux et al. [8] and used for various generative models for which the exact likelihood is not tractable [25, 3, 5]. Results are reported in Table 1. This method of estimating the likelihood has somewhat high variance and does not perform well in high dimensional spaces but it is the best method available to our knowledge. Advances in generative models that can sample but not estimate likelihood directly motivate further research into how to evaluate such models.\nIn Figures 2 and 3 we show samples drawn from the generator net after training. While we make no claim that these samples are better than samples generated by existing methods, we believe that these samples are at least competitive with the better generative models in the literature and highlight the potential of the adversarial framework.\n\n6 Advantages and disadvantages\nThis new framework comes with advantages and disadvantages relative to previous modeling frameworks. The disadvantages are primarily that there is no explicit representation of p g (x), and that D must be synchronized well with G during training (in particular, G must not be trained too much without updating D, in order to avoid \"the Helvetica scenario\" in which G collapses too many values of z to the same value of x to have enough diversity to model p data ), much as the negative chains of a Boltzmann machine must be kept up to date between learning steps. The advantages are that Markov chains are never needed, only backprop is used to obtain gradients, no inference is needed during learning, and a wide variety of functions can be incorporated into the model. Table 2 summarizes the comparison of generative adversarial nets with other generative modeling approaches.\nThe aforementioned advantages are primarily computational. Adversarial models may also gain some statistical advantage from the generator network not being updated directly with data examples, but only with gradients flowing through the discriminator. This means that components of the input are not copied directly into the generator's parameters. Another advantage of adversarial networks is that they can represent very sharp, even degenerate distributions, while methods based on Markov chains require that the distribution be somewhat blurry in order for the chains to be able to mix between modes.\n\n7 Conclusions and future work\nThis framework admits many straightforward extensions:\n1. A conditional generative model p(x | c) can be obtained by adding c as input to both G and D.\n2. Learned approximate inference can be performed by training an auxiliary network to predict z given x. This is similar to the inference net trained by the wake-sleep algorithm [15] but with the advantage that the inference net may be trained for a fixed generator net after the generator net has finished training. This paper has demonstrated the viability of the adversarial modeling framework, suggesting that these research directions could prove useful.\n\nFootnotes:\n\nReferences:\n\n- Bastien, F., Lamblin, P., Pascanu, R., Bergstra, J., Goodfellow, I. J., Bergeron, A., Bouchard, N., and Bengio, Y. (2012). Theano: new features and speed improvements. Deep Learning and Unsupervised Feature Learning NIPS 2012 Workshop.- Bengio, Y. (2009). Learning deep architectures for AI. Now Publishers.\n\n- Bengio, Y., Mesnil, G., Dauphin, Y., and Rifai, S. (2013a). Better mixing via deep representations. In ICML'13.\n\n- Bengio, Y., Yao, L., Alain, G., and Vincent, P. (2013b). Generalized denoising auto-encoders as generative models. In NIPS26. Nips Foundation.\n\n- Bengio, Y., Thibodeau-Laufer, E., and Yosinski, J. (2014a). Deep generative stochastic networks trainable by backprop. In ICML'14.\n\n- Bengio, Y., Thibodeau-Laufer, E., Alain, G., and Yosinski, J. (2014b). Deep generative stochastic net- works trainable by backprop. In Proceedings of the 30th International Conference on Machine Learning (ICML'14).\n\n- Bergstra, J., Breuleux, O., Bastien, F., Lamblin, P., Pascanu, R., Desjardins, G., Turian, J., Warde-Farley, D., and Bengio, Y. (2010). Theano: a CPU and GPU math expression compiler. In Proceedings of the Python for Scientific Computing Conference (SciPy). Oral Presentation.\n\n- Breuleux, O., Bengio, Y., and Vincent, P. (2011). Quickly generating representative samples from an RBM-derived process. Neural Computation, 23(8), 2053-2073.\n\n- Glorot, X., Bordes, A., and Bengio, Y. (2011). Deep sparse rectifier neural networks. In AISTATS'2011.\n\n- Goodfellow, I. J., Warde-Farley, D., Mirza, M., Courville, A., and Bengio, Y. (2013a). Maxout networks. In ICML'2013.\n\n- Goodfellow, I. J., Mirza, M., Courville, A., and Bengio, Y. (2013b). Multi-prediction deep Boltzmann machines. In NIPS'2013.\n\n- Goodfellow, I. J., Warde-Farley, D., Lamblin, P., Dumoulin, V., Mirza, M., Pascanu, R., Bergstra, J., Bastien, F., and Bengio, Y. (2013c). Pylearn2: a machine learning research library. arXiv preprint arXiv:1308.4214.\n\n- Gutmann, M. and Hyvarinen, A. (2010). Noise-contrastive estimation: A new estimation principle for unnormalized statistical models. In AISTATS'2010.\n\n- Hinton, G., Deng, L., Dahl, G. E., Mohamed, A., Jaitly, N., Senior, A., Vanhoucke, V., Nguyen, P., Sainath, T., and Kingsbury, B. (2012a). Deep neural networks for acoustic modeling in speech recognition. IEEE Signal Processing Magazine, 29(6), 82-97.\n\n- Hinton, G. E., Dayan, P., Frey, B. J., and Neal, R. M. (1995). The wake-sleep algorithm for unsupervised neural networks. Science, 268, 1558-1161.\n\n- Hinton, G. E., Osindero, S., and Teh, Y. (2006). A fast learning algorithm for deep belief nets. Neural Computation, 18, 1527-1554.\n\n- Hinton, G. E., Srivastava, N., Krizhevsky, A., Sutskever, I., and Salakhutdinov, R. (2012b). Improving neural networks by preventing co-adaptation of feature detectors. Technical report, arXiv:1207.0580.\n\n- Hyv\u00e4rinen, A. (2005). Estimation of non-normalized statistical models using score matching. J. Machine Learning Res., 6.\n\n- Jarrett, K., Kavukcuoglu, K., Ranzato, M., and LeCun, Y. (2009). What is the best multi-stage architecture for object recognition? In Proc. International Conference on Computer Vision (ICCV'09), pages 2146-2153. IEEE.\n\n- Kingma, D. P. and Welling, M. (2014). Auto-encoding variational bayes. In Proceedings of the Interna- tional Conference on Learning Representations (ICLR).\n\n- Krizhevsky, A. and Hinton, G. (2009). Learning multiple layers of features from tiny images. Technical report, University of Toronto.\n\n- Krizhevsky, A., Sutskever, I., and Hinton, G. (2012). ImageNet classification with deep convolutional neural networks. In NIPS'2012.\n\n- LeCun, Y., Bottou, L., Bengio, Y., and Haffner, P. (1998). Gradient-based learning applied to document recognition. Proceedings of the IEEE, 86(11), 2278-2324.\n\n- Rezende, D. J., Mohamed, S., and Wierstra, D. (2014). Stochastic backpropagation and approximate inference in deep generative models. Technical report, arXiv:1401.4082.\n\n- Rifai, S., Bengio, Y., Dauphin, Y., and Vincent, P. (2012). A generative process for sampling contractive auto-encoders. In ICML'12.\n\n- Salakhutdinov, R. and Hinton, G. E. (2009). Deep Boltzmann machines. In AISTATS'2009, pages 448- 455.\n\n- Smolensky, P. (1986). Information processing in dynamical systems: Foundations of harmony theory. In D. E. Rumelhart and J. L. McClelland, editors, Parallel Distributed Processing, volume 1, chapter 6, pages 194-281. MIT Press, Cambridge.\n\n- Susskind, J., Anderson, A., and Hinton, G. E. (2010). The Toronto face dataset. Technical Report UTML TR 2010-001, U. Toronto.\n\n- Tieleman, T. (2008). Training restricted Boltzmann machines using approximations to the likelihood gradient. In W. W. Cohen, A. McCallum, and S. T. Roweis, editors, ICML 2008, pages 1064-1071. ACM.\n\n- Vincent, P., Larochelle, H., Bengio, Y., and Manzagol, P.-A. (2008). Extracting and composing robust features with denoising autoencoders. In ICML 2008.\n\n- Younes, L. (1999). On the convergence of Markovian stochastic algorithms with rapidly decreasing ergodicity rates. Stochastics and Stochastic Reports, 65(3), 177-228.\n\n", "annotations": {"Abstract": [{"begin": 29, "end": 1017, "idx": 0}], "Head": [{"begin": 1020, "end": 1034, "n": "1", "idx": 0}, {"begin": 3301, "end": 3315, "n": "2", "idx": 1}, {"begin": 6507, "end": 6525, "n": "3", "idx": 2}, {"begin": 8445, "end": 8466, "n": "4", "idx": 3}, {"begin": 9881, "end": 9888, "idx": 4}, {"begin": 10005, "end": 10042, "n": "4.1", "idx": 5}, {"begin": 12324, "end": 12354, "n": "4.2", "idx": 6}, {"begin": 13737, "end": 13750, "n": "5", "idx": 7}, {"begin": 16087, "end": 16117, "n": "6", "idx": 8}, {"begin": 17602, "end": 17631, "n": "7", "idx": 9}], "ReferenceToBib": [{"begin": 1105, "end": 1108, "target": "#b1", "idx": 0}, {"begin": 1495, "end": 1499, "target": "#b13", "idx": 1}, {"begin": 1500, "end": 1503, "target": "#b21", "idx": 2}, {"begin": 1632, "end": 1636, "target": "#b18", "idx": 3}, {"begin": 1637, "end": 1639, "target": "#b8", "idx": 4}, {"begin": 1640, "end": 1643, "target": "#b9", "idx": 5}, {"begin": 3169, "end": 3173, "target": "#b16", "idx": 6}, {"begin": 3482, "end": 3486, "target": "#b26", "idx": 7}, {"begin": 3487, "end": 3490, "target": "#b15", "idx": 8}, {"begin": 3523, "end": 3527, "target": "#b25", "idx": 9}, {"begin": 4011, "end": 4014, "target": "#b2", "idx": 10}, {"begin": 4015, "end": 4017, "target": "#b4", "idx": 11}, {"begin": 4047, "end": 4051, "target": "#b15", "idx": 12}, {"begin": 4415, "end": 4419, "target": "#b17", "idx": 13}, {"begin": 4459, "end": 4463, "target": "#b12", "idx": 14}, {"begin": 4817, "end": 4821, "target": "#b29", "idx": 15}, {"begin": 5749, "end": 5752, "target": "#b4", "idx": 16}, {"begin": 5804, "end": 5807, "target": "#b3", "idx": 17}, {"begin": 6192, "end": 6196, "target": "#b18", "idx": 18}, {"begin": 6197, "end": 6199, "target": "#b8", "idx": 19}, {"begin": 6200, "end": 6203, "target": "#b9", "idx": 20}, {"begin": 6464, "end": 6468, "target": "#b19", "idx": 21}, {"begin": 6500, "end": 6504, "target": "#b23", "idx": 22}, {"begin": 8196, "end": 8200, "target": "#b30", "idx": 23}, {"begin": 8201, "end": 8204, "target": "#b28", "idx": 24}, {"begin": 13818, "end": 13822, "target": "#b22", "idx": 25}, {"begin": 13856, "end": 13860, "target": "#b27", "idx": 26}, {"begin": 13875, "end": 13879, "target": "#b20", "idx": 27}, {"begin": 13947, "end": 13951, "target": "#b18", "idx": 28}, {"begin": 13952, "end": 13954, "target": "#b8", "idx": 29}, {"begin": 14020, "end": 14024, "target": "#b9", "idx": 30}, {"begin": 14046, "end": 14050, "target": "#b16", "idx": 31}, {"begin": 14513, "end": 14516, "target": "#b2", "idx": 32}, {"begin": 14547, "end": 14550, "target": "#b2", "idx": 33}, {"begin": 14580, "end": 14583, "target": "#b5", "idx": 34}, {"begin": 15290, "end": 15293, "target": "#b7", "idx": 35}, {"begin": 15381, "end": 15385, "target": "#b24", "idx": 36}, {"begin": 15386, "end": 15388, "target": "#b2", "idx": 37}, {"begin": 15389, "end": 15391, "target": "#b4", "idx": 38}, {"begin": 17962, "end": 17966, "target": "#b14", "idx": 39}], "SectionFootnote": [{"begin": 18245, "end": 18255, "idx": 0}], "ReferenceString": [{"begin": 18272, "end": 18507, "id": "b0", "idx": 0}, {"begin": 18509, "end": 18579, "id": "b1", "idx": 1}, {"begin": 18583, "end": 18694, "id": "b2", "idx": 2}, {"begin": 18698, "end": 18840, "id": "b3", "idx": 3}, {"begin": 18844, "end": 18974, "id": "b4", "idx": 4}, {"begin": 18978, "end": 19192, "id": "b5", "idx": 5}, {"begin": 19196, "end": 19472, "id": "b6", "idx": 6}, {"begin": 19476, "end": 19634, "id": "b7", "idx": 7}, {"begin": 19638, "end": 19740, "id": "b8", "idx": 8}, {"begin": 19744, "end": 19861, "id": "b9", "idx": 9}, {"begin": 19865, "end": 19989, "id": "b10", "idx": 10}, {"begin": 19993, "end": 20210, "id": "b11", "idx": 11}, {"begin": 20214, "end": 20362, "id": "b12", "idx": 12}, {"begin": 20366, "end": 20617, "id": "b13", "idx": 13}, {"begin": 20621, "end": 20767, "id": "b14", "idx": 14}, {"begin": 20771, "end": 20902, "id": "b15", "idx": 15}, {"begin": 20906, "end": 21109, "id": "b16", "idx": 16}, {"begin": 21113, "end": 21233, "id": "b17", "idx": 17}, {"begin": 21237, "end": 21454, "id": "b18", "idx": 18}, {"begin": 21458, "end": 21613, "id": "b19", "idx": 19}, {"begin": 21617, "end": 21750, "id": "b20", "idx": 20}, {"begin": 21754, "end": 21886, "id": "b21", "idx": 21}, {"begin": 21890, "end": 22049, "id": "b22", "idx": 22}, {"begin": 22053, "end": 22221, "id": "b23", "idx": 23}, {"begin": 22225, "end": 22357, "id": "b24", "idx": 24}, {"begin": 22361, "end": 22462, "id": "b25", "idx": 25}, {"begin": 22466, "end": 22704, "id": "b26", "idx": 26}, {"begin": 22708, "end": 22834, "id": "b27", "idx": 27}, {"begin": 22838, "end": 23035, "id": "b28", "idx": 28}, {"begin": 23039, "end": 23191, "id": "b29", "idx": 29}, {"begin": 23195, "end": 23361, "id": "b30", "idx": 30}], "ReferenceToTable": [{"begin": 14645, "end": 14646, "idx": 0}, {"begin": 15423, "end": 15424, "idx": 1}, {"begin": 16895, "end": 16896, "target": "#tab_1", "idx": 2}], "ReferenceToFormula": [{"begin": 12167, "end": 12168, "idx": 0}], "Paragraph": [{"begin": 39, "end": 1017, "idx": 0}, {"begin": 1035, "end": 2692, "idx": 1}, {"begin": 2693, "end": 3299, "idx": 2}, {"begin": 3316, "end": 4018, "idx": 3}, {"begin": 4019, "end": 4293, "idx": 4}, {"begin": 4294, "end": 5379, "idx": 5}, {"begin": 5380, "end": 6505, "idx": 6}, {"begin": 6526, "end": 7236, "idx": 7}, {"begin": 7237, "end": 7333, "idx": 8}, {"begin": 7412, "end": 8421, "idx": 9}, {"begin": 8422, "end": 8443, "idx": 10}, {"begin": 8467, "end": 8906, "idx": 11}, {"begin": 8907, "end": 9098, "idx": 12}, {"begin": 9099, "end": 9327, "idx": 13}, {"begin": 9328, "end": 9468, "idx": 14}, {"begin": 9469, "end": 9572, "idx": 15}, {"begin": 9573, "end": 9637, "idx": 16}, {"begin": 9687, "end": 9783, "idx": 17}, {"begin": 9784, "end": 9845, "idx": 18}, {"begin": 9878, "end": 9879, "idx": 19}, {"begin": 9889, "end": 10003, "idx": 20}, {"begin": 10043, "end": 10174, "idx": 21}, {"begin": 10218, "end": 10332, "idx": 22}, {"begin": 10450, "end": 10670, "idx": 23}, {"begin": 10671, "end": 10956, "idx": 24}, {"begin": 11188, "end": 11346, "idx": 25}, {"begin": 11347, "end": 11599, "idx": 26}, {"begin": 11648, "end": 11725, "idx": 27}, {"begin": 11795, "end": 11975, "idx": 28}, {"begin": 12015, "end": 12322, "idx": 29}, {"begin": 12355, "end": 12544, "idx": 30}, {"begin": 12600, "end": 13318, "idx": 31}, {"begin": 13319, "end": 13735, "idx": 32}, {"begin": 13751, "end": 14295, "idx": 33}, {"begin": 14296, "end": 14638, "idx": 34}, {"begin": 14639, "end": 15065, "idx": 35}, {"begin": 15066, "end": 15167, "idx": 36}, {"begin": 15168, "end": 15743, "idx": 37}, {"begin": 15744, "end": 16085, "idx": 38}, {"begin": 16118, "end": 16996, "idx": 39}, {"begin": 16997, "end": 17600, "idx": 40}, {"begin": 17632, "end": 17686, "idx": 41}, {"begin": 17687, "end": 17783, "idx": 42}, {"begin": 17784, "end": 18243, "idx": 43}], "SectionHeader": [{"begin": 0, "end": 1017, "idx": 0}], "SectionReference": [{"begin": 18257, "end": 23363, "idx": 0}], "Sentence": [{"begin": 39, "end": 346, "idx": 0}, {"begin": 347, "end": 429, "idx": 1}, {"begin": 430, "end": 486, "idx": 2}, {"begin": 487, "end": 637, "idx": 3}, {"begin": 638, "end": 757, "idx": 4}, {"begin": 758, "end": 888, "idx": 5}, {"begin": 889, "end": 1017, "idx": 6}, {"begin": 1035, "end": 1325, "idx": 7}, {"begin": 1326, "end": 1504, "idx": 8}, {"begin": 1505, "end": 1693, "idx": 9}, {"begin": 1694, "end": 1997, "idx": 10}, {"begin": 1998, "end": 2089, "idx": 11}, {"begin": 2090, "end": 2308, "idx": 12}, {"begin": 2309, "end": 2553, "idx": 13}, {"begin": 2554, "end": 2692, "idx": 14}, {"begin": 2693, "end": 2798, "idx": 15}, {"begin": 2799, "end": 3006, "idx": 16}, {"begin": 3007, "end": 3057, "idx": 17}, {"begin": 3058, "end": 3242, "idx": 18}, {"begin": 3243, "end": 3299, "idx": 19}, {"begin": 3316, "end": 3556, "idx": 20}, {"begin": 3557, "end": 3746, "idx": 21}, {"begin": 3747, "end": 3933, "idx": 22}, {"begin": 3934, "end": 4018, "idx": 23}, {"begin": 4019, "end": 4135, "idx": 24}, {"begin": 4136, "end": 4293, "idx": 25}, {"begin": 4294, "end": 4464, "idx": 26}, {"begin": 4465, "end": 4579, "idx": 27}, {"begin": 4580, "end": 4772, "idx": 28}, {"begin": 4773, "end": 4918, "idx": 29}, {"begin": 4919, "end": 5018, "idx": 30}, {"begin": 5019, "end": 5188, "idx": 31}, {"begin": 5189, "end": 5379, "idx": 32}, {"begin": 5380, "end": 5552, "idx": 33}, {"begin": 5553, "end": 5654, "idx": 34}, {"begin": 5655, "end": 5966, "idx": 35}, {"begin": 5967, "end": 6061, "idx": 36}, {"begin": 6062, "end": 6326, "idx": 37}, {"begin": 6327, "end": 6505, "idx": 38}, {"begin": 6526, "end": 6642, "idx": 39}, {"begin": 6643, "end": 6901, "idx": 40}, {"begin": 6902, "end": 6988, "idx": 41}, {"begin": 6989, "end": 7064, "idx": 42}, {"begin": 7065, "end": 7236, "idx": 43}, {"begin": 7237, "end": 7333, "idx": 44}, {"begin": 7412, "end": 7663, "idx": 45}, {"begin": 7664, "end": 7741, "idx": 46}, {"begin": 7742, "end": 7821, "idx": 47}, {"begin": 7822, "end": 7962, "idx": 48}, {"begin": 7963, "end": 8046, "idx": 49}, {"begin": 8047, "end": 8144, "idx": 50}, {"begin": 8145, "end": 8369, "idx": 51}, {"begin": 8370, "end": 8421, "idx": 52}, {"begin": 8422, "end": 8443, "idx": 53}, {"begin": 8467, "end": 8596, "idx": 54}, {"begin": 8597, "end": 8721, "idx": 55}, {"begin": 8722, "end": 8791, "idx": 56}, {"begin": 8792, "end": 8906, "idx": 57}, {"begin": 8907, "end": 8997, "idx": 58}, {"begin": 8998, "end": 9098, "idx": 59}, {"begin": 9099, "end": 9189, "idx": 60}, {"begin": 9190, "end": 9264, "idx": 61}, {"begin": 9265, "end": 9327, "idx": 62}, {"begin": 9328, "end": 9432, "idx": 63}, {"begin": 9433, "end": 9468, "idx": 64}, {"begin": 9469, "end": 9516, "idx": 65}, {"begin": 9517, "end": 9572, "idx": 66}, {"begin": 9573, "end": 9637, "idx": 67}, {"begin": 9687, "end": 9747, "idx": 68}, {"begin": 9748, "end": 9783, "idx": 69}, {"begin": 9784, "end": 9845, "idx": 70}, {"begin": 9878, "end": 9879, "idx": 71}, {"begin": 9889, "end": 9966, "idx": 72}, {"begin": 9967, "end": 10003, "idx": 73}, {"begin": 10043, "end": 10130, "idx": 74}, {"begin": 10131, "end": 10174, "idx": 75}, {"begin": 10218, "end": 10224, "idx": 76}, {"begin": 10225, "end": 10332, "idx": 77}, {"begin": 10450, "end": 10563, "idx": 78}, {"begin": 10564, "end": 10670, "idx": 79}, {"begin": 10671, "end": 10902, "idx": 80}, {"begin": 10903, "end": 10956, "idx": 81}, {"begin": 11188, "end": 11198, "idx": 82}, {"begin": 11199, "end": 11298, "idx": 83}, {"begin": 11299, "end": 11346, "idx": 84}, {"begin": 11347, "end": 11353, "idx": 85}, {"begin": 11354, "end": 11408, "idx": 86}, {"begin": 11409, "end": 11599, "idx": 87}, {"begin": 11648, "end": 11725, "idx": 88}, {"begin": 11795, "end": 11839, "idx": 89}, {"begin": 11840, "end": 11975, "idx": 90}, {"begin": 12015, "end": 12322, "idx": 91}, {"begin": 12355, "end": 12544, "idx": 92}, {"begin": 12600, "end": 12637, "idx": 93}, {"begin": 12638, "end": 12722, "idx": 94}, {"begin": 12723, "end": 12763, "idx": 95}, {"begin": 12764, "end": 12899, "idx": 96}, {"begin": 12900, "end": 13029, "idx": 97}, {"begin": 13030, "end": 13318, "idx": 98}, {"begin": 13319, "end": 13469, "idx": 99}, {"begin": 13470, "end": 13567, "idx": 100}, {"begin": 13568, "end": 13735, "idx": 101}, {"begin": 13751, "end": 13880, "idx": 102}, {"begin": 13881, "end": 14037, "idx": 103}, {"begin": 14038, "end": 14097, "idx": 104}, {"begin": 14098, "end": 14295, "idx": 105}, {"begin": 14296, "end": 14476, "idx": 106}, {"begin": 14477, "end": 14638, "idx": 107}, {"begin": 14639, "end": 14694, "idx": 108}, {"begin": 14695, "end": 14837, "idx": 109}, {"begin": 14838, "end": 14970, "idx": 110}, {"begin": 14971, "end": 15065, "idx": 111}, {"begin": 15066, "end": 15167, "idx": 112}, {"begin": 15168, "end": 15240, "idx": 113}, {"begin": 15241, "end": 15392, "idx": 114}, {"begin": 15393, "end": 15425, "idx": 115}, {"begin": 15426, "end": 15600, "idx": 116}, {"begin": 15601, "end": 15743, "idx": 117}, {"begin": 15744, "end": 15823, "idx": 118}, {"begin": 15824, "end": 16085, "idx": 119}, {"begin": 16118, "end": 16218, "idx": 120}, {"begin": 16219, "end": 16681, "idx": 121}, {"begin": 16682, "end": 16888, "idx": 122}, {"begin": 16889, "end": 16996, "idx": 123}, {"begin": 16997, "end": 17055, "idx": 124}, {"begin": 17056, "end": 17248, "idx": 125}, {"begin": 17249, "end": 17345, "idx": 126}, {"begin": 17346, "end": 17600, "idx": 127}, {"begin": 17632, "end": 17686, "idx": 128}, {"begin": 17687, "end": 17689, "idx": 129}, {"begin": 17690, "end": 17783, "idx": 130}, {"begin": 17784, "end": 17888, "idx": 131}, {"begin": 17889, "end": 18100, "idx": 132}, {"begin": 18101, "end": 18243, "idx": 133}], "ReferenceToFigure": [{"begin": 7675, "end": 7676, "target": "#fig_0", "idx": 0}, {"begin": 15755, "end": 15762, "target": "#fig_2", "idx": 1}], "Div": [{"begin": 39, "end": 1017, "idx": 0}, {"begin": 1020, "end": 3299, "idx": 1}, {"begin": 3301, "end": 6505, "idx": 2}, {"begin": 6507, "end": 8443, "idx": 3}, {"begin": 8445, "end": 9879, "idx": 4}, {"begin": 9881, "end": 10003, "idx": 5}, {"begin": 10005, "end": 12322, "idx": 6}, {"begin": 12324, "end": 13735, "idx": 7}, {"begin": 13737, "end": 16085, "idx": 8}, {"begin": 16087, "end": 17600, "idx": 9}, {"begin": 17602, "end": 18243, "idx": 10}], "SectionMain": [{"begin": 1017, "end": 18243, "idx": 0}]}}