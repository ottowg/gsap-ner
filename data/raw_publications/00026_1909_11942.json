{"text": "ALBERT: A LITE BERT FOR SELF-SUPERVISED LEARNING OF LANGUAGE REPRESENTATIONS\n\nAbstract:\nIncreasing model size when pretraining natural language representations often results in improved performance on downstream tasks. However, at some point further model increases become harder due to GPU/TPU memory limitations and longer training times. To address these problems, we present two parameterreduction techniques to lower memory consumption and increase the training speed of BERT (Devlin et al., 2019). Comprehensive empirical evidence shows that our proposed methods lead to models that scale much better compared to the original BERT. We also use a self-supervised loss that focuses on modeling inter-sentence coherence, and show it consistently helps downstream tasks with multi-sentence inputs. As a result, our best model establishes new state-of-the-art results on the GLUE, RACE, and SQuAD benchmarks while having fewer parameters compared to BERT-large. The code and the pretrained models are available at https://github.com/google-research/ALBERT. * Work done as an intern at Google Research, driving data processing and downstream task evaluations.\n\n\n1 INTRODUCTION\nFull network pre-training (Dai & Le, 2015; Radford et al., 2018; Devlin et al., 2019; Howard & Ruder, 2018) has led to a series of breakthroughs in language representation learning. Many nontrivial NLP tasks, including those that have limited training data, have greatly benefited from these pre-trained models. One of the most compelling signs of these breakthroughs is the evolution of machine performance on a reading comprehension task designed for middle and high-school English exams in China, the RACE test (Lai et al., 2017) : the paper that originally describes the task and formulates the modeling challenge reports then state-of-the-art machine accuracy at 44.1%; the latest published result reports their model performance at 83.2% (Liu et al., 2019); the work we present here pushes it even higher to 89.4%, a stunning 45.3% improvement that is mainly attributable to our current ability to build high-performance pretrained language representations.\nEvidence from these improvements reveals that a large network is of crucial importance for achieving state-of-the-art performance (Devlin et al., 2019; Radford et al., 2019). It has become common practice to pre-train large models and distill them down to smaller ones (Sun et al., 2019; Turc et al., 2019) for real applications. Given the importance of model size, we ask: Is having better NLP models as easy as having larger models? An obstacle to answering this question is the memory limitations of available hardware. Given that current state-of-the-art models often have hundreds of millions or even billions of parameters, it is easy to hit these limitations as we try to scale our models. Training speed can also be significantly hampered in distributed training, as the communication overhead is directly proportional to the number of parameters in the model.\nExisting solutions to the aforementioned problems include model parallelization (Shazeer et al., 2018; Shoeybi et al., 2019) and clever memory management (Chen et al., 2016; Gomez et al., 2017).\nThese solutions address the memory limitation problem, but not the communication overhead. In this paper, we address all of the aforementioned problems, by designing A Lite BERT (ALBERT) architecture that has significantly fewer parameters than a traditional BERT architecture.\nALBERT incorporates two parameter reduction techniques that lift the major obstacles in scaling pre-trained models. The first one is a factorized embedding parameterization. By decomposing the large vocabulary embedding matrix into two small matrices, we separate the size of the hidden layers from the size of vocabulary embedding. This separation makes it easier to grow the hidden size without significantly increasing the parameter size of the vocabulary embeddings. The second technique is cross-layer parameter sharing. This technique prevents the parameter from growing with the depth of the network. Both techniques significantly reduce the number of parameters for BERT without seriously hurting performance, thus improving parameter-efficiency. An ALBERT configuration similar to BERT-large has 18x fewer parameters and can be trained about 1.7x faster. The parameter reduction techniques also act as a form of regularization that stabilizes the training and helps with generalization.\nTo further improve the performance of ALBERT, we also introduce a self-supervised loss for sentence-order prediction (SOP). SOP primary focuses on inter-sentence coherence and is designed to address the ineffectiveness (Yang et al., 2019; Liu et al., 2019) of the next sentence prediction (NSP) loss proposed in the original BERT.\nAs a result of these design decisions, we are able to scale up to much larger ALBERT configurations that still have fewer parameters than BERT-large but achieve significantly better performance. We establish new state-of-the-art results on the well-known GLUE, SQuAD, and RACE benchmarks for natural language understanding. Specifically, we push the RACE accuracy to 89.4%, the GLUE benchmark to 89.4, and the F1 score of SQuAD 2.0 to 92.2.\n\n2 RELATED WORK\n\n\n2.1 SCALING UP REPRESENTATION LEARNING FOR NATURAL LANGUAGE\nLearning representations of natural language has been shown to be useful for a wide range of NLP tasks and has been widely adopted (Mikolov et al., 2013; Le & Mikolov, 2014; Dai & Le, 2015; Peters et al., 2018; Devlin et al., 2019; Radford et al., 2018; 2019). One of the most significant changes in the last two years is the shift from pre-training word embeddings, whether standard (Mikolov et al., 2013; Pennington et al., 2014) or contextualized (McCann et al., 2017; Peters et al., 2018), to full-network pre-training followed by task-specific fine-tuning (Dai & Le, 2015; Radford et al., 2018; Devlin et al., 2019). In this line of work, it is often shown that larger model size improves performance. For example, Devlin et al. (2019) show that across three selected natural language understanding tasks, using larger hidden size, more hidden layers, and more attention heads always leads to better performance. However, they stop at a hidden size of 1024, presumably because of the model size and computation cost problems.\nIt is difficult to experiment with large models due to computational constraints, especially in terms of GPU/TPU memory limitations. Given that current state-of-the-art models often have hundreds of millions or even billions of parameters, we can easily hit memory limits. To address this issue, Chen et al. (2016) propose a method called gradient checkpointing to reduce the memory requirement to be sublinear at the cost of an extra forward pass.  Gomez et al. (2017) propose a way to reconstruct each layer's activations from the next layer so that they do not need to store the intermediate activations.\nBoth methods reduce the memory consumption at the cost of speed.  Raffel et al. (2019) proposed to use model parallelization to train a giant model. In contrast, our parameter-reduction techniques reduce memory consumption and increase training speed.\n\n2.2 CROSS-LAYER PARAMETER SHARING\nThe idea of sharing parameters across layers has been previously explored with the Transformer architecture (Vaswani et al., 2017), but this prior work has focused on training for standard encoderdecoder tasks rather than the pretraining/finetuning setting. Different from our observations, Dehghani et al. (2018) show that networks with cross-layer parameter sharing (Universal Transformer, UT) get better performance on language modeling and subject-verb agreement than the standard transformer. Very recently, Bai et al. (2019) propose a Deep Equilibrium Model (DQE) for transformer networks and show that DQE can reach an equilibrium point for which the input embedding and the output embedding of a certain layer stay the same. Our observations show that our embeddings are oscillating rather than converging.  Hao et al. (2019) combine a parameter-sharing transformer with the standard one, which further increases the number of parameters of the standard transformer.\n\n2.3 SENTENCE ORDERING OBJECTIVES\nALBERT uses a pretraining loss based on predicting the ordering of two consecutive segments of text. Several researchers have experimented with pretraining objectives that similarly relate to discourse coherence. Coherence and cohesion in discourse have been widely studied and many phenomena have been identified that connect neighboring text segments (Hobbs, 1979; Halliday & Hasan, 1976; Grosz et al., 1995). Most objectives found effective in practice are quite simple. Skipthought (Kiros et al., 2015) and FastSent (Hill et al., 2016) sentence embeddings are learned by using an encoding of a sentence to predict words in neighboring sentences. Other objectives for sentence embedding learning include predicting future sentences rather than only neighbors (Gan et al., 2017) and predicting explicit discourse markers (Jernite et al., 2017; Nie et al., 2019). Our loss is most similar to the sentence ordering objective of Jernite et al. (2017), where sentence embeddings are learned in order to determine the ordering of two consecutive sentences. Unlike most of the above work, however, our loss is defined on textual segments rather than sentences. BERT (Devlin et al., 2019) uses a loss based on predicting whether the second segment in a pair has been swapped with a segment from another document. We compare to this loss in our experiments and find that sentence ordering is a more challenging pretraining task and more useful for certain downstream tasks. Concurrently to our work, Wang et al. (2019) also try to predict the order of two consecutive segments of text, but they combine it with the original next sentence prediction in a three-way classification task rather than empirically comparing the two.\n\n3 THE ELEMENTS OF ALBERT\nIn this section, we present the design decisions for ALBERT and provide quantified comparisons against corresponding configurations of the original BERT architecture (Devlin et al., 2019).\n\n3.1 MODEL ARCHITECTURE CHOICES\nThe backbone of the ALBERT architecture is similar to BERT in that it uses a transformer encoder (Vaswani et al., 2017) with GELU nonlinearities (Hendrycks & Gimpel, 2016). We follow the BERT notation conventions and denote the vocabulary embedding size as E, the number of encoder layers as L, and the hidden size as H. Following Devlin et al. (2019), we set the feed-forward/filter size to be 4H and the number of attention heads to be H/64.\nThere are three main contributions that ALBERT makes over the design choices of BERT.\nFactorized embedding parameterization. In BERT, as well as subsequent modeling improvements such as XLNet (Yang et al., 2019) and RoBERTa (Liu et al., 2019), the WordPiece embedding size E is tied with the hidden layer size H, i.e., E \u2261 H. This decision appears suboptimal for both modeling and practical reasons, as follows.\nFrom a modeling perspective, WordPiece embeddings are meant to learn context-independent representations, whereas hidden-layer embeddings are meant to learn context-dependent representations. As experiments with context length indicate (Liu et al., 2019), the power of BERT-like representations comes from the use of context to provide the signal for learning such context-dependent representations. As such, untying the WordPiece embedding size E from the hidden layer size H allows us to make a more efficient usage of the total model parameters as informed by modeling needs, which dictate that H E.\nFrom a practical perspective, natural language processing usually require the vocabulary size V to be large. 1 If E \u2261 H, then increasing H increases the size of the embedding matrix, which has size\nV \u00d7 E. This can easily result in a model with billions of parameters, most of which are only updated sparsely during training.\nTherefore, for ALBERT we use a factorization of the embedding parameters, decomposing them into two smaller matrices. Instead of projecting the one-hot vectors directly into the hidden space of size H, we first project them into a lower dimensional embedding space of size E, and then project it to the hidden space. By using this decomposition, we reduce the embedding parameters fromO(V \u00d7 H) to O(V \u00d7 E + E \u00d7 H).\nThis parameter reduction is significant when H E. We choose to use the same E for all word pieces because they are much more evenly distributed across documents compared to whole-word embedding, where having different embedding size (Grave et al. (2017); Baevski & Auli (2018); Dai et al. (2019)) for different words is important.\nCross-layer parameter sharing. For ALBERT, we propose cross-layer parameter sharing as another way to improve parameter efficiency. There are multiple ways to share parameters, e.g., only sharing feed-forward network (FFN) parameters across layers, or only sharing attention parameters. The default decision for ALBERT is to share all parameters across layers. All our experiments use this default decision unless otherwise specified. We compare this design decision against other strategies in our experiments in Sec. 4.5.  (2019) show that their DQEs reach an equilibrium point for which the input and output embedding of a certain layer stay the same. Our measurement on the L2 distances and cosine similarity show that our embeddings are oscillating rather than converging. Figure 1 shows the L2 distances and cosine similarity of the input and output embeddings for each layer, using BERT-large and ALBERT-large configurations (see Table 1). We observe that the transitions from layer to layer are much smoother for ALBERT than for BERT. These results show that weight-sharing has an effect on stabilizing network parameters. Although there is a drop for both metrics compared to BERT, they nevertheless do not converge to 0 even after 24 layers. This shows that the solution space for ALBERT parameters is very different from the one found by DQE.\n\nSimilar strategies have been explored by\nInter-sentence coherence loss. In addition to the masked language modeling (MLM) loss (Devlin et al., 2019), BERT uses an additional loss called next-sentence prediction (NSP). NSP is a binary classification loss for predicting whether two segments appear consecutively in the original text, as follows: positive examples are created by taking consecutive segments from the training corpus; negative examples are created by pairing segments from different documents; positive and negative examples are sampled with equal probability. The NSP objective was designed to improve performance on downstream tasks, such as natural language inference, that require reasoning about the relationship between sentence pairs. However, subsequent studies (Yang et al., 2019; Liu et al., 2019) found NSP's impact unreliable and decided to eliminate it, a decision supported by an improvement in downstream task performance across several tasks.\nWe conjecture that the main reason behind NSP's ineffectiveness is its lack of difficulty as a task, as compared to MLM. As formulated, NSP conflates topic prediction and coherence prediction in a single task 2. However, topic prediction is easier to learn compared to coherence prediction, and also overlaps more with what is learned using the MLM loss.\nWe maintain that inter-sentence modeling is an important aspect of language understanding, but we propose a loss based primarily on coherence. That is, for ALBERT, we use a sentence-order prediction (SOP) loss, which avoids topic prediction and instead focuses on modeling inter-sentence coherence. The SOP loss uses as positive examples the same technique as BERT (two consecutive segments from the same document), and as negative examples the same two consecutive segments but with their order swapped. This forces the model to learn finer-grained distinctions about discourse-level coherence properties. As we show in Sec. 4.6, it turns out that NSP cannot solve the SOP task at all (i.e., it ends up learning the easier topic-prediction signal, and performs at randombaseline level on the SOP task), while SOP can solve the NSP task to a reasonable degree, presumably based on analyzing misaligned coherence cues. As a result, ALBERT models consistently improve downstream task performance for multi-sentence encoding tasks.\n\n3.2 MODEL SETUP\nWe present the differences between BERT and ALBERT models with comparable hyperparameter settings in Table 1. Due to the design choices discussed above, ALBERT models have much smaller parameter size compared to corresponding BERT models.\nFor example, ALBERT-large has about 18x fewer parameters compared to BERT-large, 18M versus 334M. An ALBERT-xlarge configuration with H = 2048 has only 60M parameters and an ALBERT-xxlarge configuration with H = 4096 has 233M parameters, i.e., around 70% of BERTlarge's parameters. Note that for ALBERT-xxlarge, we mainly report results on a 12-layer network because a 24-layer network (with the same configuration) obtains similar results but is computationally more expensive.\nThis improvement in parameter efficiency is the most important advantage of ALBERT's design choices. Before we can quantify this advantage, we need to introduce our experimental setup in more detail.\n\n4 EXPERIMENTAL RESULTS\n\n\n4.1 EXPERIMENTAL SETUP\nTo keep the comparison as meaningful as possible, we follow the BERT (Devlin et al., 2019) setup in using the BOOKCORPUS (Zhu et al., 2015) and English Wikipedia (Devlin et al., 2019) for pretraining baseline models. These two corpora consist of around 16GB of uncompressed text. We format our inputs as \"[CLS] x 1 [SEP] x 2 [SEP]\", where x 1 = x 1,1 , x 1,2 \u2022 \u2022 \u2022 and x 2 = x 1,1 , x 1,2 \u2022 \u2022\n\u2022 are two segments. 3 We always limit the maximum input length to 512, and randomly generate input sequences shorter than 512 with a probability of 10%. Like BERT, we use a vocabulary size of 30,000, tokenized using SentencePiece (Kudo & Richardson, 2018) as in XLNet (Yang et al., 2019).\nWe generate masked inputs for the MLM targets using n-gram masking (Joshi et al., 2019), with the length of each n-gram mask selected randomly. The probability for the length n is given byp(n) = 1/n N k=1 1/k\nWe set the maximum length of n-gram (i.e., n) to be 3 (i.e., the MLM target can consist of up to a 3-gram of complete words, such as \"White House correspondents\").\nAll the model updates use a batch size of 4096 and a LAMB optimizer with learning rate 0.00176 (You et al., 2019). We train all models for 125,000 steps unless otherwise specified. Training was done on Cloud TPU V3. The number of TPUs used for training ranged from 64 to 512, depending on model size.\nThe experimental setup described in this section is used for all of our own versions of BERT as well as ALBERT models, unless otherwise specified.\n\n4.2 EVALUATION BENCHMARKS\n\n\n4.2.1 INTRINSIC EVALUATION\nTo monitor the training progress, we create a development set based on the development sets from SQuAD and RACE using the same procedure as in Sec. 4.1. We report accuracies for both MLM and sentence classification tasks. Note that we only use this set to check how the model is converging; it has not been used in a way that would affect the performance of any downstream evaluation, such as via model selection.\n\n4.2.2 DOWNSTREAM EVALUATION\nFollowing Yang et al. ( 2019) and Liu et al. (2019), we evaluate our models on three popular benchmarks: The General Language Understanding Evaluation (GLUE) benchmark (Wang et al., 2018), two versions of the Stanford Question Answering Dataset (SQuAD; Rajpurkar et al., 2016; 2018), and the ReAding Comprehension from Examinations (RACE) dataset (Lai et al., 2017). For completeness, we provide description of these benchmarks in Appendix A.3. As in (Liu et al., 2019), we perform early stopping on the development sets, on which we report all comparisons except for our final comparisons based on the task leaderboards, for which we also report test set results. For GLUE datasets that have large variances on the dev set, we report median over 5 runs.\n\n4.3 OVERALL COMPARISON BETWEEN BERT AND ALBERT\nWe are now ready to quantify the impact of the design choices described in Sec. 3, specifically the ones around parameter efficiency. The improvement in parameter efficiency showcases the most important advantage of ALBERT's design choices, as shown in Table 2 : with only around 70% of BERT-large's parameters, ALBERT-xxlarge achieves significant improvements over BERT-large, as measured by the difference on development set scores for several representative downstream tasks: SQuAD v1.1 (+1.9%), SQuAD v2.0 (+3.1%), MNLI (+1.4%), SST-2 (+2.2%), and RACE (+8.4%).\nAnother interesting observation is the speed of data throughput at training time under the same training configuration (same number of TPUs). Because of less communication and fewer computations, ALBERT models have higher data throughput compared to their corresponding BERT models. If we use BERT-large as the baseline, we observe that ALBERT-large is about 1.7 times faster in iterating through the data while ALBERT-xxlarge is about 3 times slower because of the larger structure.\nNext, we perform ablation experiments that quantify the individual contribution of each of the design choices for ALBERT.\n\n4.4 FACTORIZED EMBEDDING PARAMETERIZATION\nTable 3 shows the effect of changing the vocabulary embedding size E using an ALBERT-base configuration setting (see Table 1), using the same set of representative downstream tasks. Under the non-shared condition (BERT-style), larger embedding sizes give better performance, but not by  Here and everywhere else, the Avg column is computed by averaging the scores of the downstream tasks to its left (the two numbers of F1 and EM for each SQuAD are first averaged).\nmuch. Under the all-shared condition (ALBERT-style), an embedding of size 128 appears to be the best. Based on these results, we use an embedding size E = 128 in all future settings, as a necessary step to do further scaling. Table 3 : The effect of vocabulary embedding size on the performance of ALBERT-base.\n\n4.5 CROSS-LAYER PARAMETER SHARING\nTable 4 presents experiments for various cross-layer parameter-sharing strategies, using an ALBERT-base configuration (Table 1) with two embedding sizes (E = 768 and E = 128). We compare the all-shared strategy (ALBERT-style), the not-shared strategy (BERT-style), and intermediate strategies in which only the attention parameters are shared (but not the FNN ones) or only the FFN parameters are shared (but not the attention ones).\nThe all-shared strategy hurts performance under both conditions, but it is less severe for E = 128 (-1.5 on Avg) compared to E = 768 (-2.5 on Avg). In addition, most of the performance drop appears to come from sharing the FFN-layer parameters, while sharing the attention parameters results in no drop when E = 128 (+0.1 on Avg), and a slight drop when E = 768 (-0.7 on Avg).\nThere are other strategies of sharing the parameters cross layers. For example, We can divide the L layers into N groups of size M , and each size-M group shares parameters. Overall, our experimental results shows that the smaller the group size M is, the better the performance we get. However, decreasing group size M also dramatically increase the number of overall parameters. We choose all-shared strategy as our default choice. Table 4 : The effect of cross-layer parameter-sharing strategies, ALBERT-base configuration.\n\n4.6 SENTENCE ORDER PREDICTION (SOP)\nWe compare head-to-head three experimental conditions for the additional inter-sentence loss: none (XLNet-and RoBERTa-style), NSP (BERT-style), and SOP (ALBERT-style), using an ALBERTbase configuration. Results are shown in Table 5, both over intrinsic (accuracy for the MLM, NSP, and SOP tasks) and downstream tasks. Table 5 : The effect of sentence-prediction loss, NSP vs. SOP, on intrinsic and downstream tasks.\nThe tasks reveal that the NSP loss brings no discriminative power to the SOP task (52.0% accuracy, similar to the random-guess performance for the \"None\" condition). This allows us to conclude that NSP ends up modeling only topic shift. In contrast, the SOP loss does solve the NSP task relatively well (78.9% accuracy), and the SOP task even better (86.5% accuracy).\nEven more importantly, the SOP loss appears to consistently improve downstream task performance for multi-sentence encoding tasks (around +1% for SQuAD1.1, +2% for SQuAD2.0, +1.7% for RACE), for an Avg score improvement of around +1%.\n\n4.7 WHAT IF WE TRAIN FOR THE SAME AMOUNT OF TIME?\nThe speed-up results in Table 2 indicate that data-throughput for BERT-large is about 3.17x higher compared to ALBERT-xxlarge. Since longer training usually leads to better performance, we perform a comparison in which, instead of controlling for data throughput (number of training steps), we control for the actual training time (i.e., let the models train for the same number of hours). In Table 6 : The effect of controlling for training time, BERT-large vs ALBERT-xxlarge configurations.\nAfter training for roughly the same amount of time, ALBERT-xxlarge is significantly better than BERT-large: +1.5% better on Avg, with the difference on RACE as high as +5.2%.\n\n4.8 ADDITIONAL TRAINING DATA AND DROPOUT EFFECTS\nThe experiments done up to this point use only the Wikipedia and BOOKCORPUS datasets, as in (Devlin et al., 2019). In this section, we report measurements on the impact of the additional data used by both XLNet (Yang et al., 2019) and RoBERTa (Liu et al., 2019).\nFig. 2a plots the dev set MLM accuracy under two conditions, without and with additional data, with the latter condition giving a significant boost. We also observe performance improvements on the downstream tasks in Table 7, except for the SQuAD benchmarks (which are Wikipedia-based, and therefore are negatively affected by out-of-domain training material). Table 7 : The effect of additional training data using the ALBERT-base configuration.\nWe also note that, even after training for 1M steps, our largest models still do not overfit to their training data. As a result, we decide to remove dropout to further increase our model capacity. The 8) also confirms that removing dropout helps the downstream tasks. There is empirical (Szegedy et al., 2017) and theoretical (Li et al., 2019) that a combination of batch normalization and dropout in Convolutional Neural Networks may have harmful results. To the best of our knowledge, we are the first to show that dropout can hurt performance in large Transformer-based models. However, the underlying network structure of ALBERT is a special case of the transformer and further experimentation is needed to see if this phenomenon appears with other transformer-based architectures or not. Table 8 : The effect of removing dropout, measured for an ALBERT-xxlarge configuration.\n\n4.9 CURRENT STATE-OF-THE-ART ON NLU TASKS\nThe results we report in this section make use of the training data used by Devlin et al. (2019), as well as the additional data used by Liu et al. (2019) and Yang et al. (2019). We report state-of-the-art results under two settings for fine-tuning: single-model and ensembles. In both settings, we only do single-task fine-tuning 4. Following Liu et al. (2019) The checkpoints that contribute to the final ensemble model are selected based on development set performance; the number of checkpoints considered for this selection range from 6 to 17, depending on the task. For the GLUE (Table 9) and RACE (Table 10) benchmarks, we average the model predictions for the ensemble models, where the candidates are fine-tuned from different training steps using the 12-layer and 24-layer architectures. For SQuAD (Table 10), we average the prediction scores for those spans that have multiple probabilities; we also average the scores of the \"unanswerable\" decision.\n\n5 DISCUSSION\nWhile ALBERT-xxlarge has less parameters than BERT-large and gets significantly better results, it is computationally more expensive due to its larger structure. An important next step is thus to speed up the training and inference speed of ALBERT through methods like sparse attention (Child et al., 2019) and block attention (Shen et al., 2018). An orthogonal line of research, which could provide additional representation power, includes hard example mining (Mikolov et al., 2013) In this section, we check how depth (number of layers) and width (hidden size) affect the performance of ALBERT. Table 11 shows the performance of an ALBERT-large configuration (see Table 1) using different numbers of layers. Networks with 3 or more layers are trained by fine-tuning using the parameters from the depth before (e.g., the 12-layer network parameters are fine-tuned from the checkpoint of the 6-layer network parameters). 5 Similar technique has been used in Gong et al. (2019). If we compare a 3-layer ALBERT model with a 1-layer ALBERT model, although they have the same number of parameters, the performance increases significantly. However, there are diminishing returns when continuing to increase the number of layers: the results of a 12-layer network are relatively close to the results of a 24-layer network, and the performance of a 48-layer network appears to decline. Table 11 : The effect of increasing the number of layers for an ALBERT-large configuration.\nA similar phenomenon, this time for width, can be seen in Table 12 for a 3-layer ALBERT-large configuration. As we increase the hidden size, we get an increase in performance with diminishing returns. At a hidden size of 6144, the performance appears to decline significantly. We note that none of these models appear to overfit the training data, and they all have higher training and development loss compared to the best-performing ALBERT configurations.\n\nFootnotes:\n1: Similar to BERT, all the experiments in this paper use a vocabulary size V of 30,000.\n2: Since a negative example is constructed using material from a different document, the negative-example segment is misaligned both from a topic and from a coherence perspective.\n3: A segment is usually comprised of more than one natural sentence, which has been shown to benefit performance by Liu et al. (2019).\n4: Following Liu et al. (2019), we fine-tune for RTE, STS, and MRPC using an MNLI checkpoint.\n5: If we compare the performance of ALBERT-large here to the performance in Table2, we can see that this warm-start technique does not help to improve the downstream performance. However, it does help the 48-layer network to converge. A similar technique has been applied to our ALBERT-xxlarge, where we warm-start from a\n6: -layer network.\n\nReferences:\n\n- Alexei Baevski and Michael Auli. Adaptive input representations for neural language modeling. arXiv preprint arXiv:1809.10853, 2018.- Shaojie Bai, J. Zico Kolter, and Vladlen Koltun. Deep equilibrium models. In Neural Information Processing Systems (NeurIPS), 2019.\n\n- Roy Bar-Haim, Ido Dagan, Bill Dolan, Lisa Ferro, Danilo Giampiccolo, Bernardo Magnini, and Idan Szpektor. The second PASCAL recognising textual entailment challenge. In Proceedings of the second PASCAL challenges workshop on recognising textual entailment, volume 6, pp. 6-4. Venice, 2006.\n\n- Luisa Bentivogli, Peter Clark, Ido Dagan, and Danilo Giampiccolo. The fifth PASCAL recognizing textual entailment challenge. In TAC, 2009.\n\n- Daniel Cer, Mona Diab, Eneko Agirre, I\u00f1igo Lopez-Gazpio, and Lucia Specia. SemEval-2017 task 1: Semantic textual similarity multilingual and crosslingual focused evaluation. In Proceedings of the 11th International Workshop on Semantic Evaluation (SemEval-2017), pp. 1-14, Vancouver, Canada, August 2017. Association for Computational Linguistics. doi: 10.18653/v1/S17-2001. URL https://www.aclweb.org/anthology/S17-2001.\n\n- Tianqi Chen, Bing Xu, Chiyuan Zhang, and Carlos Guestrin. Training deep nets with sublinear memory cost. arXiv preprint arXiv:1604.06174, 2016.\n\n- Rewon Child, Scott Gray, Alec Radford, and Ilya Sutskever. Generating long sequences with sparse transformers. arXiv preprint arXiv:1904.10509, 2019.\n\n- Kevin Clark, Minh-Thang Luong, Urvashi Khandelwal, Christopher D Manning, and Quoc V Le. Bam! born-again multi-task networks for natural language understanding. arXiv preprint arXiv:1907.04829, 2019.\n\n- Ido Dagan, Oren Glickman, and Bernardo Magnini. The PASCAL recognising textual entailment challenge. In Machine Learning Challenges Workshop, pp. 177-190. Springer, 2005.\n\n- Andrew M Dai and Quoc V Le. Semi-supervised sequence learning. In Advances in neural infor- mation processing systems, pp. 3079-3087, 2015.\n\n- Zihang Dai, Zhilin Yang, Yiming Yang, William W Cohen, Jaime Carbonell, Quoc V Le, and Ruslan Salakhutdinov. Transformer-xl: Attentive language models beyond a fixed-length context. arXiv preprint arXiv:1901.02860, 2019.\n\n- Mostafa Dehghani, Stephan Gouws, Oriol Vinyals, Jakob Uszkoreit, and \u0141ukasz Kaiser. Universal transformers. arXiv preprint arXiv:1807.03819, 2018.\n\n- Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. BERT: Pre-training of deep bidirectional transformers for language understanding. In Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, Volume 1 (Long and Short Papers), pp. 4171-4186, Minneapolis, Minnesota, June 2019. Association for Computational Linguistics. doi: 10.18653/v1/N19-1423. URL https: //www.aclweb.org/anthology/N19-1423.\n\n- William B. Dolan and Chris Brockett. Automatically constructing a corpus of sentential paraphrases. In Proceedings of the Third International Workshop on Paraphrasing (IWP2005), 2005. URL https://www.aclweb.org/anthology/I05-5002.\n\n- Zhe Gan, Yunchen Pu, Ricardo Henao, Chunyuan Li, Xiaodong He, and Lawrence Carin. Learn- ing generic sentence representations using convolutional neural networks. In Proceedings of the 2017 Conference on Empirical Methods in Natural Language Processing, pp. 2390-2400, Copenhagen, Denmark, September 2017. Association for Computational Linguistics. doi: 10.18653/v1/D17-1254. URL https://www.aclweb.org/anthology/D17-1254.\n\n- Danilo Giampiccolo, Bernardo Magnini, Ido Dagan, and Bill Dolan. The third PASCAL recognizing textual entailment challenge. In Proceedings of the ACL-PASCAL Workshop on Textual Entail- ment and Paraphrasing, pp. 1-9, Prague, June 2007. Association for Computational Linguistics. URL https://www.aclweb.org/anthology/W07-1401.\n\n- Aidan N Gomez, Mengye Ren, Raquel Urtasun, and Roger B Grosse. The reversible residual net- work: Backpropagation without storing activations. In Advances in neural information processing systems, pp. 2214-2224, 2017.\n\n- Linyuan Gong, Di He, Zhuohan Li, Tao Qin, Liwei Wang, and Tieyan Liu. Efficient training of bert by progressively stacking. In International Conference on Machine Learning, pp. 2337-2346, 2019.\n\n- Edouard Grave, Armand Joulin, Moustapha Ciss\u00e9, Herv\u00e9 J\u00e9gou, et al. Efficient softmax approxima- tion for gpus. In Proceedings of the 34th International Conference on Machine Learning-Volume 70, pp. 1302-1310. JMLR. org, 2017.\n\n- Barbara J. Grosz, Aravind K. Joshi, and Scott Weinstein. Centering: A framework for modeling the local coherence of discourse. Computational Linguistics, 21(2):203-225, 1995. URL https: //www.aclweb.org/anthology/J95-2003.\n\n- M.A.K. Halliday and Ruqaiya Hasan. Cohesion in English. Routledge, 1976.\n\n- Jie Hao, Xing Wang, Baosong Yang, Longyue Wang, Jinfeng Zhang, and Zhaopeng Tu. Modeling recurrence for transformer. Proceedings of the 2019 Conference of the North, 2019. doi: 10. 18653/v1/n19-1122. URL http://dx.doi.org/10.18653/v1/n19-1122.\n\n- Dan Hendrycks and Kevin Gimpel. Gaussian Error Linear Units (GELUs). arXiv preprint arXiv:1606.08415, 2016.\n\n- Felix Hill, Kyunghyun Cho, and Anna Korhonen. Learning distributed representations of sentences from unlabelled data. In Proceedings of the 2016 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, pp. 1367-1377. Association for Computational Linguistics, 2016. doi: 10.18653/v1/N16-1162. URL http: //aclweb.org/anthology/N16-1162.\n\n- Jerry R. Hobbs. Coherence and coreference. Cognitive Science, 3(1):67-90, 1979.\n\n- Jeremy Howard and Sebastian Ruder. Universal language model fine-tuning for text classification. arXiv preprint arXiv:1801.06146, 2018.\n\n- Shankar Iyer, Nikhil Dandekar, and Kornl Csernai. First quora dataset release: Ques- tion pairs, January 2017. URL https://www.quora.com/q/quoradata/ First-Quora-Dataset-Release-Question-Pairs.\n\n- Yacine Jernite, Samuel R Bowman, and David Sontag. Discourse-based objectives for fast unsuper- vised sentence representation learning. arXiv preprint arXiv:1705.00557, 2017.\n\n- Mandar Joshi, Danqi Chen, Yinhan Liu, Daniel S Weld, Luke Zettlemoyer, and Omer Levy. SpanBERT: Improving pre-training by representing and predicting spans. arXiv preprint arXiv:1907.10529, 2019.\n\n- Ryan Kiros, Yukun Zhu, Ruslan Salakhutdinov, Richard S. Zemel, Antonio Torralba, Raquel Ur- tasun, and Sanja Fidler. Skip-thought vectors. In Proceedings of the 28th International Con- ference on Neural Information Processing Systems -Volume 2, NIPS'15, pp. 3294-3302, Cam- bridge, MA, USA, 2015. MIT Press. URL http://dl.acm.org/citation.cfm?id= 2969442.2969607.\n\n- Taku Kudo and John Richardson. SentencePiece: A simple and language independent sub- word tokenizer and detokenizer for neural text processing. In Proceedings of the 2018 Con- ference on Empirical Methods in Natural Language Processing: System Demonstrations, pp. 66-71, Brussels, Belgium, November 2018. Association for Computational Linguistics. doi: 10.18653/v1/D18-2012. URL https://www.aclweb.org/anthology/D18-2012.\n\n- Guokun Lai, Qizhe Xie, Hanxiao Liu, Yiming Yang, and Eduard Hovy. RACE: Large-scale ReAding comprehension dataset from examinations. In Proceedings of the 2017 Conference on Empirical Methods in Natural Language Processing, pp. 785-794, Copenhagen, Denmark, September 2017. Association for Computational Linguistics. doi: 10.18653/v1/D17-1082. URL https://www. aclweb.org/anthology/D17-1082.\n\n- Quoc Le and Tomas Mikolov. Distributed representations of sentences and documents. In Proceed- ings of the 31st ICML, Beijing, China, 2014.\n\n- Hector Levesque, Ernest Davis, and Leora Morgenstern. The Winograd schema challenge. In Thir- teenth International Conference on the Principles of Knowledge Representation and Reasoning, 2012.\n\n- Xiang Li, Shuo Chen, Xiaolin Hu, and Jian Yang. Understanding the disharmony between dropout and batch normalization by variance shift. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition, pp. 2682-2690, 2019.\n\n- Yinhan Liu, Myle Ott, Naman Goyal, Jingfei Du, Mandar Joshi, Danqi Chen, Omer Levy, Mike Lewis, Luke Zettlemoyer, and Veselin Stoyanov. RoBERTa: A robustly optimized BERT pre- training approach. arXiv preprint arXiv:1907.11692, 2019.\n\n- Bryan McCann, James Bradbury, Caiming Xiong, and Richard Socher. Learned in translation: Contextualized word vectors. In I. Guyon, U. V. Luxburg, S. Bengio, H. Wallach, R. Fergus, S. Vishwanathan, and R. Garnett (eds.), Advances in Neural Information Processing Systems 30, pp. 6294-6305. Curran Associates, Inc., 2017. URL http://papers.nips.cc/paper/ 7209-learned-in-translation-contextualized-word-vectors.pdf.\n\n- Tomas Mikolov, Ilya Sutskever, Kai Chen, Greg S Corrado, and Jeff Dean. Distributed represen- tations of words and phrases and their compositionality. In Advances in neural information pro- cessing systems, pp. 3111-3119, 2013.\n\n- Allen Nie, Erin Bennett, and Noah Goodman. DisSent: Learning sentence representations from ex- plicit discourse relations. In Proceedings of the 57th Annual Meeting of the Association for Com- putational Linguistics, pp. 4497-4510, Florence, Italy, July 2019. Association for Computational Linguistics. doi: 10.18653/v1/P19-1442. URL https://www.aclweb.org/anthology/ P19-1442.\n\n- Jeffrey Pennington, Richard Socher, and Christopher Manning. Glove: Global vectors for word rep- resentation. In Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing (EMNLP), pp. 1532-1543, Doha, Qatar, October 2014. Association for Computational Linguistics. doi: 10.3115/v1/D14-1162. URL https://www.aclweb.org/anthology/ D14-1162.\n\n- Matthew Peters, Mark Neumann, Mohit Iyyer, Matt Gardner, Christopher Clark, Kenton Lee, and Luke Zettlemoyer. Deep contextualized word representations. In Proceedings of the 2018 Con- ference of the North American Chapter of the Association for Computational Linguistics: Hu- man Language Technologies, Volume 1 (Long Papers), pp. 2227-2237, New Orleans, Louisiana, June 2018. Association for Computational Linguistics. doi: 10.18653/v1/N18-1202. URL https://www.aclweb.org/anthology/N18-1202.\n\n- Alec Radford, Karthik Narasimhan, Tim Salimans, and Ilya Sutskever. Improving language understanding by generative pre-training. https://s3-us-west-2.amazonaws.com/ openai-assets/research-covers/language-unsupervised/language_ understanding_paper.pdf, 2018.\n\n- Alec Radford, Jeffrey Wu, Rewon Child, David Luan, Dario Amodei, and Ilya Sutskever. Language models are unsupervised multitask learners. OpenAI Blog, 1(8), 2019.\n\n- Colin Raffel, Noam Shazeer, Adam Roberts, Katherine Lee, Sharan Narang, Michael Matena, Yanqi Zhou, Wei Li, and Peter J Liu. Exploring the limits of transfer learning with a unified text-to-text transformer. arXiv preprint arXiv:1910.10683, 2019.\n\n- Pranav Rajpurkar, Jian Zhang, Konstantin Lopyrev, and Percy Liang. SQuAD: 100,000+ questions for machine comprehension of text. In Proceedings of the 2016 Conference on Empirical Methods in Natural Language Processing, pp. 2383-2392, Austin, Texas, November 2016. Association for Computational Linguistics. doi: 10.18653/v1/D16-1264. URL https://www.aclweb. org/anthology/D16-1264.\n\n- Pranav Rajpurkar, Robin Jia, and Percy Liang. Know what you don't know: Unanswerable questions for SQuAD. In Proceedings of the 56th Annual Meeting of the Association for Computational Linguistics (Volume 2: Short Papers), pp. 784-789, Melbourne, Australia, July 2018. Association for Computational Linguistics. doi: 10.18653/v1/P18-2124. URL https://www.aclweb. org/anthology/P18-2124.\n\n- Noam Shazeer, Youlong Cheng, Niki Parmar, Dustin Tran, Ashish Vaswani, Penporn Koanantakool, Peter Hawkins, HyoukJoong Lee, Mingsheng Hong, Cliff Young, et al. Mesh-tensorflow: Deep learning for supercomputers. In Advances in Neural Information Processing Systems, pp. 10414- 10423, 2018.\n\n- Tao Shen, Tianyi Zhou, Guodong Long, Jing Jiang, and Chengqi Zhang. Bi-directional block self- attention for fast and memory-efficient sequence modeling. arXiv preprint arXiv:1804.00857, 2018.\n\n- Mohammad Shoeybi, Mostofa Patwary, Raul Puri, Patrick LeGresley, Jared Casper, and Bryan Catanzaro. Megatron-LM: Training multi-billion parameter language models using model par- allelism, 2019.\n\n- Richard Socher, Alex Perelygin, Jean Wu, Jason Chuang, Christopher D. Manning, Andrew Ng, and Christopher Potts. Recursive deep models for semantic compositionality over a sentiment treebank. In Proceedings of the 2013 Conference on Empirical Methods in Natural Language Processing, pp. 1631-1642, Seattle, Washington, USA, October 2013. Association for Computa- tional Linguistics. URL https://www.aclweb.org/anthology/D13-1170.\n\n- Siqi Sun, Yu Cheng, Zhe Gan, and Jingjing Liu. Patient knowledge distillation for BERT model compression. arXiv preprint arXiv:1908.09355, 2019.\n\n- Christian Szegedy, Sergey Ioffe, Vincent Vanhoucke, and Alexander A Alemi. Inception-v4, inception-resnet and the impact of residual connections on learning. In Thirty-First AAAI Confer- ence on Artificial Intelligence, 2017.\n\n- Iulia Turc, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. Well-read students learn better: The impact of student initialization on knowledge distillation. arXiv preprint arXiv:1908.08962, 2019.\n\n- Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez, \u0141ukasz Kaiser, and Illia Polosukhin. Attention is all you need. In Advances in neural information processing systems, pp. 5998-6008, 2017.\n\n- Alex Wang, Amanpreet Singh, Julian Michael, Felix Hill, Omer Levy, and Samuel Bowman. GLUE: A multi-task benchmark and analysis platform for natural language understanding. In Proceed- ings of the 2018 EMNLP Workshop BlackboxNLP: Analyzing and Interpreting Neural Networks for NLP, pp. 353-355, Brussels, Belgium, November 2018. Association for Computational Lin- guistics. doi: 10.18653/v1/W18-5446. URL https://www.aclweb.org/anthology/ W18-5446.\n\n- Wei Wang, Bin Bi, Ming Yan, Chen Wu, Zuyi Bao, Liwei Peng, and Luo Si. StructBERT: Incor- porating language structures into pre-training for deep language understanding. arXiv preprint arXiv:1908.04577, 2019.\n\n- Alex Warstadt, Amanpreet Singh, and Samuel R Bowman. Neural network acceptability judgments. arXiv preprint arXiv:1805.12471, 2018.\n\n- Adina Williams, Nikita Nangia, and Samuel Bowman. A broad-coverage challenge corpus for sen- tence understanding through inference. In Proceedings of the 2018 Conference of the North Hidden size Parameters SQuAD1.1 SQuAD2.0 MNLI SST-2 RACE Avg 1024 18M\n\n- Table 12: The effect of increasing the hidden-layer size for an ALBERT-large 3-layer configuration. A.2 DO VERY WIDE ALBERT MODELS NEED TO BE DEEP(ER) TOO? In Section A.1, we show that for ALBERT-large (H=1024), the difference between a 12-layer and a 24-layer configuration is small. Does this result still hold for much wider ALBERT configurations, such as ALBERT-xxlarge (H=4096)? Number of layers SQuAD1.1 SQuAD2.0 MNLI SST-2 RACE Avg 12\n\n- A.3 DOWNSTREAM EVALUATION TASKS GLUE GLUE is comprised of 9 tasks, namely Corpus of Linguistic Acceptability (CoLA; Warstadt et al., 2018), Stanford Sentiment Treebank (SST; Socher et al., 2013), Microsoft Research Paraphrase Corpus (MRPC;\n\n- Dolan & Brockett, 2005), Semantic Textual Similarity Bench- mark (STS; Cer et al., 2017), Quora Question Pairs (QQP; Iyer et al., 2017), Multi-Genre NLI (MNLI; Williams et al., 2018), Question NLI (QNLI; Rajpurkar et al., 2016), Recognizing Textual Entailment (RTE; Dagan et al., 2005; Bar-Haim et al., 2006; Giampiccolo et al., 2007; Bentivogli et al., 2009) and Winograd NLI (WNLI; Levesque et al., 2012). It focuses on evaluating model capabilities for natural language understanding. When reporting MNLI results, we only report the \"match\" condition (MNLI-m). We follow the finetuning procedures from prior work (Devlin et al., 2019;\n\n- Liu et al., 2019;\n\n- Yang et al., 2019) and report the held-out test set performance obtained from GLUE submissions. For test set submissions, we perform task-specific modifications for WNLI and QNLI as described by Liu et al. (2019) and Yang et al. (2019).\n\n- SQuAD SQuAD is an extractive question answering dataset built from Wikipedia. The answers are segments from the context paragraphs and the task is to predict answer spans. We evaluate our models on two versions of SQuAD: v1.1 and v2.0. SQuAD v1.1 has 100,000 human-annotated question/answer pairs. SQuAD v2.0 additionally introduced 50,000 unanswerable questions. For SQuAD v1.1, we use the same training procedure as BERT, whereas for SQuAD v2.0, models are jointly trained with a span extraction loss and an additional classifier for predicting answerabil- ity (Yang et al., 2019; Liu et al., 2019). We report both development set and test set performance.\n\n- RACE RACE is a large-scale dataset for multi-choice reading comprehension, collected from En- glish examinations in China with nearly 100,000 questions. Each instance in RACE has 4 candidate answers. Following prior work (Yang et al., 2019; Liu et al., 2019), we use the concatenation of the passage, question, and each candidate answer as the input to models. Then, we use the represen- tations from the \"[CLS]\" token for predicting the probability of each answer. The dataset consists of two domains: middle school and high school. We train our models on both domains and report accuracies on both the development set and test set.\n\n", "annotations": {"Abstract": [{"begin": 78, "end": 1159, "idx": 0}], "Head": [{"begin": 1162, "end": 1176, "n": "1", "idx": 0}, {"begin": 5252, "end": 5266, "n": "2", "idx": 1}, {"begin": 5269, "end": 5328, "n": "2.1", "idx": 2}, {"begin": 7221, "end": 7254, "n": "2.2", "idx": 3}, {"begin": 8231, "end": 8263, "n": "2.3", "idx": 4}, {"begin": 9986, "end": 10010, "n": "3", "idx": 5}, {"begin": 10201, "end": 10231, "n": "3.1", "idx": 6}, {"begin": 14117, "end": 14157, "idx": 7}, {"begin": 16475, "end": 16490, "n": "3.2", "idx": 8}, {"begin": 17410, "end": 17432, "n": "4", "idx": 9}, {"begin": 17435, "end": 17457, "n": "4.1", "idx": 10}, {"begin": 18962, "end": 18987, "n": "4.2", "idx": 11}, {"begin": 18990, "end": 19016, "n": "4.2.1", "idx": 12}, {"begin": 19432, "end": 19459, "n": "4.2.2", "idx": 13}, {"begin": 20216, "end": 20262, "n": "4.3", "idx": 14}, {"begin": 21436, "end": 21477, "n": "4.4", "idx": 15}, {"begin": 22256, "end": 22289, "n": "4.5", "idx": 16}, {"begin": 23629, "end": 23664, "n": "4.6", "idx": 17}, {"begin": 24685, "end": 24734, "n": "4.7", "idx": 18}, {"begin": 25404, "end": 25452, "n": "4.8", "idx": 19}, {"begin": 27046, "end": 27087, "n": "4.9", "idx": 20}, {"begin": 28051, "end": 28063, "n": "5", "idx": 21}], "ReferenceToBib": [{"begin": 1203, "end": 1219, "target": "#b9", "idx": 0}, {"begin": 1220, "end": 1241, "target": "#b41", "idx": 1}, {"begin": 1242, "end": 1262, "target": "#b12", "idx": 2}, {"begin": 1263, "end": 1284, "target": "#b25", "idx": 3}, {"begin": 1691, "end": 1709, "target": "#b31", "idx": 4}, {"begin": 1921, "end": 1939, "target": "#b61", "idx": 5}, {"begin": 2271, "end": 2292, "target": "#b12", "idx": 6}, {"begin": 2293, "end": 2314, "target": "#b42", "idx": 7}, {"begin": 2410, "end": 2428, "target": "#b50", "idx": 8}, {"begin": 2429, "end": 2447, "target": "#b52", "idx": 9}, {"begin": 3090, "end": 3112, "target": "#b46", "idx": 10}, {"begin": 3113, "end": 3134, "target": "#b48", "idx": 11}, {"begin": 3164, "end": 3183, "target": "#b5", "idx": 12}, {"begin": 3184, "end": 3203, "target": "#b16", "idx": 13}, {"begin": 4698, "end": 4717, "target": "#b62", "idx": 14}, {"begin": 4718, "end": 4735, "target": "#b61", "idx": 15}, {"begin": 5460, "end": 5482, "target": "#b37", "idx": 16}, {"begin": 5483, "end": 5502, "target": "#b32", "idx": 17}, {"begin": 5503, "end": 5518, "target": "#b9", "idx": 18}, {"begin": 5519, "end": 5539, "target": "#b40", "idx": 19}, {"begin": 5540, "end": 5560, "target": "#b12", "idx": 20}, {"begin": 5561, "end": 5582, "target": "#b41", "idx": 21}, {"begin": 5583, "end": 5588, "idx": 22}, {"begin": 5713, "end": 5735, "target": "#b37", "idx": 23}, {"begin": 5736, "end": 5760, "target": "#b39", "idx": 24}, {"begin": 5779, "end": 5800, "target": "#b36", "idx": 25}, {"begin": 5801, "end": 5821, "target": "#b40", "idx": 26}, {"begin": 5890, "end": 5906, "target": "#b9", "idx": 27}, {"begin": 5907, "end": 5928, "target": "#b41", "idx": 28}, {"begin": 5929, "end": 5949, "target": "#b12", "idx": 29}, {"begin": 6049, "end": 6069, "target": "#b12", "idx": 30}, {"begin": 6656, "end": 6674, "target": "#b5", "idx": 31}, {"begin": 6810, "end": 6829, "target": "#b16", "idx": 32}, {"begin": 7034, "end": 7054, "target": "#b43", "idx": 33}, {"begin": 7363, "end": 7385, "target": "#b53", "idx": 34}, {"begin": 7546, "end": 7568, "target": "#b11", "idx": 35}, {"begin": 7768, "end": 7785, "target": "#b1", "idx": 36}, {"begin": 8071, "end": 8088, "target": "#b21", "idx": 37}, {"begin": 8617, "end": 8630, "target": "#b24", "idx": 38}, {"begin": 8631, "end": 8654, "target": "#b20", "idx": 39}, {"begin": 8655, "end": 8674, "target": "#b19", "idx": 40}, {"begin": 8750, "end": 8770, "target": "#b29", "idx": 41}, {"begin": 8784, "end": 8803, "target": "#b23", "idx": 42}, {"begin": 9026, "end": 9044, "target": "#b14", "idx": 43}, {"begin": 9087, "end": 9109, "target": "#b27", "idx": 44}, {"begin": 9110, "end": 9127, "target": "#b38", "idx": 45}, {"begin": 9192, "end": 9213, "target": "#b27", "idx": 46}, {"begin": 9426, "end": 9447, "target": "#b12", "idx": 47}, {"begin": 9758, "end": 9776, "target": "#b55", "idx": 48}, {"begin": 10177, "end": 10198, "target": "#b12", "idx": 49}, {"begin": 10329, "end": 10351, "target": "#b53", "idx": 50}, {"begin": 10377, "end": 10403, "target": "#b22", "idx": 51}, {"begin": 10563, "end": 10583, "target": "#b12", "idx": 52}, {"begin": 10868, "end": 10887, "target": "#b62", "idx": 53}, {"begin": 10900, "end": 10918, "target": "#b61", "idx": 54}, {"begin": 11324, "end": 11342, "target": "#b61", "idx": 55}, {"begin": 12664, "end": 12684, "target": "#b18", "idx": 56}, {"begin": 12686, "end": 12707, "target": "#b0", "idx": 57}, {"begin": 12709, "end": 12726, "target": "#b10", "idx": 58}, {"begin": 13287, "end": 13293, "idx": 59}, {"begin": 14244, "end": 14265, "target": "#b12", "idx": 60}, {"begin": 14901, "end": 14920, "target": "#b62", "idx": 61}, {"begin": 14921, "end": 14938, "target": "#b61", "idx": 62}, {"begin": 17527, "end": 17548, "target": "#b12", "idx": 63}, {"begin": 17579, "end": 17597, "target": "#b29", "idx": 64}, {"begin": 17620, "end": 17641, "target": "#b12", "idx": 65}, {"begin": 18081, "end": 18106, "target": "#b30", "idx": 66}, {"begin": 18113, "end": 18138, "idx": 67}, {"begin": 18207, "end": 18227, "target": "#b28", "idx": 68}, {"begin": 18608, "end": 18626, "idx": 69}, {"begin": 19494, "end": 19511, "target": "#b61", "idx": 70}, {"begin": 19628, "end": 19647, "target": "#b54", "idx": 71}, {"begin": 19713, "end": 19736, "target": "#b44", "idx": 72}, {"begin": 19737, "end": 19742, "target": "#b59", "idx": 73}, {"begin": 19807, "end": 19825, "target": "#b31", "idx": 74}, {"begin": 19911, "end": 19929, "target": "#b61", "idx": 75}, {"begin": 25545, "end": 25566, "target": "#b12", "idx": 76}, {"begin": 25664, "end": 25683, "target": "#b62", "idx": 77}, {"begin": 25696, "end": 25714, "target": "#b61", "idx": 78}, {"begin": 26451, "end": 26473, "target": "#b51", "idx": 79}, {"begin": 26490, "end": 26506, "target": "#b17", "idx": 80}, {"begin": 27164, "end": 27184, "target": "#b12", "idx": 81}, {"begin": 27225, "end": 27242, "target": "#b61", "idx": 82}, {"begin": 27247, "end": 27265, "target": "#b62", "idx": 83}, {"begin": 27432, "end": 27449, "target": "#b61", "idx": 84}, {"begin": 28350, "end": 28370, "target": "#b6", "idx": 85}, {"begin": 28391, "end": 28409, "target": "#b47", "idx": 86}, {"begin": 28526, "end": 28548, "target": "#b37", "idx": 87}, {"begin": 29023, "end": 29041, "target": "#b17", "idx": 88}, {"begin": 30391, "end": 30408, "target": "#b61", "idx": 89}], "ReferenceToFootnote": [{"begin": 11800, "end": 11801, "target": "#foot_0", "idx": 0}, {"begin": 15299, "end": 15300, "target": "#foot_1", "idx": 1}, {"begin": 17871, "end": 17872, "target": "#foot_2", "idx": 2}, {"begin": 27419, "end": 27420, "target": "#foot_3", "idx": 3}, {"begin": 28986, "end": 28987, "target": "#foot_4", "idx": 4}], "SectionFootnote": [{"begin": 29995, "end": 30844, "idx": 0}], "ReferenceString": [{"begin": 30861, "end": 30993, "id": "b0", "idx": 0}, {"begin": 30995, "end": 31126, "id": "b1", "idx": 1}, {"begin": 31130, "end": 31419, "id": "b2", "idx": 2}, {"begin": 31423, "end": 31561, "id": "b3", "idx": 3}, {"begin": 31565, "end": 31986, "id": "b4", "idx": 4}, {"begin": 31990, "end": 32133, "id": "b5", "idx": 5}, {"begin": 32137, "end": 32286, "id": "b6", "idx": 6}, {"begin": 32290, "end": 32489, "id": "b7", "idx": 7}, {"begin": 32493, "end": 32663, "id": "b8", "idx": 8}, {"begin": 32667, "end": 32806, "id": "b9", "idx": 9}, {"begin": 32810, "end": 33030, "id": "b10", "idx": 10}, {"begin": 33034, "end": 33180, "id": "b11", "idx": 11}, {"begin": 33184, "end": 33680, "id": "b12", "idx": 12}, {"begin": 33684, "end": 33914, "id": "b13", "idx": 13}, {"begin": 33918, "end": 34340, "id": "b14", "idx": 14}, {"begin": 34344, "end": 34669, "id": "b15", "idx": 15}, {"begin": 34673, "end": 34890, "id": "b16", "idx": 16}, {"begin": 34894, "end": 35087, "id": "b17", "idx": 17}, {"begin": 35091, "end": 35316, "id": "b18", "idx": 18}, {"begin": 35320, "end": 35542, "id": "b19", "idx": 19}, {"begin": 35546, "end": 35618, "id": "b20", "idx": 20}, {"begin": 35622, "end": 35865, "id": "b21", "idx": 21}, {"begin": 35869, "end": 35976, "id": "b22", "idx": 22}, {"begin": 35980, "end": 36378, "id": "b23", "idx": 23}, {"begin": 36382, "end": 36461, "id": "b24", "idx": 24}, {"begin": 36465, "end": 36600, "id": "b25", "idx": 25}, {"begin": 36604, "end": 36797, "id": "b26", "idx": 26}, {"begin": 36801, "end": 36975, "id": "b27", "idx": 27}, {"begin": 36979, "end": 37174, "id": "b28", "idx": 28}, {"begin": 37178, "end": 37541, "id": "b29", "idx": 29}, {"begin": 37545, "end": 37966, "id": "b30", "idx": 30}, {"begin": 37970, "end": 38361, "id": "b31", "idx": 31}, {"begin": 38365, "end": 38504, "id": "b32", "idx": 32}, {"begin": 38508, "end": 38700, "id": "b33", "idx": 33}, {"begin": 38704, "end": 38942, "id": "b34", "idx": 34}, {"begin": 38946, "end": 39179, "id": "b35", "idx": 35}, {"begin": 39183, "end": 39596, "id": "b36", "idx": 36}, {"begin": 39600, "end": 39827, "id": "b37", "idx": 37}, {"begin": 39831, "end": 40208, "id": "b38", "idx": 38}, {"begin": 40212, "end": 40579, "id": "b39", "idx": 39}, {"begin": 40583, "end": 41076, "id": "b40", "idx": 40}, {"begin": 41080, "end": 41337, "id": "b41", "idx": 41}, {"begin": 41341, "end": 41503, "id": "b42", "idx": 42}, {"begin": 41507, "end": 41753, "id": "b43", "idx": 43}, {"begin": 41757, "end": 42138, "id": "b44", "idx": 44}, {"begin": 42142, "end": 42528, "id": "b45", "idx": 45}, {"begin": 42532, "end": 42820, "id": "b46", "idx": 46}, {"begin": 42824, "end": 43016, "id": "b47", "idx": 47}, {"begin": 43020, "end": 43214, "id": "b48", "idx": 48}, {"begin": 43218, "end": 43647, "id": "b49", "idx": 49}, {"begin": 43651, "end": 43795, "id": "b50", "idx": 50}, {"begin": 43799, "end": 44024, "id": "b51", "idx": 51}, {"begin": 44028, "end": 44227, "id": "b52", "idx": 52}, {"begin": 44231, "end": 44457, "id": "b53", "idx": 53}, {"begin": 44461, "end": 44909, "id": "b54", "idx": 54}, {"begin": 44913, "end": 45121, "id": "b55", "idx": 55}, {"begin": 45125, "end": 45256, "id": "b56", "idx": 56}, {"begin": 45260, "end": 45512, "id": "b57", "idx": 57}, {"begin": 45516, "end": 45957, "id": "b58", "idx": 58}, {"begin": 45961, "end": 46200, "id": "b59", "idx": 59}, {"begin": 46204, "end": 46841, "id": "b60", "idx": 60}, {"begin": 46845, "end": 46862, "id": "b61", "idx": 61}, {"begin": 46866, "end": 47102, "id": "b62", "idx": 62}, {"begin": 47106, "end": 47764, "id": "b63", "idx": 63}, {"begin": 47768, "end": 48401, "id": "b64", "idx": 64}], "ReferenceToTable": [{"begin": 13705, "end": 13706, "target": "#tab_0", "idx": 0}, {"begin": 16598, "end": 16599, "target": "#tab_0", "idx": 1}, {"begin": 20522, "end": 20523, "target": "#tab_2", "idx": 2}, {"begin": 21484, "end": 21485, "idx": 3}, {"begin": 21601, "end": 21602, "target": "#tab_0", "idx": 4}, {"begin": 22176, "end": 22177, "idx": 5}, {"begin": 22296, "end": 22297, "idx": 6}, {"begin": 22415, "end": 22416, "target": "#tab_0", "idx": 7}, {"begin": 23541, "end": 23542, "idx": 8}, {"begin": 23895, "end": 23896, "idx": 9}, {"begin": 23989, "end": 23990, "idx": 10}, {"begin": 24765, "end": 24766, "target": "#tab_2", "idx": 11}, {"begin": 25134, "end": 25135, "target": "#tab_6", "idx": 12}, {"begin": 25939, "end": 25940, "idx": 13}, {"begin": 26083, "end": 26084, "idx": 14}, {"begin": 26365, "end": 26366, "idx": 15}, {"begin": 26963, "end": 26964, "idx": 16}, {"begin": 27680, "end": 27681, "target": "#tab_9", "idx": 17}, {"begin": 27699, "end": 27701, "target": "#tab_11", "idx": 18}, {"begin": 27903, "end": 27905, "target": "#tab_11", "idx": 19}, {"begin": 28668, "end": 28670, "target": "#tab_0", "idx": 20}, {"begin": 29450, "end": 29452, "target": "#tab_0", "idx": 21}, {"begin": 29600, "end": 29602, "target": "#tab_2", "idx": 22}], "Footnote": [{"begin": 30006, "end": 30094, "id": "foot_0", "n": "1", "idx": 0}, {"begin": 30095, "end": 30274, "id": "foot_1", "n": "2", "idx": 1}, {"begin": 30275, "end": 30409, "id": "foot_2", "n": "3", "idx": 2}, {"begin": 30410, "end": 30503, "id": "foot_3", "n": "4", "idx": 3}, {"begin": 30504, "end": 30825, "id": "foot_4", "n": "5", "idx": 4}, {"begin": 30826, "end": 30844, "id": "foot_5", "n": "6", "idx": 5}], "ReferenceToFormula": [{"begin": 19484, "end": 19488, "idx": 0}], "Paragraph": [{"begin": 88, "end": 1159, "idx": 0}, {"begin": 1177, "end": 2140, "idx": 1}, {"begin": 2141, "end": 3009, "idx": 2}, {"begin": 3010, "end": 3204, "idx": 3}, {"begin": 3205, "end": 3482, "idx": 4}, {"begin": 3483, "end": 4478, "idx": 5}, {"begin": 4479, "end": 4809, "idx": 6}, {"begin": 4810, "end": 5250, "idx": 7}, {"begin": 5329, "end": 6359, "idx": 8}, {"begin": 6360, "end": 6967, "idx": 9}, {"begin": 6968, "end": 7219, "idx": 10}, {"begin": 7255, "end": 8229, "idx": 11}, {"begin": 8264, "end": 9984, "idx": 12}, {"begin": 10011, "end": 10199, "idx": 13}, {"begin": 10232, "end": 10675, "idx": 14}, {"begin": 10676, "end": 10761, "idx": 15}, {"begin": 10762, "end": 11087, "idx": 16}, {"begin": 11088, "end": 11690, "idx": 17}, {"begin": 11691, "end": 11888, "idx": 18}, {"begin": 11889, "end": 12015, "idx": 19}, {"begin": 12016, "end": 12401, "idx": 20}, {"begin": 12431, "end": 12761, "idx": 21}, {"begin": 12762, "end": 14115, "idx": 22}, {"begin": 14158, "end": 15089, "idx": 23}, {"begin": 15090, "end": 15444, "idx": 24}, {"begin": 15445, "end": 16473, "idx": 25}, {"begin": 16491, "end": 16729, "idx": 26}, {"begin": 16730, "end": 17208, "idx": 27}, {"begin": 17209, "end": 17408, "idx": 28}, {"begin": 17458, "end": 17763, "idx": 29}, {"begin": 17851, "end": 18139, "idx": 30}, {"begin": 18140, "end": 18328, "idx": 31}, {"begin": 18349, "end": 18512, "idx": 32}, {"begin": 18513, "end": 18813, "idx": 33}, {"begin": 18814, "end": 18960, "idx": 34}, {"begin": 19017, "end": 19430, "idx": 35}, {"begin": 19460, "end": 20214, "idx": 36}, {"begin": 20263, "end": 20828, "idx": 37}, {"begin": 20829, "end": 21312, "idx": 38}, {"begin": 21313, "end": 21434, "idx": 39}, {"begin": 21478, "end": 21943, "idx": 40}, {"begin": 21944, "end": 22254, "idx": 41}, {"begin": 22290, "end": 22723, "idx": 42}, {"begin": 22724, "end": 23100, "idx": 43}, {"begin": 23101, "end": 23627, "idx": 44}, {"begin": 23665, "end": 24080, "idx": 45}, {"begin": 24081, "end": 24448, "idx": 46}, {"begin": 24449, "end": 24683, "idx": 47}, {"begin": 24735, "end": 25227, "idx": 48}, {"begin": 25228, "end": 25402, "idx": 49}, {"begin": 25453, "end": 25715, "idx": 50}, {"begin": 25716, "end": 26162, "idx": 51}, {"begin": 26163, "end": 27044, "idx": 52}, {"begin": 27088, "end": 28049, "idx": 53}, {"begin": 28064, "end": 29535, "idx": 54}, {"begin": 29536, "end": 29993, "idx": 55}], "SectionHeader": [{"begin": 0, "end": 1159, "idx": 0}], "SectionReference": [{"begin": 30846, "end": 48403, "idx": 0}], "Sentence": [{"begin": 88, "end": 218, "idx": 0}, {"begin": 219, "end": 340, "idx": 1}, {"begin": 341, "end": 503, "idx": 2}, {"begin": 504, "end": 637, "idx": 3}, {"begin": 638, "end": 799, "idx": 4}, {"begin": 800, "end": 962, "idx": 5}, {"begin": 963, "end": 1057, "idx": 6}, {"begin": 1058, "end": 1159, "idx": 7}, {"begin": 1177, "end": 1358, "idx": 8}, {"begin": 1359, "end": 1488, "idx": 9}, {"begin": 1489, "end": 2140, "idx": 10}, {"begin": 2141, "end": 2315, "idx": 11}, {"begin": 2316, "end": 2470, "idx": 12}, {"begin": 2471, "end": 2575, "idx": 13}, {"begin": 2576, "end": 2663, "idx": 14}, {"begin": 2664, "end": 2837, "idx": 15}, {"begin": 2838, "end": 3009, "idx": 16}, {"begin": 3010, "end": 3204, "idx": 17}, {"begin": 3205, "end": 3295, "idx": 18}, {"begin": 3296, "end": 3482, "idx": 19}, {"begin": 3483, "end": 3598, "idx": 20}, {"begin": 3599, "end": 3656, "idx": 21}, {"begin": 3657, "end": 3815, "idx": 22}, {"begin": 3816, "end": 3953, "idx": 23}, {"begin": 3954, "end": 4008, "idx": 24}, {"begin": 4009, "end": 4090, "idx": 25}, {"begin": 4091, "end": 4237, "idx": 26}, {"begin": 4238, "end": 4346, "idx": 27}, {"begin": 4347, "end": 4478, "idx": 28}, {"begin": 4479, "end": 4602, "idx": 29}, {"begin": 4603, "end": 4809, "idx": 30}, {"begin": 4810, "end": 5004, "idx": 31}, {"begin": 5005, "end": 5133, "idx": 32}, {"begin": 5134, "end": 5250, "idx": 33}, {"begin": 5329, "end": 5589, "idx": 34}, {"begin": 5590, "end": 5950, "idx": 35}, {"begin": 5951, "end": 6035, "idx": 36}, {"begin": 6036, "end": 6246, "idx": 37}, {"begin": 6247, "end": 6359, "idx": 38}, {"begin": 6360, "end": 6492, "idx": 39}, {"begin": 6493, "end": 6632, "idx": 40}, {"begin": 6633, "end": 6808, "idx": 41}, {"begin": 6809, "end": 6967, "idx": 42}, {"begin": 6968, "end": 7032, "idx": 43}, {"begin": 7033, "end": 7116, "idx": 44}, {"begin": 7117, "end": 7219, "idx": 45}, {"begin": 7255, "end": 7512, "idx": 46}, {"begin": 7513, "end": 7752, "idx": 47}, {"begin": 7753, "end": 7987, "idx": 48}, {"begin": 7988, "end": 8069, "idx": 49}, {"begin": 8070, "end": 8229, "idx": 50}, {"begin": 8264, "end": 8364, "idx": 51}, {"begin": 8365, "end": 8476, "idx": 52}, {"begin": 8477, "end": 8675, "idx": 53}, {"begin": 8676, "end": 8737, "idx": 54}, {"begin": 8738, "end": 8913, "idx": 55}, {"begin": 8914, "end": 9128, "idx": 56}, {"begin": 9129, "end": 9317, "idx": 57}, {"begin": 9318, "end": 9420, "idx": 58}, {"begin": 9421, "end": 9571, "idx": 59}, {"begin": 9572, "end": 9731, "idx": 60}, {"begin": 9732, "end": 9984, "idx": 61}, {"begin": 10011, "end": 10199, "idx": 62}, {"begin": 10232, "end": 10404, "idx": 63}, {"begin": 10405, "end": 10552, "idx": 64}, {"begin": 10553, "end": 10675, "idx": 65}, {"begin": 10676, "end": 10761, "idx": 66}, {"begin": 10762, "end": 10800, "idx": 67}, {"begin": 10801, "end": 11001, "idx": 68}, {"begin": 11002, "end": 11087, "idx": 69}, {"begin": 11088, "end": 11279, "idx": 70}, {"begin": 11280, "end": 11487, "idx": 71}, {"begin": 11488, "end": 11690, "idx": 72}, {"begin": 11691, "end": 11801, "idx": 73}, {"begin": 11802, "end": 11888, "idx": 74}, {"begin": 11889, "end": 12015, "idx": 75}, {"begin": 12016, "end": 12133, "idx": 76}, {"begin": 12134, "end": 12332, "idx": 77}, {"begin": 12333, "end": 12401, "idx": 78}, {"begin": 12431, "end": 12761, "idx": 79}, {"begin": 12762, "end": 12792, "idx": 80}, {"begin": 12793, "end": 12893, "idx": 81}, {"begin": 12894, "end": 13048, "idx": 82}, {"begin": 13049, "end": 13122, "idx": 83}, {"begin": 13123, "end": 13196, "idx": 84}, {"begin": 13197, "end": 13280, "idx": 85}, {"begin": 13281, "end": 13285, "idx": 86}, {"begin": 13286, "end": 13416, "idx": 87}, {"begin": 13417, "end": 13539, "idx": 88}, {"begin": 13540, "end": 13708, "idx": 89}, {"begin": 13709, "end": 13804, "idx": 90}, {"begin": 13805, "end": 13892, "idx": 91}, {"begin": 13893, "end": 14013, "idx": 92}, {"begin": 14014, "end": 14115, "idx": 93}, {"begin": 14158, "end": 14188, "idx": 94}, {"begin": 14189, "end": 14334, "idx": 95}, {"begin": 14335, "end": 14691, "idx": 96}, {"begin": 14692, "end": 14872, "idx": 97}, {"begin": 14873, "end": 15089, "idx": 98}, {"begin": 15090, "end": 15210, "idx": 99}, {"begin": 15211, "end": 15301, "idx": 100}, {"begin": 15302, "end": 15444, "idx": 101}, {"begin": 15445, "end": 15587, "idx": 102}, {"begin": 15588, "end": 15743, "idx": 103}, {"begin": 15744, "end": 15949, "idx": 104}, {"begin": 15950, "end": 16051, "idx": 105}, {"begin": 16052, "end": 16070, "idx": 106}, {"begin": 16071, "end": 16362, "idx": 107}, {"begin": 16363, "end": 16473, "idx": 108}, {"begin": 16491, "end": 16600, "idx": 109}, {"begin": 16601, "end": 16729, "idx": 110}, {"begin": 16730, "end": 16827, "idx": 111}, {"begin": 16828, "end": 17011, "idx": 112}, {"begin": 17012, "end": 17208, "idx": 113}, {"begin": 17209, "end": 17309, "idx": 114}, {"begin": 17310, "end": 17408, "idx": 115}, {"begin": 17458, "end": 17674, "idx": 116}, {"begin": 17675, "end": 17737, "idx": 117}, {"begin": 17738, "end": 17763, "idx": 118}, {"begin": 17851, "end": 17872, "idx": 119}, {"begin": 17873, "end": 18003, "idx": 120}, {"begin": 18004, "end": 18139, "idx": 121}, {"begin": 18140, "end": 18283, "idx": 122}, {"begin": 18284, "end": 18328, "idx": 123}, {"begin": 18349, "end": 18512, "idx": 124}, {"begin": 18513, "end": 18627, "idx": 125}, {"begin": 18628, "end": 18693, "idx": 126}, {"begin": 18694, "end": 18728, "idx": 127}, {"begin": 18729, "end": 18813, "idx": 128}, {"begin": 18814, "end": 18960, "idx": 129}, {"begin": 19017, "end": 19164, "idx": 130}, {"begin": 19165, "end": 19169, "idx": 131}, {"begin": 19170, "end": 19238, "idx": 132}, {"begin": 19239, "end": 19430, "idx": 133}, {"begin": 19460, "end": 19826, "idx": 134}, {"begin": 19827, "end": 19904, "idx": 135}, {"begin": 19905, "end": 20124, "idx": 136}, {"begin": 20125, "end": 20214, "idx": 137}, {"begin": 20263, "end": 20396, "idx": 138}, {"begin": 20397, "end": 20761, "idx": 139}, {"begin": 20762, "end": 20781, "idx": 140}, {"begin": 20782, "end": 20795, "idx": 141}, {"begin": 20796, "end": 20828, "idx": 142}, {"begin": 20829, "end": 20970, "idx": 143}, {"begin": 20971, "end": 21111, "idx": 144}, {"begin": 21112, "end": 21312, "idx": 145}, {"begin": 21313, "end": 21434, "idx": 146}, {"begin": 21478, "end": 21659, "idx": 147}, {"begin": 21660, "end": 21943, "idx": 148}, {"begin": 21944, "end": 21949, "idx": 149}, {"begin": 21950, "end": 22045, "idx": 150}, {"begin": 22046, "end": 22169, "idx": 151}, {"begin": 22170, "end": 22254, "idx": 152}, {"begin": 22290, "end": 22465, "idx": 153}, {"begin": 22466, "end": 22723, "idx": 154}, {"begin": 22724, "end": 22871, "idx": 155}, {"begin": 22872, "end": 23100, "idx": 156}, {"begin": 23101, "end": 23167, "idx": 157}, {"begin": 23168, "end": 23274, "idx": 158}, {"begin": 23275, "end": 23387, "idx": 159}, {"begin": 23388, "end": 23481, "idx": 160}, {"begin": 23482, "end": 23534, "idx": 161}, {"begin": 23535, "end": 23627, "idx": 162}, {"begin": 23665, "end": 23867, "idx": 163}, {"begin": 23868, "end": 23982, "idx": 164}, {"begin": 23983, "end": 24080, "idx": 165}, {"begin": 24081, "end": 24169, "idx": 166}, {"begin": 24170, "end": 24246, "idx": 167}, {"begin": 24247, "end": 24317, "idx": 168}, {"begin": 24318, "end": 24390, "idx": 169}, {"begin": 24391, "end": 24448, "idx": 170}, {"begin": 24449, "end": 24604, "idx": 171}, {"begin": 24605, "end": 24622, "idx": 172}, {"begin": 24623, "end": 24683, "idx": 173}, {"begin": 24735, "end": 24861, "idx": 174}, {"begin": 24862, "end": 25124, "idx": 175}, {"begin": 25125, "end": 25227, "idx": 176}, {"begin": 25228, "end": 25402, "idx": 177}, {"begin": 25453, "end": 25567, "idx": 178}, {"begin": 25568, "end": 25715, "idx": 179}, {"begin": 25716, "end": 25864, "idx": 180}, {"begin": 25865, "end": 26076, "idx": 181}, {"begin": 26077, "end": 26162, "idx": 182}, {"begin": 26163, "end": 26279, "idx": 183}, {"begin": 26280, "end": 26360, "idx": 184}, {"begin": 26361, "end": 26431, "idx": 185}, {"begin": 26432, "end": 26620, "idx": 186}, {"begin": 26621, "end": 26744, "idx": 187}, {"begin": 26745, "end": 26956, "idx": 188}, {"begin": 26957, "end": 27044, "idx": 189}, {"begin": 27088, "end": 27266, "idx": 190}, {"begin": 27267, "end": 27365, "idx": 191}, {"begin": 27366, "end": 27421, "idx": 192}, {"begin": 27422, "end": 27659, "idx": 193}, {"begin": 27660, "end": 27885, "idx": 194}, {"begin": 27886, "end": 28049, "idx": 195}, {"begin": 28064, "end": 28225, "idx": 196}, {"begin": 28226, "end": 28411, "idx": 197}, {"begin": 28412, "end": 28661, "idx": 198}, {"begin": 28662, "end": 28774, "idx": 199}, {"begin": 28775, "end": 28987, "idx": 200}, {"begin": 28988, "end": 29042, "idx": 201}, {"begin": 29043, "end": 29199, "idx": 202}, {"begin": 29200, "end": 29443, "idx": 203}, {"begin": 29444, "end": 29535, "idx": 204}, {"begin": 29536, "end": 29644, "idx": 205}, {"begin": 29645, "end": 29736, "idx": 206}, {"begin": 29737, "end": 29812, "idx": 207}, {"begin": 29813, "end": 29993, "idx": 208}], "ReferenceToFigure": [{"begin": 13547, "end": 13548, "idx": 0}, {"begin": 25721, "end": 25723, "target": "#fig_2", "idx": 1}], "Div": [{"begin": 88, "end": 1159, "idx": 0}, {"begin": 1162, "end": 5250, "idx": 1}, {"begin": 5252, "end": 5267, "idx": 2}, {"begin": 5269, "end": 7219, "idx": 3}, {"begin": 7221, "end": 8229, "idx": 4}, {"begin": 8231, "end": 9984, "idx": 5}, {"begin": 9986, "end": 10199, "idx": 6}, {"begin": 10201, "end": 14115, "idx": 7}, {"begin": 14117, "end": 16473, "idx": 8}, {"begin": 16475, "end": 17408, "idx": 9}, {"begin": 17410, "end": 17433, "idx": 10}, {"begin": 17435, "end": 18960, "idx": 11}, {"begin": 18962, "end": 18988, "idx": 12}, {"begin": 18990, "end": 19430, "idx": 13}, {"begin": 19432, "end": 20214, "idx": 14}, {"begin": 20216, "end": 21434, "idx": 15}, {"begin": 21436, "end": 22254, "idx": 16}, {"begin": 22256, "end": 23627, "idx": 17}, {"begin": 23629, "end": 24683, "idx": 18}, {"begin": 24685, "end": 25402, "idx": 19}, {"begin": 25404, "end": 27044, "idx": 20}, {"begin": 27046, "end": 28049, "idx": 21}, {"begin": 28051, "end": 29993, "idx": 22}], "SectionMain": [{"begin": 1159, "end": 29993, "idx": 0}]}}