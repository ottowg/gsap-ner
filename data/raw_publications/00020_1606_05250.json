{"text": "SQuAD: 100,000+ Questions for Machine Comprehension of Text\n\nAbstract:\nWe present the Stanford Question Answering Dataset (SQuAD), a new reading comprehension dataset consisting of 100,000+ questions posed by crowdworkers on a set of Wikipedia articles, where the answer to each question is a segment of text from the corresponding reading passage. We analyze the dataset to understand the types of reasoning required to answer the questions, leaning heavily on dependency and constituency trees. We build a strong logistic regression model, which achieves an F1 score of 51.0%, a significant improvement over a simple baseline (20%). However, human performance (86.8%) is much higher, indicating that the dataset presents a good challenge problem for future research. The dataset is freely available at https://stanford-qa.com.\n\n\n1 Introduction\nReading Comprehension (RC), or the ability to read text and then answer questions about it, is a challenging task for machines, requiring both understanding of natural language and knowledge about the world. Consider the question \"what causes precipitation to fall?\" posed on the passage in Figure 1.\nIn order to answer the question, one might first locate the relevant part of the passage \"precipitation ... falls under gravity\", then reason that \"under\" refers to a cause (not location), and thus determine the correct answer: \"gravity\".\nHow can we get a machine to make progress on the challenging task of reading comprehension? Historically, large, realistic datasets have played\nIn meteorology, precipitation is any product of the condensation of atmospheric water vapor that falls under gravity. The main forms of precipitation include drizzle, rain, sleet, snow, graupel and hail... Precipitation forms as smaller droplets coalesce via collision with other rain drops or ice crystals within a cloud. Short, intense periods of rain in scattered locations are called \"showers\".\n\nWhat causes precipitation to fall? gravity\nWhat is another main form of precipitation besides drizzle, rain, snow, sleet and hail? graupel\nWhere do water droplets collide with ice crystals to form precipitation? within a cloud a critical role for driving fields forward-famous examples include ImageNet for object recognition (Deng et al., 2009) and the Penn Treebank for syntactic parsing (Marcus et al., 1993). Existing datasets for RC have one of two shortcomings: (i) those that are high in quality (Richardson et al., 2013; Berant et al., 2014) are too small for training modern data-intensive models, while (ii) those that are large (Hermann et al., 2015; Hill et al., 2015) are semi-synthetic and do not share the same characteristics as explicit reading comprehension questions.\nTo address the need for a large and high-quality reading comprehension dataset, we present the Stan-ford Question Answering Dataset v1.0 (SQuAD), freely available at https://stanford-qa.com, consisting of questions posed by crowdworkers on a set of Wikipedia articles, where the answer to every question is a segment of text, or span, from the corresponding reading passage. SQuAD contains 107,785 question-answer pairs on 536 articles, and is almost two orders of magnitude larger than previous manually labeled RC datasets such as MCTest (Richardson et al., 2013).\nIn contrast to prior datasets, SQuAD does not provide a list of answer choices for each question. Rather, systems must select the answer from all possible spans in the passage, thus needing to cope with a fairly large number of candidates. While questions with span-based answers are more constrained than the more interpretative questions found in more advanced standardized tests, we still find a rich diversity of questions and answer types in SQuAD. We develop automatic techniques based on distances in dependency trees to quantify this diversity and stratify the questions by difficulty. The span constraint also comes with the important benefit that span-based answers are easier to evaluate than freeform answers.\nTo assess the difficulty of SQuAD, we implemented a logistic regression model with a range of features. We find that lexicalized and dependency tree path features are important to the performance of the model. We also find that the model performance worsens with increasing complexity of (i) answer types and (ii) syntactic divergence between the question and the sentence containing the answer; interestingly, there is no such degradation for humans. Our best model achieves an F1 score of 51.0%, 1 which is much better than the sliding window baseline (20%). Over the last four months (since June 2016), we have witnessed significant improvements from more sophisticated neural network-based models. For example, Wang and Jiang (2016) obtained 70.3% F1 on SQuAD v1.1 (results on v1.0 are similar). These results are still well behind human performance, which is 86.8% F1 based on interannotator agreement. This suggests that there is plenty of room for advancement in modeling and learning on the SQuAD dataset.\n\n2 Existing Datasets\nWe begin with a survey of existing reading comprehension and question answering (QA) datasets, highlighting a variety of task formulation and creation strategies (see Table 1 for an overview).\nReading comprehension. A data-driven approach to reading comprehension goes back to Hirschman et al. (1999), who curated a dataset of 600 real 3rd-6th grade reading comprehension questions. Their pattern matching baseline was subsequently improved by a rule-based system (Riloff and Thelen, 2000) and a logistic regression model (Ng et al., 2000). More recently, Richardson et al. (2013) curated MCTest, which contains 660 stories created by crowdworkers, with 4 questions per story and 4 answer choices per question. Because many of the questions require commonsense reasoning and reasoning across multiple sentences, the dataset remains quite challenging, though there has been noticeable progress (Narasimhan and Barzilay, 2015; Sachan et al., 2015; Wang et al., 2015). Both curated datasets, although real and difficult, are too small to support very expressive statistical models. Some datasets focus on deeper reasoning abilities. Algebra word problems require understanding a story well enough to turn it into a system of equa-tions, which can be easily solved to produce the answer (Kushman et al., 2014; Hosseini et al., 2014). BAbI (Weston et al., 2015), a fully synthetic RC dataset, is stratified by different types of reasoning required to solve each task.  Clark and Etzioni (2016) describe the task of solving 4th grade science exams, and stress the need to reason with world knowledge.\nOpen-domain question answering. The goal of open-domain QA is to answer a question from a large collection of documents. The annual evaluations at the Text REtreival Conference (TREC) (Voorhees and Tice, 2000) led to many advances in open-domain QA, many of which were used in IBM Watson for Jeopardy!  (Ferrucci et al., 2013). Recently, Yang et al. (2015) created the WikiQA dataset, which, like SQuAD, use Wikipedia passages as a source of answers, but their task is sentence selection, while ours requires selecting a specific span in the sentence.\nSelecting the span of text that answers a question is similar to answer extraction, the final step in the open-domain QA pipeline, methods for which include bootstrapping surface patterns (Ravichandran and Hovy, 2002), using dependency trees (Shen and Klakow, 2006), and using a factor graph over multiple sentences (Sun et al., 2013). One key difference between our RC setting and answer extraction is that answer extraction typically exploits the fact that the answer occurs in multiple documents (Brill et al., 2002), which is more lenient than in our setting, where a system only has access to a single reading passage.\nCloze datasets. Recently, researchers have constructed cloze datasets, in which the goal is to predict the missing word (often a named entity) in a passage. Since these datasets can be automatically generated from naturally occurring data, they can be extremely large. The Children's Book Test (CBT) (Hill et al., 2015), for example, involves predicting a blanked-out word of a sentence given the 20 previous sentences.  Hermann et al. (2015) constructed a corpus of cloze style questions by blanking out entities in abstractive summaries of CNN / Daily News articles; the goal is to fill in the entity based on the original article. While the size of this dataset is impressive, Chen et al. (2016) showed that the dataset requires less reasoning than previously thought, and concluded that performance is almost saturated.\nOne difference between SQuAD questions and cloze-style queries is that answers to cloze queries are single words or entities, while answers in SQuAD often include non-entities and can be much longer phrases. Another difference is that SQuAD focuses on questions whose answers are entailed by the passage, whereas the answers to cloze-style queries are merely suggested by the passage.\n\n3 Dataset Collection\nWe collect our dataset in three stages: curating passages, crowdsourcing question-answers on those passages, and obtaining additional answers.\nPassage curation. To retrieve high-quality articles, we used Project Nayuki's Wikipedia's internal PageRanks to obtain the top 10000 articles of English Wikipedia, from which we sampled 536 articles uniformly at random. From each of these articles, we extracted individual paragraphs, stripping away images, figures, tables, and discarding paragraphs shorter than 500 characters. The result was 23,215 paragraphs for the 536 articles covering a wide range of topics, from musical celebrities to abstract concepts. We partitioned the articles randomly into a training set (80%), a development set (10%), and a test set (10%).\nQuestion-answer collection. Next, we employed crowdworkers to create questions. We used the Daemo platform (Gaikwad et al., 2015), with Amazon Mechanical Turk as its backend. Crowdworkers were required to have a 97% HIT acceptance rate, a minimum of 1000 HITs, and be located in the United States or Canada. Workers were asked to spend 4 minutes on every paragraph, and paid $9 per hour for the number of hours required to complete the article. The task was reviewed favorably by crowdworkers, receiving positive comments on Turkopticon.\nOn each paragraph, crowdworkers were tasked with asking and answering up to 5 questions on the content of that paragraph. The questions had to be entered in a text field, and the answers had to be highlighted in the paragraph. To guide the workers, tasks contained a sample paragraph, and examples of good and bad questions and answers on that paragraph along with the reasons they were categorized as such. Additionally, crowdworkers were encouraged to ask questions in their own words, without copying word phrases from the paragraph. On the interface, this was reinforced by a reminder prompt at the beginning of every paragraph, and by disabling copy-paste functionality on the paragraph text.\nAdditional answers collection. To get an indication of human performance on SQuAD and to make our evaluation more robust, we obtained at least 2 additional answers for each question in the development and test sets. In the secondary answer generation task, each crowdworker was shown only the questions along with the paragraphs of an article, and asked to select the shortest span in the paragraph that answered the question. If a question was not answerable by a span in the paragraph, workers were asked to submit the question without marking an answer. Workers were recommended a speed of 5 questions for 2 minutes, and paid at the same rate of $9 per hour for the number of hours required for the entire article. Over the development and test sets, 2.6% of questions were marked unanswerable by at least one of the additional crowdworkers.\n\n4 Dataset Analysis\nTo understand the properties of SQuAD, we analyze the questions and answers in the development set. Specifically, we explore the (i) diversity of answer types, (ii) the difficulty of questions in terms of type of reasoning required to answer them, and (iii) the degree of syntactic divergence between the question and answer sentences.\nDiversity in answers. We automatically categorize the answers as follows: We first separate the numerical and non-numerical answers.\n\n13.6%\n\n\nAmbiguous\nWe don't agree with the crowdworkers' answer, or the question does not have a unique answer.\nQ: What is the main goal of criminal punishment? Sen.: Achieving crime control via incapacitation and deterrence is a major goal of criminal punishment. Stratification by syntactic divergence. We also develop an automatic method to quantify the syntactic divergence between a question and the sentence containing the answer. This provides another way to measure the difficulty of a question and to stratify the dataset, which we return to in Section 6.3. We illustrate how we measure the divergence with the example in Figure 3. We first detect anchors (word-lemma pairs common to both the question and answer sentences); in the example, the anchor is \"first\". The two unlexicalized paths, one from the anchor \"first\" in the question to the wh-word \"what\", and the other from the anchor in the answer sentence and to the answer span \"Bainbridge's\", are then extracted from the dependency parse trees. We measure the edit distance between these two paths, which we define as the minimum number of deletions or insertions to transform one path into the other. The syntactic divergence is then defined as the minimum edit distance over all possible anchors. The histogram in Figure 4a shows that there is a wide range of syntactic divergence in our dataset. We also show a concrete example where the edit distance is 0 and another where it is 6. Note that our syntactic divergence ignores lexical variation. Also, small divergence does not mean that a question is easy since there could be other candidates with similarly small divergence.\n\n6.1%\n\n\n5 Methods\nWe developed a logistic regression model and compare its accuracy with that of three baseline methods. Candidate answer generation. For all four methods, rather than considering all O(L 2 ) spans as candidate answers, where L is the number of words in the sentence, we only use spans which are constituents in the constituency parse generated by Stanford CoreNLP. Ignoring punctuation and articles, we find that 77.3% of the correct answers in the development set are constituents. This places an effective ceiling on the accuracy of our methods. During training, when the correct answer of an example is not a constituent, we use the shortest constituent containing the correct answer as the target.\n\n5.1 Sliding Window Baseline\nFor each candidate answer, we compute the unigram/bigram overlap between the sentence containing it (excluding the candidate itself) and the question. We keep all the candidates that have the maximal overlap. Among these, we select the best one using the sliding-window approach proposed in Richardson et al. (2013).\nIn addition to the basic sliding window approach, we also implemented the distance-based extension (Richardson et al., 2013). Whereas Richardson et al. (2013) used the entire passage as the context of an answer, we used only the sentence containing the candidate answer for efficiency.\n\n5.2 Logistic Regression\nIn our logistic regression model, we extract several types of features for each candidate answer. We discretize each continuous feature into 10 equallysized buckets, building a total of 180 million features, most of which are lexicalized features or dependency tree path features. The descriptions and examples of the features are summarized in Table 4.\nThe matching word and bigram frequencies as well as the root match features help the model pick the correct sentences. Length features bias the model towards picking common lengths and positions for answer spans, while span word frequencies bias the model against uninformative words. Constituent label and span POS tag features guide the model towards the correct answer types. In addition to these basic features, we resolve lexical variation using lexicalized features, and syntactic variation using dependency tree path features.\nThe multiclass log-likelihood loss is optimized using AdaGrad with an initial learning rate of 0.1. Each update is performed on the batch of all questions in a paragraph for efficiency, since they share the same candidates. L 2 regularization is used, with a coefficient of 0.1 divided by the number of batches. The model is trained with three passes over the train-Feature Groups\n\nDescription Examples\nMatching Word Frequencies Sum of the TF-IDF of the words that occur in both the question and the sentence containing the candidate answer. Separate features are used for the words to the left, to the right, inside the span, and in the whole sentence.\nSpan: [0 \u2264 sum < 0.01] Left: [7.9 \u2264 sum < 10.7]\n\nMatching Bigram Frequencies\nSame as above, but using bigrams. We use the generalization of the TF-IDF described in Shirakawa et al. (2015).\nSpan:[0 \u2264 sum < 2.4] Left: [0 \u2264 sum < 2.7]\nRoot Match Whether the dependency parse tree roots of the question and sentence match, whether the sentence contains the root of the dependency parse tree of the question, and whether the question contains the root of the dependency parse tree of the sentence.\nRoot Match = False Lengths Number of words to the left, to the right, inside the span, and in the whole sentence.\nSpan:[1 <= num < 2] Left: [15 \u2264 num < 19]\n\nSpan Word Frequencies\nSum of the TF-IDF of the words in the span, regardless of whether they appear in the question.\nSpan: [5.2 \u2264 sum < 6.9]\nConstituent Label Constituency parse tree label of the span, optionally combined with the wh-word in the question.\nSpan: NP Span: NP, wh-word: \"what\"\nSpan POS Tags Sequence of the part-of-speech tags in the span, optionally combined with the wh-word in the question.\n\nSpan: [NN]\nSpan: [NN], wh-word: \"what\"\n\nLexicalized\nLemmas of question words combined with the lemmas of words within distance 2 to the span in the sentence based on the dependency parse trees. Separately, question word lemmas combined with answer word lemmas.\nQ: \"cause\", S: \"under\" case \u2190 \u2212 \u2212 Q: \"fall\", A: \"gravity\"\n\nDependency Tree Paths\nFor each word that occurs in both the question and sentence, the path in the dependency parse tree from that word in the sentence to the span, optionally combined with the path from the wh-word to the word in the question. POS tags are included in the paths.\n\n6 Experiments\n\n\n6.1 Model Evaluation\nWe use two different metrics to evaluate model accuracy. Both metrics ignore punctuations and articles (a, an, the).\nExact match. This metric measures the percentage of predictions that match any one of the ground truth answers exactly.\n(Macro-averaged) F1 score. This metric measures the average overlap between the prediction and ground truth answer. We treat the prediction and ground truth as bags of tokens, and compute their F1. We take the maximum F1 over all of the ground truth answers for a given question, and then average over all of the questions.\n\n6.2 Human Performance\nWe assess human performance on SQuAD's development and test sets. Recall that each of the questions in these sets has at least three answers. To evaluate human performance, we treat the second answer to each question as the human prediction, and keep the other answers as ground truth answers. The resulting human performance score on the test set is 77.0% for the exact match metric, and 86.8% for F1. Mismatch occurs mostly due to inclusion/exclusion of non-essential phrases (e.g., monsoon trough versus movement of the monsoon trough) rather than fundamental disagreements about the answer.\n\n6.3 Model Performance\nTable 5 shows the performance of our models alongside human performance on the v1.0 of development and test sets. The logistic regression model significantly outperforms the baselines, but underperforms humans. We note that the model is able to select the sentence containing the answer correctly with 79.3% accuracy; hence, the bulk of the difficulty lies in finding the exact span within the sentence.\nFeature ablations. In order to understand the features that are responsible for the performance of the logistic regression model, we perform a feature ablation where we remove one group of features from our model at a time. The results, shown in Table 6, indicate that lexicalized and dependency tree path features are most important. Comparing our analysis to the one in Chen et al. (2016), we note that the dependency tree path features play a much bigger role in our dataset. Additionally, we note that with lexicalized features, the model significantly overfits the training set; however, we found that increasing L 2 regularization hurts performance on the development set.\nPerformance stratified by answer type. To gain more insight into the performance of our logistic regression model, we report its performance across  the answer types explored in Table 2. The results (shown in Table 7) show that the model performs best on dates and other numbers, categories for which there are usually only a few plausible candidates, and most answers are single tokens. The model is challenged more on other named entities (i.e., location, person and other entities) because there are many more plausible candidates. However, named entities are still relatively easy to identify by their POS tag features. The model performs worst on other answer types, which together form 47.6% of the dataset. Humans have exceptional performance on dates, numbers and all named entities. Their performance on other answer types degrades only slightly.\nPerformance stratified by syntactic divergence.\nAs discussed in Section 4, another challenging aspect of the dataset is the syntactic divergence between the question and answer sentence. Figure 5 shows that the more divergence there is, the lower the performance of the logistic regression model. Interestingly, humans do not seem to be sensitive to syntactic divergence, suggesting that deep understanding is not distracted by superficial differences.\nMeasuring the degree of degradation could therefore be useful in determining the extent to which a model is generalizing in the right way.\n\n7 Conclusion\nTowards the end goal of natural language understanding, we introduce the Stanford Question Answering Dataset, a large reading comprehension dataset on Wikipedia articles with crowdsourced question-answer pairs. SQuAD features a diverse range of question and answer types. The performance of our logistic regression model, with 51.0% F1, against the human F1 of 86.8% suggests ample opportunity for improvement. We have made our dataset freely available to encourage exploration of more expressive models. Since the release of our dataset, we have already seen considerable interest in building models on this dataset, and the gap between our logistic regression model and human performance has more than halved (Wang and Jiang, 2016). We expect that the remaining gap will be harder to close, but that such efforts will result in significant advances in reading comprehension.\n\nReproducibility\nAll code, data, and experiments for this paper are available on the CodaLab platform:\nhttps://worksheets.codalab.org/worksheets/ 0xd53d03a48ef64b329c16b9baf0f99b0c/ .\n\nFootnotes:\n\nReferences:\n\n- J. Berant, V. Srikumar, P. Chen, A. V. Linden, B. Harding, B. Huang, P. Clark, and C. D. Manning. 2014. Mod- eling biological processes for reading comprehension. In Empirical Methods in Natural Language Process- ing (EMNLP).- E. Brill, S. Dumais, and M. Banko. 2002. An analysis of the AskMSR question-answering system. In Associa- tion for Computational Linguistics (ACL), pages 257- 264.\n\n- D. Chen, J. Bolton, and C. D. Manning. 2016. A thorough examination of the CNN / Daily Mail read- ing comprehension task. In Association for Computa- tional Linguistics (ACL).\n\n- P. Clark and O. Etzioni. 2016. My computer is an honor student but how intelligent is it? standardized tests as a measure of AI. AI Magazine, 37(1):5-12.\n\n- J. Deng, W. Dong, R. Socher, L. Li, K. Li, and L. Fei- Fei. 2009. ImageNet: A large-scale hierarchical im- age database. In Computer Vision and Pattern Recog- nition (CVPR), pages 248-255.\n\n- D. Ferrucci, E. Brown, J. Chu-Carroll, J. Fan, D. Gondek, A. A. Kalyanpur, A. Lally, J. W. Murdock, E. Nyberg, J. Prager, N. Schlaefer, and C. Welty. 2013. Build- ing Watson: An overview of the DeepQA project. AI Magazine, 31(3):59-79.\n\n- S. N. Gaikwad, D. Morina, R. Nistala, M. Agarwal, A. Cossette, R. Bhanu, S. Savage, V. Narwal, K. Raj- pal, J. Regino, et al. 2015. Daemo: A self-governed crowdsourcing marketplace. In Proceedings of the 28th Annual ACM Symposium on User Interface Soft- ware & Technology, pages 101-102.\n\n- K. M. Hermann, T. Ko\u010disk\u00fd, E. Grefenstette, L. Espeholt, W. Kay, M. Suleyman, and P. Blunsom. 2015. Teach- ing machines to read and comprehend. In Advances in Neural Information Processing Systems (NIPS).\n\n- F. Hill, A. Bordes, S. Chopra, and J. Weston. 2015. The goldilocks principle: Reading children's books with explicit memory representations. In International Conference on Learning Representations (ICLR).\n\n- L. Hirschman, M. Light, E. Breck, and J. D. Burger. 1999. Deep read: A reading comprehension system. In Association for Computational Linguistics (ACL), pages 325-332.\n\n- M. J. Hosseini, H. Hajishirzi, O. Etzioni, and N. Kush- man. 2014. Learning to solve arithmetic word prob- lems with verb categorization. In Empirical Meth- ods in Natural Language Processing (EMNLP), pages 523-533.\n\n- N. Kushman, Y. Artzi, L. Zettlemoyer, and R. Barzilay. 2014. Learning to automatically solve algebra word problems. In Association for Computational Linguis- tics (ACL).\n\n- M. P. Marcus, M. A. Marcinkiewicz, and B. Santorini. 1993. Building a large annotated corpus of En- glish: the Penn Treebank. Computational Linguistics, 19:313-330.\n\n- K. Narasimhan and R. Barzilay. 2015. Machine compre- hension with discourse relations. In Association for Computational Linguistics (ACL).\n\n- H. T. Ng, L. H. Teo, and J. L. P. Kwan. 2000. A machine learning approach to answering questions for reading comprehension tests. In Joint SIGDAT conference on empirical methods in natural language processing and very large corpora -Volume 13, pages 124-132.\n\n- D. Ravichandran and E. Hovy. 2002. Learning surface text patterns for a question answering system. In As- sociation for Computational Linguistics (ACL), pages 41-47.\n\n- M. Richardson, C. J. Burges, and E. Renshaw. 2013. Mctest: A challenge dataset for the open-domain ma- chine comprehension of text. In Empirical Methods in Natural Language Processing (EMNLP), pages 193- 203.\n\n- E. Riloff and M. Thelen. 2000. A rule-based question answering system for reading comprehension tests. In ANLP/NAACL Workshop on reading comprehension tests as evaluation for computer-based language un- derstanding sytems -Volume 6, pages 13-19.\n\n- M. Sachan, A. Dubey, E. P. Xing, and M. Richardson. 2015. Learning answer-entailing structures for ma- chine comprehension. In Association for Computa- tional Linguistics (ACL).\n\n- D. Shen and D. Klakow. 2006. Exploring correlation of dependency relation paths for answer extraction. In In- ternational Conference on Computational Linguistics and Association for Computational Linguistics (COL- ING/ACL), pages 889-896.\n\n- M. Shirakawa, T. Hara, and S. Nishio. 2015. N-gram idf: A global term weighting scheme based on information distance. In World Wide Web (WWW), pages 960-970.\n\n- H. Sun, N. Duan, Y. Duan, and M. Zhou. 2013. Answer extraction from passage graph for question answering. In International Joint Conference on Artificial Intelli- gence (IJCAI).\n\n- E. M. Voorhees and D. M. Tice. 2000. Building a ques- tion answering test collection. In ACM Special Interest Group on Information Retreival (SIGIR), pages 200- 207.\n\n- Shuohang Wang and Jing Jiang. 2016. Machine compre- hension using match-lstm and answer pointer. CoRR, abs/1608.07905.\n\n- H. Wang, M. Bansal, K. Gimpel, and D. McAllester. 2015. Machine comprehension with syntax, frames, and semantics. In Association for Computational Lin- guistics (ACL).\n\n- J. Weston, A. Bordes, S. Chopra, and T. Mikolov. 2015. Towards AI-complete question answering: A set of prerequisite toy tasks. arXiv.\n\n- Y. Yang, W. Yih, and C. Meek. 2015. WikiQA: A chal- lenge dataset for open-domain question answering. In Empirical Methods in Natural Language Processing (EMNLP), pages 2013-2018.\n\n", "annotations": {"Abstract": [{"begin": 61, "end": 828, "idx": 0}], "Head": [{"begin": 831, "end": 845, "n": "1", "idx": 0}, {"begin": 1930, "end": 1972, "idx": 1}, {"begin": 5021, "end": 5040, "n": "2", "idx": 2}, {"begin": 9022, "end": 9042, "n": "3", "idx": 3}, {"begin": 11893, "end": 11911, "n": "4", "idx": 4}, {"begin": 12382, "end": 12387, "idx": 5}, {"begin": 12390, "end": 12399, "idx": 6}, {"begin": 14031, "end": 14035, "idx": 7}, {"begin": 14038, "end": 14047, "n": "5", "idx": 8}, {"begin": 14750, "end": 14777, "n": "5.1", "idx": 9}, {"begin": 15382, "end": 15405, "n": "5.2", "idx": 10}, {"begin": 16676, "end": 16696, "idx": 11}, {"begin": 16997, "end": 17024, "idx": 12}, {"begin": 17598, "end": 17619, "idx": 13}, {"begin": 18007, "end": 18017, "idx": 14}, {"begin": 18047, "end": 18058, "idx": 15}, {"begin": 18327, "end": 18348, "idx": 16}, {"begin": 18609, "end": 18622, "n": "6", "idx": 17}, {"begin": 18625, "end": 18645, "n": "6.1", "idx": 18}, {"begin": 19208, "end": 19229, "n": "6.2", "idx": 19}, {"begin": 19826, "end": 19847, "n": "6.3", "idx": 20}, {"begin": 22380, "end": 22392, "n": "7", "idx": 21}, {"begin": 23271, "end": 23286, "idx": 22}], "ReferenceToBib": [{"begin": 2256, "end": 2275, "target": "#b4", "idx": 0}, {"begin": 2320, "end": 2341, "target": "#b12", "idx": 1}, {"begin": 2433, "end": 2458, "target": "#b16", "idx": 2}, {"begin": 2459, "end": 2479, "target": "#b0", "idx": 3}, {"begin": 2569, "end": 2591, "target": "#b7", "idx": 4}, {"begin": 2592, "end": 2610, "target": "#b8", "idx": 5}, {"begin": 3257, "end": 3282, "target": "#b16", "idx": 6}, {"begin": 4721, "end": 4742, "target": "#b23", "idx": 7}, {"begin": 5318, "end": 5341, "target": "#b9", "idx": 8}, {"begin": 5505, "end": 5530, "target": "#b17", "idx": 9}, {"begin": 5563, "end": 5580, "target": "#b14", "idx": 10}, {"begin": 5597, "end": 5621, "target": "#b16", "idx": 11}, {"begin": 5934, "end": 5965, "target": "#b13", "idx": 12}, {"begin": 5966, "end": 5986, "target": "#b18", "idx": 13}, {"begin": 5987, "end": 6005, "target": "#b24", "idx": 14}, {"begin": 6324, "end": 6346, "target": "#b11", "idx": 15}, {"begin": 6347, "end": 6369, "target": "#b10", "idx": 16}, {"begin": 6376, "end": 6397, "target": "#b25", "idx": 17}, {"begin": 6505, "end": 6529, "target": "#b3", "idx": 18}, {"begin": 6820, "end": 6845, "target": "#b22", "idx": 19}, {"begin": 6939, "end": 6962, "target": "#b5", "idx": 20}, {"begin": 6974, "end": 6992, "target": "#b26", "idx": 21}, {"begin": 7376, "end": 7405, "target": "#b15", "idx": 22}, {"begin": 7430, "end": 7453, "target": "#b19", "idx": 23}, {"begin": 7504, "end": 7522, "target": "#b21", "idx": 24}, {"begin": 7687, "end": 7707, "target": "#b1", "idx": 25}, {"begin": 8112, "end": 8131, "target": "#b8", "idx": 26}, {"begin": 8233, "end": 8254, "target": "#b7", "idx": 27}, {"begin": 8492, "end": 8510, "target": "#b2", "idx": 28}, {"begin": 9918, "end": 9940, "target": "#b6", "idx": 29}, {"begin": 15069, "end": 15093, "target": "#b16", "idx": 30}, {"begin": 15194, "end": 15219, "target": "#b16", "idx": 31}, {"begin": 15229, "end": 15253, "target": "#b16", "idx": 32}, {"begin": 17112, "end": 17135, "target": "#b20", "idx": 33}, {"begin": 20624, "end": 20642, "target": "#b2", "idx": 34}, {"begin": 23104, "end": 23126, "target": "#b23", "idx": 35}], "SectionFootnote": [{"begin": 23455, "end": 23465, "idx": 0}], "ReferenceString": [{"begin": 23482, "end": 23707, "id": "b0", "idx": 0}, {"begin": 23709, "end": 23872, "id": "b1", "idx": 1}, {"begin": 23876, "end": 24051, "id": "b2", "idx": 2}, {"begin": 24055, "end": 24208, "id": "b3", "idx": 3}, {"begin": 24212, "end": 24400, "id": "b4", "idx": 4}, {"begin": 24404, "end": 24639, "id": "b5", "idx": 5}, {"begin": 24643, "end": 24930, "id": "b6", "idx": 6}, {"begin": 24934, "end": 25138, "id": "b7", "idx": 7}, {"begin": 25142, "end": 25346, "id": "b8", "idx": 8}, {"begin": 25350, "end": 25517, "id": "b9", "idx": 9}, {"begin": 25521, "end": 25736, "id": "b10", "idx": 10}, {"begin": 25740, "end": 25909, "id": "b11", "idx": 11}, {"begin": 25913, "end": 26077, "id": "b12", "idx": 12}, {"begin": 26081, "end": 26219, "id": "b13", "idx": 13}, {"begin": 26223, "end": 26481, "id": "b14", "idx": 14}, {"begin": 26485, "end": 26650, "id": "b15", "idx": 15}, {"begin": 26654, "end": 26862, "id": "b16", "idx": 16}, {"begin": 26866, "end": 27111, "id": "b17", "idx": 17}, {"begin": 27115, "end": 27292, "id": "b18", "idx": 18}, {"begin": 27296, "end": 27534, "id": "b19", "idx": 19}, {"begin": 27538, "end": 27695, "id": "b20", "idx": 20}, {"begin": 27699, "end": 27876, "id": "b21", "idx": 21}, {"begin": 27880, "end": 28045, "id": "b22", "idx": 22}, {"begin": 28049, "end": 28167, "id": "b23", "idx": 23}, {"begin": 28171, "end": 28338, "id": "b24", "idx": 24}, {"begin": 28342, "end": 28476, "id": "b25", "idx": 25}, {"begin": 28480, "end": 28659, "id": "b26", "idx": 26}], "ReferenceToTable": [{"begin": 5214, "end": 5215, "target": "#tab_1", "idx": 0}, {"begin": 15757, "end": 15758, "idx": 1}, {"begin": 19854, "end": 19855, "target": "#tab_5", "idx": 2}, {"begin": 20504, "end": 20505, "target": "#tab_6", "idx": 3}, {"begin": 21115, "end": 21116, "target": "#tab_2", "idx": 4}, {"begin": 21146, "end": 21147, "target": "#tab_7", "idx": 5}], "Paragraph": [{"begin": 71, "end": 828, "idx": 0}, {"begin": 846, "end": 1146, "idx": 1}, {"begin": 1147, "end": 1385, "idx": 2}, {"begin": 1386, "end": 1529, "idx": 3}, {"begin": 1530, "end": 1928, "idx": 4}, {"begin": 1973, "end": 2068, "idx": 5}, {"begin": 2069, "end": 2716, "idx": 6}, {"begin": 2717, "end": 3283, "idx": 7}, {"begin": 3284, "end": 4005, "idx": 8}, {"begin": 4006, "end": 5019, "idx": 9}, {"begin": 5041, "end": 5233, "idx": 10}, {"begin": 5234, "end": 6635, "idx": 11}, {"begin": 6636, "end": 7187, "idx": 12}, {"begin": 7188, "end": 7811, "idx": 13}, {"begin": 7812, "end": 8635, "idx": 14}, {"begin": 8636, "end": 9020, "idx": 15}, {"begin": 9043, "end": 9185, "idx": 16}, {"begin": 9186, "end": 9810, "idx": 17}, {"begin": 9811, "end": 10348, "idx": 18}, {"begin": 10349, "end": 11046, "idx": 19}, {"begin": 11047, "end": 11891, "idx": 20}, {"begin": 11912, "end": 12247, "idx": 21}, {"begin": 12248, "end": 12380, "idx": 22}, {"begin": 12400, "end": 12492, "idx": 23}, {"begin": 12493, "end": 14029, "idx": 24}, {"begin": 14048, "end": 14748, "idx": 25}, {"begin": 14778, "end": 15094, "idx": 26}, {"begin": 15095, "end": 15380, "idx": 27}, {"begin": 15406, "end": 15759, "idx": 28}, {"begin": 15760, "end": 16293, "idx": 29}, {"begin": 16294, "end": 16674, "idx": 30}, {"begin": 16697, "end": 16947, "idx": 31}, {"begin": 16948, "end": 16995, "idx": 32}, {"begin": 17025, "end": 17136, "idx": 33}, {"begin": 17137, "end": 17142, "idx": 34}, {"begin": 17180, "end": 17440, "idx": 35}, {"begin": 17441, "end": 17554, "idx": 36}, {"begin": 17555, "end": 17560, "idx": 37}, {"begin": 17620, "end": 17714, "idx": 38}, {"begin": 17715, "end": 17738, "idx": 39}, {"begin": 17739, "end": 17853, "idx": 40}, {"begin": 17854, "end": 17888, "idx": 41}, {"begin": 17889, "end": 18005, "idx": 42}, {"begin": 18018, "end": 18045, "idx": 43}, {"begin": 18059, "end": 18267, "idx": 44}, {"begin": 18268, "end": 18325, "idx": 45}, {"begin": 18349, "end": 18607, "idx": 46}, {"begin": 18646, "end": 18762, "idx": 47}, {"begin": 18763, "end": 18882, "idx": 48}, {"begin": 18883, "end": 19206, "idx": 49}, {"begin": 19230, "end": 19824, "idx": 50}, {"begin": 19848, "end": 20251, "idx": 51}, {"begin": 20252, "end": 20930, "idx": 52}, {"begin": 20931, "end": 21786, "idx": 53}, {"begin": 21787, "end": 21834, "idx": 54}, {"begin": 21835, "end": 22239, "idx": 55}, {"begin": 22240, "end": 22378, "idx": 56}, {"begin": 22393, "end": 23269, "idx": 57}, {"begin": 23287, "end": 23372, "idx": 58}, {"begin": 23373, "end": 23453, "idx": 59}], "SectionHeader": [{"begin": 0, "end": 828, "idx": 0}], "SectionReference": [{"begin": 23467, "end": 28661, "idx": 0}], "Sentence": [{"begin": 71, "end": 348, "idx": 0}, {"begin": 349, "end": 496, "idx": 1}, {"begin": 497, "end": 634, "idx": 2}, {"begin": 635, "end": 768, "idx": 3}, {"begin": 769, "end": 828, "idx": 4}, {"begin": 846, "end": 1053, "idx": 5}, {"begin": 1054, "end": 1146, "idx": 6}, {"begin": 1147, "end": 1385, "idx": 7}, {"begin": 1386, "end": 1477, "idx": 8}, {"begin": 1478, "end": 1529, "idx": 9}, {"begin": 1530, "end": 1647, "idx": 10}, {"begin": 1648, "end": 1852, "idx": 11}, {"begin": 1853, "end": 1928, "idx": 12}, {"begin": 1973, "end": 2060, "idx": 13}, {"begin": 2061, "end": 2068, "idx": 14}, {"begin": 2069, "end": 2342, "idx": 15}, {"begin": 2343, "end": 2716, "idx": 16}, {"begin": 2717, "end": 3091, "idx": 17}, {"begin": 3092, "end": 3283, "idx": 18}, {"begin": 3284, "end": 3381, "idx": 19}, {"begin": 3382, "end": 3523, "idx": 20}, {"begin": 3524, "end": 3737, "idx": 21}, {"begin": 3738, "end": 3877, "idx": 22}, {"begin": 3878, "end": 4005, "idx": 23}, {"begin": 4006, "end": 4109, "idx": 24}, {"begin": 4110, "end": 4215, "idx": 25}, {"begin": 4216, "end": 4457, "idx": 26}, {"begin": 4458, "end": 4566, "idx": 27}, {"begin": 4567, "end": 4707, "idx": 28}, {"begin": 4708, "end": 4805, "idx": 29}, {"begin": 4806, "end": 4875, "idx": 30}, {"begin": 4876, "end": 4913, "idx": 31}, {"begin": 4914, "end": 5019, "idx": 32}, {"begin": 5041, "end": 5233, "idx": 33}, {"begin": 5234, "end": 5256, "idx": 34}, {"begin": 5257, "end": 5423, "idx": 35}, {"begin": 5424, "end": 5581, "idx": 36}, {"begin": 5582, "end": 5751, "idx": 37}, {"begin": 5752, "end": 6006, "idx": 38}, {"begin": 6007, "end": 6119, "idx": 39}, {"begin": 6120, "end": 6170, "idx": 40}, {"begin": 6171, "end": 6370, "idx": 41}, {"begin": 6371, "end": 6503, "idx": 42}, {"begin": 6504, "end": 6635, "idx": 43}, {"begin": 6636, "end": 6667, "idx": 44}, {"begin": 6668, "end": 6756, "idx": 45}, {"begin": 6757, "end": 6937, "idx": 46}, {"begin": 6938, "end": 6963, "idx": 47}, {"begin": 6964, "end": 7187, "idx": 48}, {"begin": 7188, "end": 7523, "idx": 49}, {"begin": 7524, "end": 7811, "idx": 50}, {"begin": 7812, "end": 7827, "idx": 51}, {"begin": 7828, "end": 7968, "idx": 52}, {"begin": 7969, "end": 8080, "idx": 53}, {"begin": 8081, "end": 8231, "idx": 54}, {"begin": 8232, "end": 8445, "idx": 55}, {"begin": 8446, "end": 8635, "idx": 56}, {"begin": 8636, "end": 8843, "idx": 57}, {"begin": 8844, "end": 9020, "idx": 58}, {"begin": 9043, "end": 9185, "idx": 59}, {"begin": 9186, "end": 9203, "idx": 60}, {"begin": 9204, "end": 9405, "idx": 61}, {"begin": 9406, "end": 9565, "idx": 62}, {"begin": 9566, "end": 9699, "idx": 63}, {"begin": 9700, "end": 9810, "idx": 64}, {"begin": 9811, "end": 9838, "idx": 65}, {"begin": 9839, "end": 9890, "idx": 66}, {"begin": 9891, "end": 9985, "idx": 67}, {"begin": 9986, "end": 10118, "idx": 68}, {"begin": 10119, "end": 10255, "idx": 69}, {"begin": 10256, "end": 10348, "idx": 70}, {"begin": 10349, "end": 10470, "idx": 71}, {"begin": 10471, "end": 10575, "idx": 72}, {"begin": 10576, "end": 10756, "idx": 73}, {"begin": 10757, "end": 10885, "idx": 74}, {"begin": 10886, "end": 11046, "idx": 75}, {"begin": 11047, "end": 11077, "idx": 76}, {"begin": 11078, "end": 11262, "idx": 77}, {"begin": 11263, "end": 11473, "idx": 78}, {"begin": 11474, "end": 11603, "idx": 79}, {"begin": 11604, "end": 11764, "idx": 80}, {"begin": 11765, "end": 11891, "idx": 81}, {"begin": 11912, "end": 12011, "idx": 82}, {"begin": 12012, "end": 12247, "idx": 83}, {"begin": 12248, "end": 12269, "idx": 84}, {"begin": 12270, "end": 12380, "idx": 85}, {"begin": 12400, "end": 12492, "idx": 86}, {"begin": 12493, "end": 12541, "idx": 87}, {"begin": 12542, "end": 12645, "idx": 88}, {"begin": 12646, "end": 12685, "idx": 89}, {"begin": 12686, "end": 12817, "idx": 90}, {"begin": 12818, "end": 12947, "idx": 91}, {"begin": 12948, "end": 13021, "idx": 92}, {"begin": 13022, "end": 13153, "idx": 93}, {"begin": 13154, "end": 13393, "idx": 94}, {"begin": 13394, "end": 13550, "idx": 95}, {"begin": 13551, "end": 13647, "idx": 96}, {"begin": 13648, "end": 13747, "idx": 97}, {"begin": 13748, "end": 13835, "idx": 98}, {"begin": 13836, "end": 13897, "idx": 99}, {"begin": 13898, "end": 14029, "idx": 100}, {"begin": 14048, "end": 14150, "idx": 101}, {"begin": 14151, "end": 14179, "idx": 102}, {"begin": 14180, "end": 14411, "idx": 103}, {"begin": 14412, "end": 14529, "idx": 104}, {"begin": 14530, "end": 14594, "idx": 105}, {"begin": 14595, "end": 14748, "idx": 106}, {"begin": 14778, "end": 14928, "idx": 107}, {"begin": 14929, "end": 14986, "idx": 108}, {"begin": 14987, "end": 15094, "idx": 109}, {"begin": 15095, "end": 15220, "idx": 110}, {"begin": 15221, "end": 15380, "idx": 111}, {"begin": 15406, "end": 15503, "idx": 112}, {"begin": 15504, "end": 15686, "idx": 113}, {"begin": 15687, "end": 15759, "idx": 114}, {"begin": 15760, "end": 15878, "idx": 115}, {"begin": 15879, "end": 16044, "idx": 116}, {"begin": 16045, "end": 16138, "idx": 117}, {"begin": 16139, "end": 16293, "idx": 118}, {"begin": 16294, "end": 16393, "idx": 119}, {"begin": 16394, "end": 16517, "idx": 120}, {"begin": 16518, "end": 16605, "idx": 121}, {"begin": 16606, "end": 16674, "idx": 122}, {"begin": 16697, "end": 16835, "idx": 123}, {"begin": 16836, "end": 16947, "idx": 124}, {"begin": 16948, "end": 16995, "idx": 125}, {"begin": 17025, "end": 17058, "idx": 126}, {"begin": 17059, "end": 17136, "idx": 127}, {"begin": 17137, "end": 17142, "idx": 128}, {"begin": 17180, "end": 17440, "idx": 129}, {"begin": 17441, "end": 17554, "idx": 130}, {"begin": 17555, "end": 17560, "idx": 131}, {"begin": 17620, "end": 17714, "idx": 132}, {"begin": 17715, "end": 17738, "idx": 133}, {"begin": 17739, "end": 17853, "idx": 134}, {"begin": 17854, "end": 17888, "idx": 135}, {"begin": 17889, "end": 18005, "idx": 136}, {"begin": 18018, "end": 18045, "idx": 137}, {"begin": 18059, "end": 18200, "idx": 138}, {"begin": 18201, "end": 18267, "idx": 139}, {"begin": 18268, "end": 18325, "idx": 140}, {"begin": 18349, "end": 18571, "idx": 141}, {"begin": 18572, "end": 18607, "idx": 142}, {"begin": 18646, "end": 18702, "idx": 143}, {"begin": 18703, "end": 18762, "idx": 144}, {"begin": 18763, "end": 18775, "idx": 145}, {"begin": 18776, "end": 18882, "idx": 146}, {"begin": 18883, "end": 18909, "idx": 147}, {"begin": 18910, "end": 18998, "idx": 148}, {"begin": 18999, "end": 19080, "idx": 149}, {"begin": 19081, "end": 19206, "idx": 150}, {"begin": 19230, "end": 19295, "idx": 151}, {"begin": 19296, "end": 19371, "idx": 152}, {"begin": 19372, "end": 19523, "idx": 153}, {"begin": 19524, "end": 19632, "idx": 154}, {"begin": 19633, "end": 19824, "idx": 155}, {"begin": 19848, "end": 19961, "idx": 156}, {"begin": 19962, "end": 20058, "idx": 157}, {"begin": 20059, "end": 20251, "idx": 158}, {"begin": 20252, "end": 20270, "idx": 159}, {"begin": 20271, "end": 20475, "idx": 160}, {"begin": 20476, "end": 20586, "idx": 161}, {"begin": 20587, "end": 20730, "idx": 162}, {"begin": 20731, "end": 20930, "idx": 163}, {"begin": 20931, "end": 20969, "idx": 164}, {"begin": 20970, "end": 21117, "idx": 165}, {"begin": 21118, "end": 21318, "idx": 166}, {"begin": 21319, "end": 21465, "idx": 167}, {"begin": 21466, "end": 21554, "idx": 168}, {"begin": 21555, "end": 21644, "idx": 169}, {"begin": 21645, "end": 21722, "idx": 170}, {"begin": 21723, "end": 21786, "idx": 171}, {"begin": 21787, "end": 21834, "idx": 172}, {"begin": 21835, "end": 21973, "idx": 173}, {"begin": 21974, "end": 22083, "idx": 174}, {"begin": 22084, "end": 22239, "idx": 175}, {"begin": 22240, "end": 22378, "idx": 176}, {"begin": 22393, "end": 22603, "idx": 177}, {"begin": 22604, "end": 22664, "idx": 178}, {"begin": 22665, "end": 22725, "idx": 179}, {"begin": 22726, "end": 22803, "idx": 180}, {"begin": 22804, "end": 22897, "idx": 181}, {"begin": 22898, "end": 23127, "idx": 182}, {"begin": 23128, "end": 23269, "idx": 183}, {"begin": 23287, "end": 23372, "idx": 184}, {"begin": 23373, "end": 23415, "idx": 185}, {"begin": 23416, "end": 23453, "idx": 186}], "ReferenceToFigure": [{"begin": 1144, "end": 1145, "target": "#fig_0", "idx": 0}, {"begin": 13019, "end": 13020, "target": "#fig_2", "idx": 1}, {"begin": 13672, "end": 13674, "target": "#fig_4", "idx": 2}, {"begin": 21981, "end": 21982, "target": "#fig_6", "idx": 3}], "Div": [{"begin": 71, "end": 828, "idx": 0}, {"begin": 831, "end": 1928, "idx": 1}, {"begin": 1930, "end": 5019, "idx": 2}, {"begin": 5021, "end": 9020, "idx": 3}, {"begin": 9022, "end": 11891, "idx": 4}, {"begin": 11893, "end": 12380, "idx": 5}, {"begin": 12382, "end": 12388, "idx": 6}, {"begin": 12390, "end": 14029, "idx": 7}, {"begin": 14031, "end": 14036, "idx": 8}, {"begin": 14038, "end": 14748, "idx": 9}, {"begin": 14750, "end": 15380, "idx": 10}, {"begin": 15382, "end": 16674, "idx": 11}, {"begin": 16676, "end": 16995, "idx": 12}, {"begin": 16997, "end": 17596, "idx": 13}, {"begin": 17598, "end": 18005, "idx": 14}, {"begin": 18007, "end": 18045, "idx": 15}, {"begin": 18047, "end": 18325, "idx": 16}, {"begin": 18327, "end": 18607, "idx": 17}, {"begin": 18609, "end": 18623, "idx": 18}, {"begin": 18625, "end": 19206, "idx": 19}, {"begin": 19208, "end": 19824, "idx": 20}, {"begin": 19826, "end": 22378, "idx": 21}, {"begin": 22380, "end": 23269, "idx": 22}, {"begin": 23271, "end": 23453, "idx": 23}], "SectionMain": [{"begin": 828, "end": 23453, "idx": 0}]}}