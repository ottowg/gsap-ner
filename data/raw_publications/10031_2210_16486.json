{"text": "Learning Probabilistic Models from Generator Latent Spaces with Hat EBM\n\nAbstract:\nThis work proposes a method for using any generator network as the foundation of an Energy-Based Model (EBM). Our formulation posits that observed images are the sum of unobserved latent variables passed through the generator network and a residual random variable that spans the gap between the generator output and the image manifold. One can then define an EBM that includes the generator as part of its forward pass, which we call the Hat EBM. The model can be trained without inferring the latent variables of the observed data or calculating the generator Jacobian determinant. This enables explicit probabilistic modeling of the output distribution of any type of generator network. Experiments show strong performance of the proposed method on (1) unconditional ImageNet synthesis at 128\u00d7128 resolution, (2) refining the output of existing generators, and (3) learning EBMs that incorporate non-probabilistic generators. Code and pretrained models to reproduce our results are available at https://github.com/point0bar1/hat-ebm.\nThis work proposes a method for using a generator network as the foundation for an Energy-Based Model (EBM). The generator network is concatenated with a hat network that takes an image input 36th Conference on Neural Information Processing Systems (NeurIPS 2022).\n\nMain:\n\n\n\n1 Introduction\nGenerator networks [20, 12] which transform a latent distribution to a complex observed distribution (e.g., images, videos) are found across different deep generative models. One limitation of generator networks is the difficulty of obtaining an explicit representation of the probability distribution defined by the output of the network after transformation of the latent space. For generators from Generative Adversarial Networks (GANs) [12, 32] and Variational Autoencoders (VAEs) [20, 33] where the latent states corresponding to realistic images follow a trivial distribution (e.g., isotropic Gaussian), the difficulty of obtaining image space probabilities lies in calculating the log determinant of the generator Jacobian which is needed to perform density change-of-variables. For other generator models such as a deterministic autoencoder, there might not be a natural way to generate probabilistic samples from the latent space that correspond to realistic images. When the latent space has smaller dimension than the image space, there is further difficulty in describing the generator image distribution since the distribution measure must be confined to the manifold of the generator output. where Y is a residual image and Z is a latent vector. An image is generated using X = Y + G(Z) for a generator G(Z), and the image is passed to the hat network H(X; \u03b8) to obtain the energy of the pair (Y, Z). This allows for principled probabilistic learning which can incorporate the latent space of any generator. Right: Unconditional ImageNet 128\u00d7128 samples generated by a Hat EBM. and outputs a scalar. Before the generator output is fed into the hat network, the generated image is adjusted by adding a residual image that spans the gap between the generator output and the image manifold. The total function, including the generator, addition of the residual image, and the hat network, is called the Hat EBM. This formulation allows us to define an EBM which can incorporate the generator latent space as part of its image space density and MCMC sampling process. Figure 1 displays a diagram of the Hat EBM and selected Hat EBM samples for unconditional ImageNet at resolution 128 \u00d7 128. Our method is general and applies to any generator model, in contrast to existing methods for converting generator networks to EBMs which only apply to a specific generator model like a GAN [5] or VAE [38]. Additionally, the learning method does not require inference of latent states of the observed data as used in related works [20, 39, 15, 30].\nThe Hat EBM formulation enables applications with frozen pretrained generator networks such as learning an EBM to refine samples from generators with probabilistic latent spaces (e.g. GANs) and synthesizing samples using non-probabilistic generators (e.g. deterministic autoencoders). We also propose a self-contained learning method that extends cooperative learning of EBM and generator networks [39] to achieve high-quality synthesis. Our main contributions are summarized below.\n\u2022 We introduce a method for defining a Hat EBM that incorporates a generator network as part of its forward pass. This EBM includes the generator latent space as part of MCMC sampling. \u2022 We show that our method can refine samples from pretrained GAN generators and sample from the latent space of deterministic autoencoders which are originally incompatible with sampling. \u2022 We propose a self-contained Hat EBM learning method that trains both a generator and energy network from scratch. This enables us to achieve an FID score of 29.2 on unconditional ImageNet at resolution 128\u00d7128, demonstrating the EBMs are competitive with state-of-the-art generative models on complex and high resolution datasets.\nwith a ConvNet potential [43, 42]. This dramatically increases the model capacity and enables strong image synthesis performance [29, 9] and adversarial robustness [16]. Several works investigate training an EBM in tandem with an auxiliary model. Kim and Bengio [19] jointly train an EBM and generator without MCMC by using samples from the generator as direct approximations of the EBM density. The EGAN [7] builds on this method by introducing a maximum entropy objective to improve generator training. A similar approach is explored by the VERA model [14]. Cooperative learning [41] trains the EBM and generator by using the generator to initialize samples needed to train the EBM and uses reconstruction loss between generator and EBM samples to learn the generator. The Flow Contrastive EBM [11] learns an EBM using Noise Contrastive Estimation with an auxiliary flow model.\nLatent Space EBM. EBMs in the data space can be highly multi-modal, and MCMC sampling can be difficult [40, 29, 9]. Recent works [30, 31] explore learning an EBM in latent space, which is then mapped to the data space with a learned generator. The energy landscape in the latent space is smoother and less multi-modal because it occupies much lower dimensional space and stands upon an expressive generator. These works define a prior EBM in the latent space as a correction of the non-informative uniform prior or isotropic Gaussian prior. To learn the model, one needs to infer the posterior of the latent variables. Posterior inference given such a complicated model is non-trivial. One needs to either design a sophisticated amortized inference network or run expensive MCMC. Our model also defines an EBM in the latent space, while its learning does not need posterior inference, making the learning much simpler and more scalable. Several works [36, 5, 2] leverage a pretrained GAN to define an EBM in the latent space of the generator with a correction based on the discriminator, and shows improved synthesis quality over the pretrained GAN. The VAEBM [38] uses a pretrained VAE to facilitate EBM learning. Our model can likewise be utilized to improve the quality of images from pretrained GAN or VAE generators. Our method is however more general since it can be used to obtain realistic samples from any pretrained generator, including non-probabilistic generators from deterministic autoencoders.\n\n3 Formulation of Hat EBM\nThis section presents the formulation of the Hat EBM energy function and the proposed learning procedure. We first review the fundamental equations of EBM learning. Then we introduce two variants of the Hat EBM: one that learns a joint distribution over the latent space and residual image space, and one that learns a distribution of residual images conditional on a fixed latent state from a known latent distribution. Finally, we propose a method for learning the hat network and generator network of a Hat EBM simultaneously so that our model can be used for self-contained image generation without the need for a pretrained generator.\n\n3.1 Review of EBM Learning\nWe briefly review the main components of EBM learning following the standard method derived from works such as [17, 44, 40]. A deep EBM has the formp(x; \u03b8) = 1 Z(\u03b8) exp{\u2212U (x; \u03b8)}\nwhere U (x; \u03b8) is a deep neural network with weights \u03b8 and Z(\u03b8) is the intractable normalizing constant. Given a true but unknown data density q(x), Maximum Likelihood learning uses the objective arg min \u03b8 D KL (q(x) p(x; \u03b8)), which can be minimized using the stochastic gradient\u2207L(\u03b8) \u2248 1 n n i=1 \u2207 \u03b8 U (X + i ; \u03b8) \u2212 1 n n i=1 \u2207 \u03b8 U (X \u2212 i ; \u03b8)\nwhere the positive samples {X + i } n i=1 are a set of data samples and the negative samples{X \u2212 i } n i=1\nare samples from the current model p(x; \u03b8). To obtain the negative samples for a deep EBM, it is common to use MCMC sampling with the K steps of Langevin equationX (k+1) = X (k) \u2212 \u03b5 2 2 \u2207 X (k) U (X (k) ; \u03b8) + \u03b5V k ,\nwhere \u03b5 is the step size and V k \u223c N (0, I). The Langevin trajectories are initialized from a set of states {X \u2212 i,0 } n i=1 obtained from a certain initialization strategy.\n\n3.2 Hat EBM: Joint Distribution of Latent and Residual Image\nThis section presents our method for adapting a fixed generator network G(z) to be part of an EBM, which we call the Hat EBM. The Hat EBM defines the joint distribution of the random variable Z \u2208 R m in the m-dimensional latent space of the generator network and a random variable Y \u2208 R d in the d-dimensional image space. The joint energy has the formU (Y, Z; \u03b8) = H(G(Z) + Y ; \u03b8)\nwhere H(x; \u03b8) is a neural network that takes an image x \u2208 R d as input and returns a scalar output.\nThe weights of H are given by \u03b8. We call H the hat network because it sits atop the generator G to incorporate the generator latent space directly into the probabilistic model.\nThe random variable Y is meant to accommodate the gap between the output of G(Z) and the image manifold, since in general we expect that G(Z) contains an approximate but imperfect representation of the image distribution which can be refined by the residual state Y . In practice, we find that the majority of the appearance of a sampled image X = G(Z) + Y comes from the generator output G(Z) and not the residual image Y , indicating that the majority of the sampling behaviors of our model are determined by the latent space of G (see Figure 3).\nAn appealing aspect of the Hat EBM formulation is that we can learn the model without either calculating the log determinant of the Jacobian of G(Z) as would be required for an energy of the form U (G(Z); \u03b8), or inferring the Z latent vectors associated with observed images X as done in existing work on learning latent prior EBMs [30]. This is possible because we define the distribution of observed images X by X = G(Z) + Y where the pair (Y, Z) is drawn from a true but unknown density q(y, z). We can then use the Maximum Likelihood framework in Section 3.1 to learn the weights \u03b8 of the hat network H(x; \u03b8) by minimizing the objective arg min \u03b8 D KL (q(y, z)||p(y, z; \u03b8)) wherep(y, z; \u03b8) = 1 Z(\u03b8) exp{\u2212H(G(z) + y; \u03b8)}.\nOne can obtain negative samples using alternating Langevin updatesY (k+1) = Y (k) \u2212 \u03b5 2 1 2 \u2207 Y (k) H(G(Z (k) ) + Y (k) ; \u03b8) + \u03b5 1 V k,1Z (k+1) = Z (k) \u2212 \u03b5 2 2 2 \u2207 Z (k) H(G(Z (k) ) + Y (k+1) ; \u03b8) + \u03b5 2 V k,2\nwhich switch off between updates with respect to z and updates with respect to y. This sampling algorithm is essentially Metropolis-within-Gibbs since the Langevin update can be written as a Metropolis-Hastings step with Gaussian proposal, in which case ( 6) and ( 7) define a valid sampler for p(y, z; \u03b8). Finally, updating \u03b8 can be accomplished using\u2207L(\u03b8) \u2248 1 n n i=1 \u2207 \u03b8 H(X + i ; \u03b8) \u2212 1 n n i=1 \u2207 \u03b8 H(G(Z \u2212 i ) + Y \u2212 i ; \u03b8)\nwhere X + i are observed samples and the pairs (Y \u2212 i , Z \u2212 i ) are obtained via MCMC. In our formulation the observed data X + i are sufficient statistics for H(x; \u03b8) and there is no need to infer the (Y + i , Z + i ) pairs for the positive samples when learning the weights of the hat network.\n\n3.3 Conditional Hat EBM: Residual Image Conditional on Latent Sample\nNext we present a conditional variant of the Hat EBM. While the previous version of the Hat EBM is applicable to any generator network G(z), including generators from deterministic autoencoders which cannot typically be sampled from, the conditional version of the Hat EBM is tailored towards generator networks which map a trivial latent distribution to complex signals like images. For these kinds of generators, one can use the known latent distribution as an ancestral distribution and learn a conditional distribution of the residual image given a latent sample. We emphasize that the conditional Hat EBM can be used to learn an unconditional distribution of observed images X and that the term conditional refers to the relationship between the latent variables Y and Z. Our experiments focus on modeling only observed images X without conditional information such as labels or captions. Suppose we use a trivial marginal distribution p 0 (z) for Z and a generator G trained to produce realistic images from this latent distribution. In our experiments, p 0 is always N (0, I). We can now define a conditional Hat EBM density p(y|z; \u03b8) = 1 Zz(\u03b8) exp{\u2212H(G(z) + y; \u03b8)} and a joint densityp(y, z; \u03b8) = 1 Z z (\u03b8) p 0 (z) exp{\u2212H(G(z) + y; \u03b8)}.\nIn this case, we posit that observed images X are generated according to X = G(Z) + Y for some distribution q(y, z) = p 0 (z)q(y|z). Obtaining the negative samples (Z \u2212 i , Y \u2212 i ) is done by first drawing Z \u2212 i from p 0 (z) and then obtaining Y \u2212 i |Z \u2212 i by using Langevin updates on the conditional probability p(y|z; \u03b8). Note that p(y|z; \u03b8) = p(y|G(z); \u03b8) because of the form of (9). We update \u03b8 using the same equation (8) as the joint Hat EBM because X + i is still a sufficient statistic for learning H(x; \u03b8) and because we do not need to infer the Z + i for X + i since the prior p 0 (z) does not contain any model parameters. In practice we initialize Langevin sampling from Y 0 = 0 and Z \u223c N (0, I), and perform K steps of (6) to draw a residual sample Y K while keeping Z fixed.\n\n3.4 Learning the Hat Network and Generator in Tandem for Conditional Hat EBM\nBoth formulations of the Hat EBM above assume that a pretrained generator network G(z) is available as the basis for learning the Hat EBM. In order to use the Hat EBM as a self-contained learning process for image generation, we now propose a method to learn the weights \u03c6 of a generator network G(z; \u03c6) and the weights \u03b8 of a hat network H(x; \u03b8) simultaneously. Our method is based on the cooperative learning [39] strategy. We first briefly review the cooperative learning formulation, and then present the learning formulation for the Hat EBM. A key difference between the derivations is that the original cooperative learning method requires MCMC inference of the latent variable \u1e90 associated with an MCMC sample X to train G(z; \u03c6), while in our formulation the latent variable Z is explicitly defined and does not need to be inferred. This enables major computational savings because we can bypass the expensive MCMC inference of \u1e90.\nIn the original cooperative learning [39], the generator output G(z; \u03c6) is trained to match the appearance of a Langevin chain X K sampled from the potential U (x; \u03b8) and initialized from the state X 0 = G(Z 0 ; \u03c6) where Z 0 \u223c N (0, I). The model defines the conditional density of an images X given latents Z \u223c N (0, I) as X|Z \u223c N (G(Z; \u03c6), \u03c4 2 I) for some sufficiently small \u03c4 > 0. Given a sampled state X K , updating G(z; \u03c6) requires inferring Z|X K using the latent Langevin equationZ k+1 = Z k \u2212 \u03b5 2 2 Z k + 1 2\u03c4 2 \u2207 Z k G(Z k ; \u03c6) \u2212 X K 2 2 + \u03b5V k ()\nbefore updating \u03c6 using the Maximum Likelihood stochastic gradient\u2207L G (\u03c6) \u2248 1 n n i=1 1 2\u03c4 2 \u2207 \u03c6 G(Z K,i ; \u03c6) \u2212 X K,i\nwhere the i index denotes member i of a batch with size n. We note that the code released with the cooperative learning method does not infer the latent variable of observed images and Z 0 \u223c N (0, I) is used in place of Z K in the objective (11). In accordance with this approach, we find that inferring Z K often hurts model performance and leads to additional complication. The difficulty of inferring Z|X K and the omission of this step in practice leave an unresolved gap in the cooperative learning formulation. The Hat EBM generator update allows us to bypass the Langevin update for Z without theoretical complications.\nTo update the weights of a Hat EBM generator, we propose to train the generator to match the image samples produced by the current Hat EBM. Given the current generator weights \u03c6 t and hat network weights \u03b8 t at step t, we define our learnable model as Z \u223c N (0, I) and X|Z \u223c N (G(Z; \u03c6), \u03c4 2 I) and we define the true distribution of (X, Z) as Z \u223c N (0, I) and X = Y K + G(Z; \u03c6 t ) where Y K |Z is drawn from K steps of Langevin sampling with Hat EBM density p(y|z; \u03b8 t , \u03c6 t ) \u221d exp{\u2212H(G(z; \u03c6 t ) + y; \u03b8 t )}. Langevin updating is only used to obtain Y K while Z remains fixed, as in the method from Section 3.3. Then \u03c6 can be updated using the Maximum Likelihood objective Then data samples X + and negative samples X \u2212 = Y + G(Z; \u03c6) are used to update the weight \u03b8 of the hat network. On the right, pairs (X , Z ) from past hat network updates will be drawn randomly from a bank of states to update the weight \u03c6 of the generator. The bank memory (X , Z ) will then be overwritten by a new pair (X, Z) from the current model.\u03c6 t+1 = arg min \u03c6 1 2\u03c4 2 E p0(z)p(y|z;\u03b8t,\u03c6t) G(Z; \u03c6) \u2212 (Y + G(Z; \u03c6 t )) 2 2 .\nConceptually, this loss function encourages G(Z; \u03c6) to closely match the appearance of samples X = Y + G(Z; \u03c6 t ) created from a fixed generator G(Z; \u03c6 t ) and fixed hat network H(x; \u03b8 t ). In other words, the generator update should achieve G(Z; \u03c6 t+1 ) \u2248 Y + G(Z; \u03c6 t ) so that the updated generator absorbs the residual image Y |Z from the current Hat EBM. Once the generator absorbs the current Hat EBM residual, the hat network update should learn to synthesize residual images that refine the the generator output to be more similar to the observed data. Like the original cooperative learning method, our generator is trained using only synthetic images and no observed data images are used to update \u03c6.\nIdeal training of H and G would alternate between using the gradient of ( 12) until generator convergence is reached and using the gradient (8) to update the hat network. In practice we implement the minimization in ( 12) using only one gradient update initialized from \u03c6 = \u03c6 t to obtain \u03c6 t+1 rather than training until full convergence. This is done to increase training efficiency and to avoid maintaining a separate copy of generator weights for the fixed network G(z; \u03c6 t ).\nIn our experiments we observe that using a single gradient update with the objective (12) has limited success because the generator output can become too closely tethered to biases of the current hat network. We find the same problems with the original cooperative learning objective (11) (see Appendix F). To overcome these problems, we choose to train G(z; \u03c6) at time t + 1 to match the historical distribution of hat networks H(x; \u03b8 t ) and generators G(z; \u03c6 t ) for a selection of past epochs t 1 , t 2 , . . . t L \u2264 t instead of training the generator to match the distribution of the current hat network H(x; \u03b8 t ) and generator G(z; \u03c6 t ). This simply involves redefining the true distribution (X, Z) by first sampling t from {t 1 , . . . , t L } and then generating Z \u223c N (0, I) andX K = Y K + G(Z; \u03c6 t )\nwhere Y |Z follows the energy H(G(Z; \u03c6 t ) + Y ; \u03b8 t ). In this case the loss (12), after replacing \u03c6 t with \u03c6 t , is a stochastic approximation of the Maximum Likelihood gradient defined by the joint distribution (t , Z, X K ) (see Appendix F). In practice, we implement this procedure by keeping a persistent bank of 10,000 pairs (X, Z) created from past hat network updates. When updating the generator, we draw n = 128 pairs from the bank and replace it with a newly generated batch of n = 128 pairs from the current hat EBM. This ensures that the selection {t 1 , . . . , t L } of past epochs remains within a close range of the current epoch t with high probability. Saving the generated images X at each EBM update allows us to learn from past generator weights \u03c6 t without maintaining a copy of the weights. See Figure 2 for an illustration and Appendix G for a code sketch.\n\n4 Experiments\nIn the subsequent empirical evaluations, we will address the following questions:\n1. Refinement: To what extent can our method refine samples from a pretrained generator model with known prior distribution?\n2. Retrofit: Is our method capable of turning a generator model pretrained as a deterministic autoencoder into a generative model for which samples resemble realistic images?\n3. Synthesis: Can our method learn a generator from scratch with competitive quality of synthesis on common image datasets? Can our method be scaled up to challenging datasets such as ImageNet with competitive synthesis for unconditional sampling?\n4. Out-of-Distribution: Can the Hat EBM be used for Out-of-Distribution (OOD) detection to distinguish between samples from the training distribution and samples from dissimilar distributions?\nFigure 3 visualizes some representative sampling paths for the models trained to investigate questions 1, 2, and 3 on the CIFAR-10 dataset. The appendix contains details such as pseudocode, training parameters, and model architectures.\n\n4.1 Refinement\nIn this section, we examine the problem of refining samples from a pretrained generator using a joint Hat EBM trained according to the method in Section 3.2. A pretrained SN-GAN with generator is used as a baseline generator G. We learn a Hat EBM that incorporates the generator network to refine the initial generator samples. The hat network has the exact same structure as the SN-GAN discriminator except that we remove spectral norm layers. We use fixed batch norm statistics for the generator and our energy is deterministic. The experiment is performed for the CIFAR-10 32 \u00d7 32 and CelebA 64 \u00d7 64 datasets. To evaluate our method, we compare with Discriminator Driven Latent Sampling (DDLS) [5], which takes the pretrained discriminator D learned with G and samples from the potentialU (z) = D(G(z)) + 1 2 z 2 2 .\nWe train D and G using the Mimicry repository for reproducible GAN experiments [22] to obtain stronger baselines for G(z) than those used in [5].\nTable 1 shows our results. The Hat EBM can learn a hat network capable of refining a image appearance more successfully than DDLS on both CIFAR-10 and CelebA. We use the joint version of the Hat EBM where both Y and Z are updated during sampling. Sampling is initialized from Y 0 = 0 and Z 0 \u223c N (0, I). The hat networks learns to tilt Z away from its initial normal distribution to find a nearby latent vector with a more realistic appearance. We observe that the majority of the refinement is occurring in the latent space, and that the residual image Y is essentially imperceptible (see Figure 3). We also notice that training quickly becomes unstable when Y is removed from the Hat EBM (see Appendix H). In our experience, it is essential to incorporate the residual for stable learning. A possible reason for this phenomenon is that the hat network can learn to discriminate between generator images and images not from the generator, whether they are realistic or not. If so, the hat network can assign increasingly high energy to generator samples in the absence of the residual Y . Even an imperceptible Y is sufficient to prevent the hat network from easily distinguishing positive and negative samples so that learning is stable.\n\n4.2 Retrofit\nIn this section, we incorporate a non-probabilistic generator network G(z) into a probabilistic Hat EBM model. This essentially allows us to sample from the latent space of G(z) to find latent samples whose mapping corresponds to a realistic image. Like the results in Section 4.1, the residual image has small norm in the image space and most of the appearance of the sampled images comes from G(z). This happens naturally without the need to coerce Y to be close to 0 by including a prior term such as p 0 (y) \u221d exp{\u2212 1 2\u03c3 2 y 2 2 }, although including a prior term can further limit growth of Y . The autoencoder generator G(z) is pretrained as the second half of a standard inference network and generator network pairing. An image X is fed into the inference network I and converted into a latent state Z = I(X), which is then decoded to obtain a reconstruction X = G(Z). The inference network and generator are learned jointly using the MSE loss X \u2212 X 2 2 . To keep the latent space mapping of I(X) numerically stable, we project the m-dimensional raw output of the inference network to the sphere around the origin with radius \u221a m so that I(X) 2 = \u221a m. More sophisticated methods such as perceptual and adversarial loss could have been used to train the autoencoder, but we use MSE loss to keep our implementation minimal. We observe that when Z is a vector-shaped latent state, it can be difficult to learn reconstructions X with sharp appearance even for simple datasets like CIFAR-10. To obtain better reconstructions and therefore a latent space with more realistic mappings to the image space, we use image-shaped latent states Z. The details of our autoencoder networks can be found in Appendix E. When Z is an image shaped latent, we treat it exactly the same as a vector latent in the learning and sampling algorithms.Refinement Langevin Steps \u2192 X G(Z) Y X G(Z) Y X G(Z) Y Retrofit Langevin Steps \u2192 X G(Z) Y X G(Z) Y X G(Z) Y Synthesis Langevin Steps \u2192 X G(Z) Y X G(Z) Y X G(Z) Y\nWe experiment with assimilating an autoencoder generator into a Hat EBM potential for the CIFAR-10 dataset. Our results are visualized in Figure 3 with additional results in the Appendix K. We train the Hat EBM using shortrun learning in the latent and image space by initializing Y 0 = 0 and Z 0 \u223c N (0, I) and using K = 100 MCMC steps of ( 6) and ( 7) from initialization during both training and testing evaluation to generate samples. During the Langevin dynamics, image appearance is refined mostly in the latent space. Our best model achieves a solid FID score of 26.01 \u00b1 0.09. This demonstrates that Hat EBM can learn a probabilistic model over a non-probabilistic latent space.\n\n4.3 Synthesis\nIn this section, we use the conditional Hat EBM formulation from Section 3.4 to learn a hat network and generator network from scratch for self-contained synthesis. We explore synthesis for unconditional CIFAR-10 at resolution 32 \u00d7 32, CelebA at resolution 64\u00d764, and unconditional ImageNet at resolution 128\u00d7128. While recent generative models show promising results for class conditional sampling, unconditional sampling with high quality synthesis remains a significant challenge. We find especially strong results for unconditional ImageNet synthesis using the Hat EBM. This demonstrates strong potential of our synthesis method for learning with highly diverse unstructured datasets.\nOur Hat EBM models use SN-GAN architectures for sizes 32 \u00d7 32, 64 \u00d7 64, and 128 \u00d7 128, where the discriminator architecture is used for the hat network. During learning, we keep the generator batch norm parameters fixed to mean 0 and variance 1. We remove all spectral norm layers from the hat network. Training parameters can be found in Appendix J. For ImageNet models, we found that [26] 65.7 SS-GAN [6] 43.9 InfoMax GAN [23] 58.9 Hat EBM, scaled (Ours)* 29.37 \u00b1 0.15 SS-GAN, scaled [6] 23.4\nannealing the generator and hat network learning rate by a factor of 10 after 250K weight updates for each network improved the FID score significantly. See Appendix K for uncurated samples from our Hat EBM models. FID results for our model and a representative selction of generative models are shown in Table 2. We were unable to reproduce the GEBM FID scores reported in [3] and we report the score obtained from a reimplementation with the official training code. For the SN-GAN FID score, we report the stronger baseline from our reimplementation in Section 4.1.\nResults show strong performance of the Hat EBM compared to competing generative models across all datasets, with an especially strong performance for ImageNet. Our method significantly outperforms other EBM learning methods on CIFAR-10. The Hat EBM synthesis results are on par with the SN-GAN baseline for CIFAR-10 and CelebA, and the Hat EBM significantly outperforms SN-GAN for ImageNet. With a budget of 8 GPUs and about 2.5 days of computing, our Hat EBM achieves an ImageNet FID score of 40.0, outperforming the small-scale SS-GAN.\nTo our knowledge, the current state-of-the-art model for unconditional ImageNet synthesis at resolution 128 \u00d7 128 is the large-scale SS-GAN [6], which achieves an FID score of 23.4. This model was trained using a BigGAN architecture and 128-core TPUv3 pods. To scale up our Hat EBM, we doubled the number of channel dimensions for both the hat network and generator network from the original SN-GAN architecture and trained on 32-core TPU-v3 pods. Our best FID score for unconditional ImageNet 128\u00d7128 was 29.2, which comes within a competitive range of state-of-the-art. We believe that further scaling in future work could enable Hat EBM to match or surpass state-of-the-art.\nOur results decisively demonstrate the potential of EBM learning for high-quality synthesis well beyond the scale investigated in any prior EBM work.\n\n4.4 Out-of-Distribution Detection\nExperiments in this section assess Hat EBM performance on Out-Of-Distribution (OOD) detection. We use the conditional Hat EBM model trained on CIFAR-10 from Section 4.3 and calculate the energy H(X; \u03b8) on unseen in-distribution images from the CIFAR-10 test set and images from OOD datasets which include CIFAR-100, CelebA, and SVHN. We follow standard OOD evaluation from works such as [27] which compute the AUROC metric on the energy scores of the in-distribution and OOD samples. This metric measures the ability of the Hat EBM to distinguish between in-distribution samples not seen during training and OOD samples. Following [13, 38], we expect that the energy of the OOD datasets will be higher than the energy of in-distribution test images since higher energy samples should appear with lower frequency in the learn density.\nOur results are shown in Table 3. The Hat EBM shows strong performance as an OOD detection method. Among methods that are fully unsupervised, our model has the top performance across all three OOD datasets. Our method approaches the results of methods that are trained with labeled [9] 0.43 0.54 0.69 VAEBM [38] 0.83 0.62 0.77 Improved CD EBM [8] 0.91 0.83 -JEM [13] 0.67 0.87 0.77 HDGE [24] 0.96 0.91 0.80 OOD EBM [25] 0.91 0.87 0.78 OOD EBM (fine-tuned) [25] 0.99 0.94 1.00 data such as HDGE [24] and the fine-tuned OOD EBM [25], although we do not yet match these scores. Overall, there is strong evidence that the Hat EBM is naturally an effective method for OOD detection, especially when supervised label information is unavailable.\n\n5 Conclusion\nMaximum Likelihood learning of EBMs poses a significant challenge: drawing negative samples from the current density model, which is often highly multi-modal. Prior art addresses this challenge by recruiting approximations of the EBM in the form of an ancestral sampling from a generator model, truncated Langevin chains, flow-based models, or lifting the EBM into the induced latent space of generator models. In contrast, our work proposes a method for absorbing any generator as a backbone of an EBM. The formulation assumes that observed images are the sum of unobserved latent variables pushed forward through the generator and a residual random variable which closes the gap between generator samples and image manifold. The hat network sits atop the generator and residual and both nets form the Hat EBM. The generator allows for efficient sampling but may only capture the coarse structure of the images, while the residuals can capture fine-grain details.\nThe Hat EBM formulation is presented in three variations: (1) joint learning of latent and residual image for adapting any fixed generator, (2) conditional learning for generators with known prior distribution, (3) self-contained learning of both EBM and generator from scratch. Notably, the training requires neither the log determinant of the generator Jacobian or inference of latent variables, making the learning simple and scalable.\nEmpirical evaluations demonstrate the various capabilities of the Hat EBM: (1) strong performance for the ImageNet synthesis at 128\u00d7128 resolution with self-contained learning, (2) significant refinement of the quality of synthesis of pretrained generators on CIFAR-10 and CelebA with conditional learning, (3) retrofitting pretrained autoencoder generators with a means of sampling, (4) out-of-distribution detection with state-of-the-art performance for unsupervised models.\n\nA Limitations\nA major limitation of our method is the computational cost of MCMC sampling. Updating the EBM weights requires about 50 to 100 MCMC steps, and each step requires a backward pass to compute the Langevin gradient. Despite this costly step, training our model requires substantially less resources than GANs that achieve similar quality results (see Appendix C). The joint version of the Hat EBM further increases computational requirements compared to standard EBM because of the need for dual Langevin updates and the need to backprop through the generator. The conditional Hat EBM only requires a backprop through the hat network and forward pass through the generator, which has similar runtime to standard EBMs.\nAnother limitation of our work is that we still rely on noise-initialized shortrun sampling for our retrofit experiments, which requires that the initialization distribution in the latent space is a reasonable starting point for obtaining good latent space samples. This is done in our work by enforcing that latent vectors corresponding to images lie on a sphere of radius \u221a m, so that sampling from a mdimensional Gaussian is roughly aligned with the target states. In future work, we hope to develop a better latent space initialization method, perhaps by adapting cooperative learning to give latent space initialization rather than image space initialization.\n\nB Potential Negative Impacts\nLike many works in generative modeling, our work has the potential to contribute to the development of harmful images, which could take the form of images that spread misinformation, explicit content, or images that perpetuate negatives biases and stereotypes.\n\nC Computational Requirements\nOur computational resources were primarily 5 TPUv2-8 and 5 TPUv3-8 devices. For our large-scale ImageNet experiments, we used a TPUv3-32 device. Our large scale ImageNet experiment can be run on a TPUv3-32 in approximately 60 hours, coming to a total of 32 \u00d7 60 = 1920 TPU hours. We were also able to run our largest scale experiment on a TPUv3-8 in approximately 130 hours, coming to a total of 8 \u00d7 130 = 1040 TPU hours for the same experiment. Since we only get about a 2\u00d7 speed-up when parallelizing from 8 to 32 cores, the overall compute is lower for the TPUv3-8, although the actual runtime is longer. This runtime compares favorably with the state-of-the-art Self-Supervised GAN (SSGAN) [6] for unconditional ImageNet 128\u00d7128 synthesis, which reports a runtime of about 1.5 days using a TPUv3-128 and a cost of 36 \u00d7 128 = 4608 TPU hours. Despite the costly step of MCMC sampling, our relatively lightweight networks and parallelization of Langevin sampling make EBM learning feasible.\nTo estimate our total amount of compute, we use the following calculation. We performed experiments for this work over the course of 3 months. We estimate that on average, we had approximately 4 TPU-8 machines (either v2 or v3) running at any given time. This work done by the TPU-8 machines comes to about 8 \u00d7 4 \u00d7 3 \u00d7 730 = 70080 TPU hours. We additionally performed about 15 experiments using the TPUv3-32, which comes to about 15 \u00d7 1920 = 28800 TPU hours. In total, we used approximately 100K TPU hours across all experiments.\n\nD Validity of Learning Procedures and Assumptions\nOur primary theoretical claim is the validity of the joint Hat EBM and conditional Hat EBM learning procedures. The validity of the learning procedures relies on two key assumptions: correct model specification for the observed data, and the convergence of MCMC samples during the training to ensure that negative samples represent samples from the current model.\nOur assumptions about the distribution of the observed data X are as follows. For the joint Hat EBM, we assume that X \u223c Y + G(Z) for a joint distribution (Y, Z) that can be parameterized as U (y, z; \u03b8) = H(Y + G(Z); \u03b8). Since Y is unconstrained, it seems reasonable that for a suitably flexible function H, one could always learn a residual that corrects the appearance of any generator, even a poor generator. Thus the model is well-specified since Y + G(Z) should be able to represent an arbitrary appearance regardless of the generator G if H has sufficient capacity. For the conditional Hat EBM, the observed data X are assumed to follow X = Y + G(Z) where Z \u223c N (0, I) and U (Y |Z; \u03b8) = H(Y + G(Z); \u03b8). Again, as long as H has sufficient capacity, it should be able to learn residuals Y that correct the appearance of any generator.\nThe second assumption requires that MCMC samples converge to their steady-state to update the Hat Network. It is known from previous work that the predominant outcome of most MCMC sampling during EBM training is very far from convergence [28]. Our work operates exclusively in the nonconvergent regime, and we acknowledge that the second assumption is violated. Prior work has identified that realistic synthesis is much more easily achieved in the non-convergent regime, and violating the convergence assumption is standard practice in EBM learning with the goal of synthesis.\n\nE Architectures\nAll architectures except for the retrofit generator use a standard SN-GAN discriminator or generator architecture. The hat network uses a discriminator structure with spectral norm layers removed. Batch norm is set to test mode for all generators. The scaled ImageNet experiments simply double the scaling factor for channel dimensions of the EBM and Generator from 1024 to 2048 for the 128\u00d7128 SN-GAN architecture. The generator used in the CIFAR-10 retrofit experiment has a image-style latent space with dimension [16, 16, 1]. This network has the same architecture has the SN-GAN generator except that the it removes the fully connected layer at the base of the generator and replaces it with a convolutional layer, and the first two upsampling residual blocks in the original SN-GAN are converted to residual blocks that do not upsample.\n\nF Historical Generator Update\nA key aspect of our self-contained learning procedure using the Conditional Hat EBM is the use of historical EBM samples to update the generator, rather than samples from the current EBM. This dramatically improves the quality of synthesized samples. We hypothesize that using only current EBM samples to update the generator fails because the short MCMC trajectories cannot significantly change the appearance of the initial generator samples. This means that a lack of diversity in the initial generator samples will also lead to a lack of diversity of samples used to update the EBM. Lack of sample diversity can easily cause EBM instability because the EBM will rapidly change its landscape to try to cover modes that are not contained in the negative samples, causing it to forget previous modes. Once it has forgotten a previous mode, it will once again experience a rapid update to recover the forgotten mode, at the expense of forgetting another mode. Stable EBM learning requires that the initial states for MCMC sampling have reasonable diversity so that learning in many modes can take place simultaneously. We find the same problem occurs for the original cooperative learning formulation [39].\nWe visualize the importance of our historical update in Figure 4. This figure compares cooperative learning [39] with and without batch normalization to Hat EBM synthesis for CIFAR-10. One Hat EBM experiment uses only the current EBM to update the generator, while the other uses the historical approach we outline in the text. Neither of our Hat EBM experiments use batch norm. The Hat EBM using historical updates is by far the most successful synthesis method early in training, and we find that this advantage is maintained throughout learning. We also find that batch norm is an essential part of the original cooperative learning method because it prevents the generator from collapsing early in training.\nThis historical update can be viewed as performing maximum likelihood where the data distribution (X, Z) is defined as the marginal of the joint distribution of (t , X, Z) whereX = Y K + G(Z; \u03c6 t ) and Y K |Z is sampled from p(Y |Z, t ) \u221d \u2212 exp{H(Y + G(Z; \u03c6t ); \u03b8t )}.\nThis holds becauseE (t ,Z,X) [\u2212 log pG(X, Z; \u03c6)] = E (t ,Z,X) 1 2\u03c4 2 G(Z; \u03c6) \u2212 X 2 2 + C \u2248 1 n n i=1 1 2\u03c4 2 G(Zi; \u03c6) \u2212 (YK,i + G(Zi; \u03c6t i )) 2 2 + C\nwithout a residual state. As long as the training data is of the form X + = G(Z + ) for a latent state Z + , one could learn the hat network using the same procedure as the Hat EBM without the residual Y . In practice, it is usually not possible to exactly invert the generator. In other words, real images X + never lie exactly on the generator output manifold, although they might be close by. Nonetheless, one could bend the rules and use X + to train the potential (13) with the justification that there is some Z + such that X + \u2248 G(Z + ). In practice, this leads to instability as shown in Figure 5. Even when it is nearly invisible, the residual state Y is still needed for the hat network to balance the energy of positive and negative samples and achieve stable learning.\n\nI Discussion of EBM Synthesis Methods\nThis appendix provides further discussion of related EBM methods, including methods presented in Table 2 of the main paper, and draws relevant comparisons between the Hat EBM and other EBMs.\nOne branch of EBM works uses MCMC-based Maximum Likelihood with persistent initialization of MCMC states. Persistent initialization uses samples of prior short run EBM trajectories to initialize the current sampling trajectory. This approach is introduced by Persistent Contrastive Divergence (PCD) [37]. The IGEBM [9] is trained using a bank with 10,000 images to hold persistent states. States are rejuvenated from a Gaussian or uniform noise image with of between 0.5% and 5% probability before being returned to the image bank. The Improved CD EBM [8] builds on these results by including an approximate KL divergence term in EBM learning to minimize the difference between the data distribution and the sampled distribution, and by rejuvenating MCMC trajectories using data augmentation instead of resetting states with noise. The Joint Energy Model (JEM) [13] trains an unconditional EBM and a classifier model simultaneously with the same network using persistent initialization with noise rejuvenation. The use of persistent states in our work differs from prior work because we use persistent states to update only the generator while the EBM is updated by states generated from scratch in the current iteration. This is done to increase the diversity of samples used to update the generator, which is essential for enabling the generator to create distinct appearances for different Z early in training (see Appendix F).\nAnother branch of EBM works trains a generator network in tandem with the energy network. Most works use the standard EBM update or a close variant to train the energy network, as we do. In some works, the generators produce the final samples and no MCMC is used, while other works use the generator to initialize samples and then refine the samples with MCMC driven by the energy network. Our work adopts the second strategy. To our knowledge, the first work that explores the idea jointly training an energy network and generator network is by Kim & Bengio [19]. This work suggests using the generator samples directly as negative samples without use of MCMC, and updating the generator network to decrease the energy of the generator samples. The EGAN [7] builds on [19] by introducing a entropy maximization term which is needed for a valid Maximum Likelihood objective and which prevents generator collapse. The entropy term is estimated by neighborhood methods and variational methods. MEG [21] and VERA [14] build on [7] by introducing more sophisticated methods of entropy maximization. The GEBM [3] uses an approach similar to [7], with the major differences being use of a generalized log likelihood objective that bridges the gap between the support of the generator output and the full image space distribution of the data, and a novel approximate KL bound for learning the generator. Like the Hat EBM, none of these methods require the log determinant of the generator Jacobian or inference of latent states for data. Unlike the Hat EBM, the probability models from these methods lie in the latent space (or the restricted image space given by the generator outputs) instead of the full image space. The methods are also incompatible with non-probabilistic generators, unlike Hat EBM. None of the works above use MCMC during training, although some use MCMC during synthesis [14, 3]. Cooperative learning [39] uses Maximum Likelihood learning described in Section 3.4. This requires MCMC sampling for both image and latent states. The conditional Hat EBM for synthesis requires sampling for image states but not latent states.\nA third branch of EBM methods initialize MCMC sampling from a noise distribution and use a fixed length MCMC trajectory to generate states without a generator network. This branch differs from persistent methods because no persistent bank is used and negative samples to update the EBM are created from scratch each time the EBM weights are updated. It differs from generator methods because realistic synthesis is achieved through pure MCMC without initial realistic states from the generator. The Multigrid EBM [10] has a MCMC-based training method where images are synthesized and sampled at multiple resolutions. Multiple EBMs are learned in parallel at different resolutions, and generated images from low resolution EBMs are passed to high resolution EBMs to initialize MCMC sampling. Generation can be performed by trivial sampling (uniform, Gaussian Mixture, KDE, etc.) at a single-pixel resolution and passing the generated MCMC states along from the single-pixel EBM to the full-size EBM. The short run initialization method [29] starts sampling from a uniform image distribution and runs 50 to 100 MCMC steps to generate images during each EBM update, bypassing the need for persistent banks. Our retrofit Hat EBM training is a variation of the short run method where both the Y and Z are initialized from uniform noise. Since the generator is non-probabilistic, the short run trajectories of Z must move from uniform latent samples that represent noisy images to tuned latent samples whose generated images match the data appearance.\n\nJ Hyperparameters\n\n\nFootnotes:\n\nReferences:\n\n- David H. Ackley, Geoffrey E. Hinton, and Terrence J. Sejnowski. A learning algorithm for boltzmann machines. Cognitive Science, 9(1):147-169, 1985.- Abdul Fatir Ansari, Ming Liang Ang, and Harold Soh. Refining deep generative models via discriminator gradient flow. In International Conference on Learning Representations, 2021.\n\n- Michael Arbel, Liang Zhou, and Arthur Gretton. Generalized energy based models. In International Conference on Learning Representations, 2021.\n\n- Andrew Brock, Jeff Donahue, and Karen Simonyan. Large scale GAN training for high fidelity natural image synthesis. In International Conference on Learning Representations, 2019.\n\n- Tong Che, Ruixiang Zhang, Jascha Sohl-Dickstein, Hugo Larochelle, Liam Paull, Yuan Cao, and Yoshua Bengio. Your gan is secretly an energy-based model and you should use discriminator driven latent sampling. In Advances in Neural Information Processing Systems, volume 33, 2020.\n\n- Ting Chen, Xiaohua Zhai, Marvin Ritter, Mario Lucic, and Neil Houlsby. Self-supervised gans via auxiliary rotation loss. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, 2019.\n\n- Zihang Dai Dai, Amjad Almahairi, Philip Bachman, Eduard Hovy, and Aaron Courville. Calibrating energy-based generative adversarial networks. In International Conference on Learning Representations, 2017.\n\n- Yilun Du, Shuang Li, B. Joshua Tenenbaum, and Igor Mordatch. Improved contrastive diver- gence training of energy based models. In Proceedings of the 38th International Conference on Machine Learning, 2021.\n\n- Yilun Du and Igor Mordatch. Implicit generation and generalization with energy based models. In Advances in Neural Information Processing Systems, volume 32, 2019.\n\n- Ruiqi Gao, Yang Lu, Junpei Zhou, Song-Chun Zhu, and Ying Nian Wu. Learning generative convnets via multi-grid modeling and sampling. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition, 2018.\n\n- Ruiqi Gao, Erik Nijkamp, Diederik P Kingma, Zhen Xu, Andrew M Dai, and Ying Nian Wu. Flow contrastive estimation of energy-based models. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition, 2020.\n\n- Ian Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil Ozair, Aaron Courville, and Yoshua Bengio. Generative adversarial nets. In Advances in Neural Information Processing Systems, volume 27, 2014.\n\n- Will Grathwohl, Kuan-Chieh Wang, Joern-Henrik Jacobsen, David Duvenaud, Mohammad Norouzi, and Kevin Swersky. Your classifier is secretly an energy based model and you should treat it like one. In International Conference on Learning Representations, 2020.\n\n- Will Sussman Grathwohl, Jacob Jin Kelly, Milad Hashemi, Mohammad Norouzi, Kevin Swersky, and David Duvenaud. No {mcmc} for me: Amortized sampling for fast and stable training of energy-based models. In International Conference on Learning Representations, 2021.\n\n- Tian Han, Erik Nijkamp, Xiaolin Fang, Mitch Hill, Song-Chun Zhu, and Ying Nian Wu. Diver- gence triangle for joint training of generator model, energy-based model, and inferential model. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, 2019.\n\n- Mitch Hill, Jonathan Craig Mitchell, and Song-Chun Zhu. Stochastic security: Adversarial defense using long-run dynamics of energy-based models. In International Conference on Learning Representations, 2021.\n\n- Geoffrey E. Hinton. Training products of experts by minimizing contrastive divergence. Neural Computation, 14(8):1771-1800, 2002.\n\n- Jonathan Ho, Ajay Jain, and Pieter Abbeel. Denoising diffusion probabilistic models. In Advances in Neural Information Processing Systems, volume 33, 2020.\n\n- Taesup Kim and Yoshua Bengio. Deep directed generative models with energy-based probability estimation. arXiv preprint arXiv:1606.03439, 2016.\n\n- Diederik P Kingma and Max Welling. Auto-encoding variational bayes. In International Conference on Learning Representations, 2013.\n\n- Rithesh Kumar, Anirudh Goyal, Aaron C. Courville, and Yoshua Bengio. Maximum entropy generators for energy-based models. arXiv preprint arXiv:1901.08508, 2019.\n\n- Kwot Sin Lee and Christopher Town. Mimicry: Towards the reproducibility of gan research. arXiv preprint arXiv:2005.02494, 2020.\n\n- Kwot Sin Lee, Ngoc-Trung Tran, and Ngai-Man Cheung. Infomax-gan: Improved adversarial image generation via information maximization and contrastive learning. In Proceedings of the IEEE/CVF Winter Conference on Applications of Computer Vision, 2021.\n\n- Hao Liu and Pieter Abbeel. Hybrid discriminative-generative training via contrastive learning. arXiv preprint arXiv:2007.09070, 2021.\n\n- Weitang Liu, Xiaoyun Wang, John Owens, and Yixuan Li. Energy-based out-of-distribution detection. In Advances in Neural Information Processing Systems, volume 33, 2020.\n\n- Takeru Miyato, Toshiki Kataoka, Masanori Koyama, and Yuichi Yoshida. Spectral normalization for generative adversarial networks. In International Conference on Learning Representations, 2018.\n\n- Eric Nalisnick, Akihiro Matsukawa, Yee Whye Teh, Dilan Gorur, and Balaji Lakshminarayanan. Do deep generative models know what they don't know? In International Conference on Learning Representations, 2019.\n\n- Erik Nijkamp, Mitch Hill, Tian Han, Song-Chun Zhu, and Ying Nian Wu. On the anatomy of MCMC-based maximum likelihood learning of energy-based models. In Proceedings of the AAAI Conference on Artificial Intelligence, volume 34, 2020.\n\n- Erik Nijkamp, Mitch Hill, Song-Chun Zhu, and Ying Nian Wu. Learning non-convergent non- persistent short-run MCMC toward energy-based model. In Advances in Neural Information Processing Systems, volume 32, 2019.\n\n- Bo Pang, Tian Han, Erik Nijkamp, Song-Chun Zhu, and Ying Nian Wu. Learning latent space energy-based prior model. In Advances in Neural Information Processing Systems, volume 33, 2020.\n\n- Bo Pang and Ying Nian Wu. Latent space energy-based model of symbol-vector coupling for text generation and classification. In Proceedings of the 38th International Conference on Machine Learning, 2021.\n\n- Alec Radford, Luke Metz, and Soumith Chintala. Unsupervised representation learning with deep convolutional generative adversarial networks. In International Conference on Representa- tion Learning, 2016.\n\n- Danilo Jimenez Rezende, Shakir Mohamed, and Daan Wierstra. Stochastic backpropagation and approximate inference in deep generative models. In Proceedings of the 31st International Conference on Machine Learning, 2014.\n\n- Ruslan Salakhutdinov and Geoffrey E. Hinton. Deep boltzmann machines. In Proceedings of the 12th International Conference on Artificial Intelligence and Statistics, 2009.\n\n- Yang Song and Stefano Ermon. Improved techniques for training score-based generative models. In Advances in Neural Information Processing Systems, volume 33, 2020.\n\n- Akinori Tanaka. Discriminator optimal transport. In Advances in Neural Information Processing Systems, volume 32, 2019.\n\n- Tijmen Tieleman. Training restricted boltzmann machines using approximations to the like- lihood gradient. In Proceedings of the 25th International Conference on Machine Learning, 2008.\n\n- Zhisheng Xiao, Karsten Kreis, Jan Kautz, and Arash Vahdat. Vaebm: A symbiosis between variational autoencoders and energy-based models. In International Conference on Learning Representations, 2021.\n\n- Jianwen Xie, Yang Lu, Ruiqi Gao, and Ying Nian Wu. Cooperative learning of energy-based model and latent variable model via mcmc teaching. In Proceedings of the AAAI Conference on Artificial Intelligence, volume 32, 2018.\n\n- Jianwen Xie, Yang Lu, Song-Chun Zhu, and Yingnian Wu. A theory of generative convnet. In Proceedings of the 33rd International Conference on Machine Learning, 2016.\n\n- Jianwen Xie, Zilong Zheng, Xiaolin Fang, Song-Chun Zhu, and Ying Nian Wu. Cooperative training of fast thinking initializer and slow thinking solver for conditional learning. IEEE Transactions on Pattern Analysis and Machine Intelligence, 2021.\n\n- Jianwen Xie, Zilong Zheng, Ruiqi Gao, Wenguan Wang, Song-Chun Zhu, and Ying Nian Wu. Learning descriptor networks for 3D shape synthesis and analysis. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, 2018.\n\n- Jianwen Xie, Song-Chun Zhu, and Ying Nian Wu. Synthesizing dynamic patterns by spatial- temporal generative convnet. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, 2017.\n\n- Song Chun Zhu, Ying Nian Wu, and David Mumford. Filters, random fields and maximum entropy (FRAME): towards a unified theory for texture modeling. International Journal of Computer Vision, 27(2):107-126, 1998.\n\n", "annotations": {"ReferenceToTable": [{"begin": 22662, "end": 22663, "target": "#tab_0", "idx": 0}, {"begin": 28101, "end": 28102, "target": "#tab_1", "idx": 1}, {"begin": 30624, "end": 30625, "target": "#tab_2", "idx": 2}, {"begin": 42446, "end": 42447, "target": "#tab_1", "idx": 3}], "SectionMain": [{"begin": 1392, "end": 47670, "idx": 0}], "ReferenceToFormula": [{"begin": 11716, "end": 11717, "target": "#formula_6", "idx": 0}, {"begin": 11725, "end": 11726, "target": "#formula_7", "idx": 1}, {"begin": 18498, "end": 18500, "target": "#formula_13", "idx": 2}, {"begin": 18642, "end": 18644, "target": "#formula_13", "idx": 3}, {"begin": 26247, "end": 26248, "target": "#formula_6", "idx": 4}, {"begin": 26256, "end": 26257, "target": "#formula_7", "idx": 5}], "SectionReference": [{"begin": 47684, "end": 56412, "idx": 0}], "SectionHeader": [{"begin": 0, "end": 1392, "idx": 0}], "Div": [{"begin": 83, "end": 1384, "idx": 0}, {"begin": 1395, "end": 7538, "idx": 1}, {"begin": 7540, "end": 8204, "idx": 2}, {"begin": 8206, "end": 9255, "idx": 3}, {"begin": 9257, "end": 12183, "idx": 4}, {"begin": 12185, "end": 14288, "idx": 5}, {"begin": 14290, "end": 20599, "idx": 6}, {"begin": 20601, "end": 21673, "idx": 7}, {"begin": 21675, "end": 23895, "idx": 8}, {"begin": 23897, "end": 26590, "idx": 9}, {"begin": 26592, "end": 29723, "idx": 10}, {"begin": 29725, "end": 31331, "idx": 11}, {"begin": 31333, "end": 33226, "idx": 12}, {"begin": 33228, "end": 34620, "idx": 13}, {"begin": 34622, "end": 34911, "idx": 14}, {"begin": 34913, "end": 36463, "idx": 15}, {"begin": 36465, "end": 38294, "idx": 16}, {"begin": 38296, "end": 39154, "idx": 17}, {"begin": 39156, "end": 42303, "idx": 18}, {"begin": 42305, "end": 47650, "idx": 19}, {"begin": 47652, "end": 47670, "idx": 20}], "Head": [{"begin": 1395, "end": 1409, "n": "1", "idx": 0}, {"begin": 7540, "end": 7564, "n": "3", "idx": 1}, {"begin": 8206, "end": 8232, "n": "3.1", "idx": 2}, {"begin": 9257, "end": 9317, "n": "3.2", "idx": 3}, {"begin": 12185, "end": 12253, "n": "3.3", "idx": 4}, {"begin": 14290, "end": 14366, "n": "3.4", "idx": 5}, {"begin": 20601, "end": 20614, "n": "4", "idx": 6}, {"begin": 21675, "end": 21689, "n": "4.1", "idx": 7}, {"begin": 23897, "end": 23909, "n": "4.2", "idx": 8}, {"begin": 26592, "end": 26605, "n": "4.3", "idx": 9}, {"begin": 29725, "end": 29758, "n": "4.4", "idx": 10}, {"begin": 31333, "end": 31345, "n": "5", "idx": 11}, {"begin": 33228, "end": 33241, "idx": 12}, {"begin": 34622, "end": 34650, "idx": 13}, {"begin": 34913, "end": 34941, "idx": 14}, {"begin": 36465, "end": 36514, "idx": 15}, {"begin": 38296, "end": 38311, "idx": 16}, {"begin": 39156, "end": 39185, "idx": 17}, {"begin": 42305, "end": 42342, "idx": 18}, {"begin": 47652, "end": 47669, "idx": 19}], "Paragraph": [{"begin": 83, "end": 1119, "idx": 0}, {"begin": 1120, "end": 1384, "idx": 1}, {"begin": 1410, "end": 3960, "idx": 2}, {"begin": 3961, "end": 4443, "idx": 3}, {"begin": 4444, "end": 5149, "idx": 4}, {"begin": 5150, "end": 6029, "idx": 5}, {"begin": 6030, "end": 7538, "idx": 6}, {"begin": 7565, "end": 8204, "idx": 7}, {"begin": 8233, "end": 8381, "idx": 8}, {"begin": 8413, "end": 8692, "idx": 9}, {"begin": 8758, "end": 8850, "idx": 10}, {"begin": 8865, "end": 9027, "idx": 11}, {"begin": 9082, "end": 9255, "idx": 12}, {"begin": 9318, "end": 9670, "idx": 13}, {"begin": 9700, "end": 9799, "idx": 14}, {"begin": 9800, "end": 9976, "idx": 15}, {"begin": 9977, "end": 10525, "idx": 16}, {"begin": 10526, "end": 11209, "idx": 17}, {"begin": 11251, "end": 11317, "idx": 18}, {"begin": 11460, "end": 11812, "idx": 19}, {"begin": 11888, "end": 12183, "idx": 20}, {"begin": 12254, "end": 13446, "idx": 21}, {"begin": 13499, "end": 14288, "idx": 22}, {"begin": 14367, "end": 15304, "idx": 23}, {"begin": 15305, "end": 15793, "idx": 24}, {"begin": 15863, "end": 15929, "idx": 25}, {"begin": 15982, "end": 16608, "idx": 26}, {"begin": 16609, "end": 17635, "idx": 27}, {"begin": 17713, "end": 18423, "idx": 28}, {"begin": 18424, "end": 18903, "idx": 29}, {"begin": 18904, "end": 19694, "idx": 30}, {"begin": 19717, "end": 20599, "idx": 31}, {"begin": 20615, "end": 20696, "idx": 32}, {"begin": 20697, "end": 20821, "idx": 33}, {"begin": 20822, "end": 20996, "idx": 34}, {"begin": 20997, "end": 21244, "idx": 35}, {"begin": 21245, "end": 21437, "idx": 36}, {"begin": 21438, "end": 21673, "idx": 37}, {"begin": 21690, "end": 22480, "idx": 38}, {"begin": 22510, "end": 22655, "idx": 39}, {"begin": 22656, "end": 23895, "idx": 40}, {"begin": 23910, "end": 25743, "idx": 41}, {"begin": 25905, "end": 26590, "idx": 42}, {"begin": 26606, "end": 27294, "idx": 43}, {"begin": 27295, "end": 27789, "idx": 44}, {"begin": 27790, "end": 28357, "idx": 45}, {"begin": 28358, "end": 28895, "idx": 46}, {"begin": 28896, "end": 29573, "idx": 47}, {"begin": 29574, "end": 29723, "idx": 48}, {"begin": 29759, "end": 30592, "idx": 49}, {"begin": 30593, "end": 31331, "idx": 50}, {"begin": 31346, "end": 32310, "idx": 51}, {"begin": 32311, "end": 32749, "idx": 52}, {"begin": 32750, "end": 33226, "idx": 53}, {"begin": 33242, "end": 33955, "idx": 54}, {"begin": 33956, "end": 34620, "idx": 55}, {"begin": 34651, "end": 34911, "idx": 56}, {"begin": 34942, "end": 35933, "idx": 57}, {"begin": 35934, "end": 36463, "idx": 58}, {"begin": 36515, "end": 36878, "idx": 59}, {"begin": 36879, "end": 37716, "idx": 60}, {"begin": 37717, "end": 38294, "idx": 61}, {"begin": 38312, "end": 39154, "idx": 62}, {"begin": 39186, "end": 40392, "idx": 63}, {"begin": 40393, "end": 41104, "idx": 64}, {"begin": 41105, "end": 41282, "idx": 65}, {"begin": 41374, "end": 41392, "idx": 66}, {"begin": 41523, "end": 42303, "idx": 67}, {"begin": 42343, "end": 42533, "idx": 68}, {"begin": 42534, "end": 43964, "idx": 69}, {"begin": 43965, "end": 46104, "idx": 70}, {"begin": 46105, "end": 47650, "idx": 71}], "ReferenceToBib": [{"begin": 1429, "end": 1433, "target": "#b19", "idx": 0}, {"begin": 1434, "end": 1437, "target": "#b11", "idx": 1}, {"begin": 1850, "end": 1854, "target": "#b11", "idx": 2}, {"begin": 1855, "end": 1858, "target": "#b31", "idx": 3}, {"begin": 1895, "end": 1899, "target": "#b19", "idx": 4}, {"begin": 1900, "end": 1903, "target": "#b32", "idx": 5}, {"begin": 3802, "end": 3805, "target": "#b4", "idx": 6}, {"begin": 3813, "end": 3817, "target": "#b37", "idx": 7}, {"begin": 3943, "end": 3947, "target": "#b19", "idx": 8}, {"begin": 3948, "end": 3951, "target": "#b38", "idx": 9}, {"begin": 3952, "end": 3955, "target": "#b14", "idx": 10}, {"begin": 3956, "end": 3959, "target": "#b29", "idx": 11}, {"begin": 4359, "end": 4363, "target": "#b38", "idx": 12}, {"begin": 5175, "end": 5179, "target": "#b42", "idx": 13}, {"begin": 5180, "end": 5183, "target": "#b41", "idx": 14}, {"begin": 5279, "end": 5283, "target": "#b28", "idx": 15}, {"begin": 5284, "end": 5286, "target": "#b8", "idx": 16}, {"begin": 5314, "end": 5318, "target": "#b15", "idx": 17}, {"begin": 5412, "end": 5416, "target": "#b18", "idx": 18}, {"begin": 5555, "end": 5558, "target": "#b6", "idx": 19}, {"begin": 5704, "end": 5708, "target": "#b13", "idx": 20}, {"begin": 5731, "end": 5735, "target": "#b40", "idx": 21}, {"begin": 5946, "end": 5950, "target": "#b10", "idx": 22}, {"begin": 6133, "end": 6137, "target": "#b39", "idx": 23}, {"begin": 6138, "end": 6141, "target": "#b28", "idx": 24}, {"begin": 6142, "end": 6144, "target": "#b8", "idx": 25}, {"begin": 6159, "end": 6163, "target": "#b29", "idx": 26}, {"begin": 6164, "end": 6167, "target": "#b30", "idx": 27}, {"begin": 6981, "end": 6985, "target": "#b35", "idx": 28}, {"begin": 6986, "end": 6988, "target": "#b4", "idx": 29}, {"begin": 6989, "end": 6991, "target": "#b1", "idx": 30}, {"begin": 7190, "end": 7194, "target": "#b37", "idx": 31}, {"begin": 8344, "end": 8348, "target": "#b16", "idx": 32}, {"begin": 8349, "end": 8352, "target": "#b43", "idx": 33}, {"begin": 8353, "end": 8356, "target": "#b39", "idx": 34}, {"begin": 10858, "end": 10862, "target": "#b29", "idx": 35}, {"begin": 13882, "end": 13885, "target": "#b8", "idx": 36}, {"begin": 13923, "end": 13926, "target": "#b7", "idx": 37}, {"begin": 14778, "end": 14782, "target": "#b38", "idx": 38}, {"begin": 15342, "end": 15346, "target": "#b38", "idx": 39}, {"begin": 16223, "end": 16227, "target": "#b10", "idx": 40}, {"begin": 18989, "end": 18993, "target": "#b11", "idx": 41}, {"begin": 19188, "end": 19192, "target": "#b10", "idx": 42}, {"begin": 19795, "end": 19799, "target": "#b11", "idx": 43}, {"begin": 22387, "end": 22390, "target": "#b4", "idx": 44}, {"begin": 22589, "end": 22593, "target": "#b21", "idx": 45}, {"begin": 22651, "end": 22654, "target": "#b4", "idx": 46}, {"begin": 27681, "end": 27685, "target": "#b25", "idx": 47}, {"begin": 27698, "end": 27701, "target": "#b5", "idx": 48}, {"begin": 27719, "end": 27723, "target": "#b22", "idx": 49}, {"begin": 27781, "end": 27784, "target": "#b5", "idx": 50}, {"begin": 28164, "end": 28167, "target": "#b2", "idx": 51}, {"begin": 29036, "end": 29039, "target": "#b5", "idx": 52}, {"begin": 30146, "end": 30150, "target": "#b26", "idx": 53}, {"begin": 30390, "end": 30394, "target": "#b12", "idx": 54}, {"begin": 30395, "end": 30398, "target": "#b37", "idx": 55}, {"begin": 30875, "end": 30878, "target": "#b8", "idx": 56}, {"begin": 30900, "end": 30904, "target": "#b37", "idx": 57}, {"begin": 30936, "end": 30939, "target": "#b7", "idx": 58}, {"begin": 30955, "end": 30959, "target": "#b12", "idx": 59}, {"begin": 30980, "end": 30984, "target": "#b23", "idx": 60}, {"begin": 31008, "end": 31012, "target": "#b24", "idx": 61}, {"begin": 31049, "end": 31053, "target": "#b24", "idx": 62}, {"begin": 31087, "end": 31091, "target": "#b23", "idx": 63}, {"begin": 31119, "end": 31123, "target": "#b24", "idx": 64}, {"begin": 35636, "end": 35639, "target": "#b5", "idx": 65}, {"begin": 37955, "end": 37959, "target": "#b27", "idx": 66}, {"begin": 38829, "end": 38833, "target": "#b15", "idx": 67}, {"begin": 38834, "end": 38837, "target": "#b15", "idx": 68}, {"begin": 38838, "end": 38840, "target": "#b0", "idx": 69}, {"begin": 40387, "end": 40391, "target": "#b38", "idx": 70}, {"begin": 40501, "end": 40505, "target": "#b38", "idx": 71}, {"begin": 41992, "end": 41996, "target": "#b12", "idx": 72}, {"begin": 42833, "end": 42837, "target": "#b36", "idx": 73}, {"begin": 42849, "end": 42852, "target": "#b8", "idx": 74}, {"begin": 43086, "end": 43089, "target": "#b7", "idx": 75}, {"begin": 43395, "end": 43399, "target": "#b12", "idx": 76}, {"begin": 44511, "end": 44528, "idx": 77}, {"begin": 44720, "end": 44723, "target": "#b6", "idx": 78}, {"begin": 44734, "end": 44738, "target": "#b18", "idx": 79}, {"begin": 44961, "end": 44965, "target": "#b20", "idx": 80}, {"begin": 44975, "end": 44979, "target": "#b13", "idx": 81}, {"begin": 44989, "end": 44992, "target": "#b6", "idx": 82}, {"begin": 45069, "end": 45072, "target": "#b2", "idx": 83}, {"begin": 45101, "end": 45104, "target": "#b6", "idx": 84}, {"begin": 45853, "end": 45857, "target": "#b13", "idx": 85}, {"begin": 45858, "end": 45860, "target": "#b2", "idx": 86}, {"begin": 45883, "end": 45887, "target": "#b38", "idx": 87}, {"begin": 46618, "end": 46622, "target": "#b9", "idx": 88}, {"begin": 47140, "end": 47144, "target": "#b28", "idx": 89}], "Sentence": [{"begin": 83, "end": 192, "idx": 0}, {"begin": 193, "end": 419, "idx": 1}, {"begin": 420, "end": 530, "idx": 2}, {"begin": 531, "end": 666, "idx": 3}, {"begin": 667, "end": 772, "idx": 4}, {"begin": 773, "end": 1011, "idx": 5}, {"begin": 1012, "end": 1119, "idx": 6}, {"begin": 1120, "end": 1228, "idx": 7}, {"begin": 1229, "end": 1384, "idx": 8}, {"begin": 1410, "end": 1584, "idx": 9}, {"begin": 1585, "end": 1790, "idx": 10}, {"begin": 1791, "end": 2195, "idx": 11}, {"begin": 2196, "end": 2385, "idx": 12}, {"begin": 2386, "end": 2615, "idx": 13}, {"begin": 2616, "end": 2669, "idx": 14}, {"begin": 2670, "end": 2824, "idx": 15}, {"begin": 2825, "end": 2931, "idx": 16}, {"begin": 2932, "end": 3023, "idx": 17}, {"begin": 3024, "end": 3211, "idx": 18}, {"begin": 3212, "end": 3332, "idx": 19}, {"begin": 3333, "end": 3487, "idx": 20}, {"begin": 3488, "end": 3611, "idx": 21}, {"begin": 3612, "end": 3818, "idx": 22}, {"begin": 3819, "end": 3960, "idx": 23}, {"begin": 3961, "end": 4144, "idx": 24}, {"begin": 4145, "end": 4216, "idx": 25}, {"begin": 4217, "end": 4245, "idx": 26}, {"begin": 4246, "end": 4398, "idx": 27}, {"begin": 4399, "end": 4443, "idx": 28}, {"begin": 4444, "end": 4557, "idx": 29}, {"begin": 4558, "end": 4628, "idx": 30}, {"begin": 4629, "end": 4816, "idx": 31}, {"begin": 4817, "end": 4932, "idx": 32}, {"begin": 4933, "end": 5149, "idx": 33}, {"begin": 5150, "end": 5184, "idx": 34}, {"begin": 5185, "end": 5319, "idx": 35}, {"begin": 5320, "end": 5396, "idx": 36}, {"begin": 5397, "end": 5545, "idx": 37}, {"begin": 5546, "end": 5654, "idx": 38}, {"begin": 5655, "end": 5709, "idx": 39}, {"begin": 5710, "end": 5920, "idx": 40}, {"begin": 5921, "end": 6029, "idx": 41}, {"begin": 6030, "end": 6047, "idx": 42}, {"begin": 6048, "end": 6145, "idx": 43}, {"begin": 6146, "end": 6273, "idx": 44}, {"begin": 6274, "end": 6437, "idx": 45}, {"begin": 6438, "end": 6570, "idx": 46}, {"begin": 6571, "end": 6648, "idx": 47}, {"begin": 6649, "end": 6715, "idx": 48}, {"begin": 6716, "end": 6809, "idx": 49}, {"begin": 6810, "end": 6966, "idx": 50}, {"begin": 6967, "end": 7179, "idx": 51}, {"begin": 7180, "end": 7244, "idx": 52}, {"begin": 7245, "end": 7351, "idx": 53}, {"begin": 7352, "end": 7538, "idx": 54}, {"begin": 7565, "end": 7670, "idx": 55}, {"begin": 7671, "end": 7729, "idx": 56}, {"begin": 7730, "end": 7985, "idx": 57}, {"begin": 7986, "end": 8204, "idx": 58}, {"begin": 8233, "end": 8357, "idx": 59}, {"begin": 8358, "end": 8381, "idx": 60}, {"begin": 8413, "end": 8517, "idx": 61}, {"begin": 8518, "end": 8692, "idx": 62}, {"begin": 8758, "end": 8850, "idx": 63}, {"begin": 8865, "end": 8908, "idx": 64}, {"begin": 8909, "end": 9027, "idx": 65}, {"begin": 9082, "end": 9126, "idx": 66}, {"begin": 9127, "end": 9255, "idx": 67}, {"begin": 9318, "end": 9443, "idx": 68}, {"begin": 9444, "end": 9640, "idx": 69}, {"begin": 9641, "end": 9670, "idx": 70}, {"begin": 9700, "end": 9799, "idx": 71}, {"begin": 9800, "end": 9832, "idx": 72}, {"begin": 9833, "end": 9976, "idx": 73}, {"begin": 9977, "end": 10244, "idx": 74}, {"begin": 10245, "end": 10525, "idx": 75}, {"begin": 10526, "end": 10863, "idx": 76}, {"begin": 10864, "end": 11024, "idx": 77}, {"begin": 11025, "end": 11209, "idx": 78}, {"begin": 11251, "end": 11317, "idx": 79}, {"begin": 11460, "end": 11541, "idx": 80}, {"begin": 11542, "end": 11766, "idx": 81}, {"begin": 11767, "end": 11812, "idx": 82}, {"begin": 11888, "end": 11974, "idx": 83}, {"begin": 11975, "end": 12183, "idx": 84}, {"begin": 12254, "end": 12307, "idx": 85}, {"begin": 12308, "end": 12637, "idx": 86}, {"begin": 12638, "end": 12821, "idx": 87}, {"begin": 12822, "end": 13030, "idx": 88}, {"begin": 13031, "end": 13147, "idx": 89}, {"begin": 13148, "end": 13293, "idx": 90}, {"begin": 13294, "end": 13337, "idx": 91}, {"begin": 13338, "end": 13446, "idx": 92}, {"begin": 13499, "end": 13631, "idx": 93}, {"begin": 13632, "end": 13823, "idx": 94}, {"begin": 13824, "end": 13886, "idx": 95}, {"begin": 13887, "end": 14133, "idx": 96}, {"begin": 14134, "end": 14288, "idx": 97}, {"begin": 14367, "end": 14505, "idx": 98}, {"begin": 14506, "end": 14729, "idx": 99}, {"begin": 14730, "end": 14792, "idx": 100}, {"begin": 14793, "end": 14913, "idx": 101}, {"begin": 14914, "end": 15206, "idx": 102}, {"begin": 15207, "end": 15304, "idx": 103}, {"begin": 15305, "end": 15541, "idx": 104}, {"begin": 15542, "end": 15793, "idx": 105}, {"begin": 15863, "end": 15929, "idx": 106}, {"begin": 15982, "end": 16040, "idx": 107}, {"begin": 16041, "end": 16228, "idx": 108}, {"begin": 16229, "end": 16357, "idx": 109}, {"begin": 16358, "end": 16498, "idx": 110}, {"begin": 16499, "end": 16608, "idx": 111}, {"begin": 16609, "end": 16748, "idx": 112}, {"begin": 16749, "end": 17118, "idx": 113}, {"begin": 17119, "end": 17221, "idx": 114}, {"begin": 17222, "end": 17395, "idx": 115}, {"begin": 17396, "end": 17540, "idx": 116}, {"begin": 17541, "end": 17635, "idx": 117}, {"begin": 17713, "end": 17902, "idx": 118}, {"begin": 17903, "end": 18072, "idx": 119}, {"begin": 18073, "end": 18273, "idx": 120}, {"begin": 18274, "end": 18423, "idx": 121}, {"begin": 18424, "end": 18594, "idx": 122}, {"begin": 18595, "end": 18762, "idx": 123}, {"begin": 18763, "end": 18903, "idx": 124}, {"begin": 18904, "end": 19112, "idx": 125}, {"begin": 19113, "end": 19210, "idx": 126}, {"begin": 19211, "end": 19418, "idx": 127}, {"begin": 19419, "end": 19550, "idx": 128}, {"begin": 19551, "end": 19649, "idx": 129}, {"begin": 19650, "end": 19694, "idx": 130}, {"begin": 19717, "end": 19772, "idx": 131}, {"begin": 19773, "end": 19962, "idx": 132}, {"begin": 19963, "end": 20094, "idx": 133}, {"begin": 20095, "end": 20246, "idx": 134}, {"begin": 20247, "end": 20291, "idx": 135}, {"begin": 20292, "end": 20389, "idx": 136}, {"begin": 20390, "end": 20532, "idx": 137}, {"begin": 20533, "end": 20599, "idx": 138}, {"begin": 20615, "end": 20696, "idx": 139}, {"begin": 20697, "end": 20821, "idx": 140}, {"begin": 20822, "end": 20996, "idx": 141}, {"begin": 20997, "end": 21120, "idx": 142}, {"begin": 21121, "end": 21244, "idx": 143}, {"begin": 21245, "end": 21437, "idx": 144}, {"begin": 21438, "end": 21577, "idx": 145}, {"begin": 21578, "end": 21673, "idx": 146}, {"begin": 21690, "end": 21847, "idx": 147}, {"begin": 21848, "end": 21917, "idx": 148}, {"begin": 21918, "end": 22017, "idx": 149}, {"begin": 22018, "end": 22134, "idx": 150}, {"begin": 22135, "end": 22220, "idx": 151}, {"begin": 22221, "end": 22302, "idx": 152}, {"begin": 22303, "end": 22480, "idx": 153}, {"begin": 22510, "end": 22655, "idx": 154}, {"begin": 22656, "end": 22682, "idx": 155}, {"begin": 22683, "end": 22814, "idx": 156}, {"begin": 22815, "end": 22902, "idx": 157}, {"begin": 22903, "end": 22959, "idx": 158}, {"begin": 22960, "end": 23100, "idx": 159}, {"begin": 23101, "end": 23256, "idx": 160}, {"begin": 23257, "end": 23363, "idx": 161}, {"begin": 23364, "end": 23447, "idx": 162}, {"begin": 23448, "end": 23630, "idx": 163}, {"begin": 23631, "end": 23745, "idx": 164}, {"begin": 23746, "end": 23895, "idx": 165}, {"begin": 23910, "end": 24020, "idx": 166}, {"begin": 24021, "end": 24158, "idx": 167}, {"begin": 24159, "end": 24310, "idx": 168}, {"begin": 24311, "end": 24509, "idx": 169}, {"begin": 24510, "end": 24636, "idx": 170}, {"begin": 24637, "end": 24786, "idx": 171}, {"begin": 24787, "end": 24873, "idx": 172}, {"begin": 24874, "end": 25069, "idx": 173}, {"begin": 25070, "end": 25239, "idx": 174}, {"begin": 25240, "end": 25404, "idx": 175}, {"begin": 25405, "end": 25552, "idx": 176}, {"begin": 25553, "end": 25743, "idx": 177}, {"begin": 25905, "end": 26012, "idx": 178}, {"begin": 26013, "end": 26343, "idx": 179}, {"begin": 26344, "end": 26429, "idx": 180}, {"begin": 26430, "end": 26488, "idx": 181}, {"begin": 26489, "end": 26590, "idx": 182}, {"begin": 26606, "end": 26770, "idx": 183}, {"begin": 26771, "end": 26919, "idx": 184}, {"begin": 26920, "end": 27089, "idx": 185}, {"begin": 27090, "end": 27179, "idx": 186}, {"begin": 27180, "end": 27294, "idx": 187}, {"begin": 27295, "end": 27447, "idx": 188}, {"begin": 27448, "end": 27540, "idx": 189}, {"begin": 27541, "end": 27597, "idx": 190}, {"begin": 27598, "end": 27645, "idx": 191}, {"begin": 27646, "end": 27789, "idx": 192}, {"begin": 27790, "end": 27942, "idx": 193}, {"begin": 27943, "end": 28004, "idx": 194}, {"begin": 28005, "end": 28103, "idx": 195}, {"begin": 28104, "end": 28257, "idx": 196}, {"begin": 28258, "end": 28357, "idx": 197}, {"begin": 28358, "end": 28517, "idx": 198}, {"begin": 28518, "end": 28594, "idx": 199}, {"begin": 28595, "end": 28748, "idx": 200}, {"begin": 28749, "end": 28895, "idx": 201}, {"begin": 28896, "end": 29077, "idx": 202}, {"begin": 29078, "end": 29153, "idx": 203}, {"begin": 29154, "end": 29343, "idx": 204}, {"begin": 29344, "end": 29467, "idx": 205}, {"begin": 29468, "end": 29573, "idx": 206}, {"begin": 29574, "end": 29723, "idx": 207}, {"begin": 29759, "end": 29853, "idx": 208}, {"begin": 29854, "end": 30092, "idx": 209}, {"begin": 30093, "end": 30242, "idx": 210}, {"begin": 30243, "end": 30379, "idx": 211}, {"begin": 30380, "end": 30592, "idx": 212}, {"begin": 30593, "end": 30626, "idx": 213}, {"begin": 30627, "end": 30691, "idx": 214}, {"begin": 30692, "end": 30799, "idx": 215}, {"begin": 30800, "end": 31167, "idx": 216}, {"begin": 31168, "end": 31331, "idx": 217}, {"begin": 31346, "end": 31504, "idx": 218}, {"begin": 31505, "end": 31756, "idx": 219}, {"begin": 31757, "end": 31849, "idx": 220}, {"begin": 31850, "end": 32072, "idx": 221}, {"begin": 32073, "end": 32157, "idx": 222}, {"begin": 32158, "end": 32310, "idx": 223}, {"begin": 32311, "end": 32589, "idx": 224}, {"begin": 32590, "end": 32749, "idx": 225}, {"begin": 32750, "end": 33226, "idx": 226}, {"begin": 33242, "end": 33318, "idx": 227}, {"begin": 33319, "end": 33453, "idx": 228}, {"begin": 33454, "end": 33601, "idx": 229}, {"begin": 33602, "end": 33798, "idx": 230}, {"begin": 33799, "end": 33955, "idx": 231}, {"begin": 33956, "end": 34221, "idx": 232}, {"begin": 34222, "end": 34423, "idx": 233}, {"begin": 34424, "end": 34620, "idx": 234}, {"begin": 34651, "end": 34911, "idx": 235}, {"begin": 34942, "end": 35017, "idx": 236}, {"begin": 35018, "end": 35086, "idx": 237}, {"begin": 35087, "end": 35221, "idx": 238}, {"begin": 35222, "end": 35387, "idx": 239}, {"begin": 35388, "end": 35549, "idx": 240}, {"begin": 35550, "end": 35786, "idx": 241}, {"begin": 35787, "end": 35933, "idx": 242}, {"begin": 35934, "end": 36008, "idx": 243}, {"begin": 36009, "end": 36076, "idx": 244}, {"begin": 36077, "end": 36188, "idx": 245}, {"begin": 36189, "end": 36275, "idx": 246}, {"begin": 36276, "end": 36392, "idx": 247}, {"begin": 36393, "end": 36463, "idx": 248}, {"begin": 36515, "end": 36626, "idx": 249}, {"begin": 36627, "end": 36878, "idx": 250}, {"begin": 36879, "end": 36956, "idx": 251}, {"begin": 36957, "end": 37098, "idx": 252}, {"begin": 37099, "end": 37289, "idx": 253}, {"begin": 37290, "end": 37449, "idx": 254}, {"begin": 37450, "end": 37586, "idx": 255}, {"begin": 37587, "end": 37716, "idx": 256}, {"begin": 37717, "end": 37823, "idx": 257}, {"begin": 37824, "end": 37960, "idx": 258}, {"begin": 37961, "end": 38078, "idx": 259}, {"begin": 38079, "end": 38294, "idx": 260}, {"begin": 38312, "end": 38426, "idx": 261}, {"begin": 38427, "end": 38508, "idx": 262}, {"begin": 38509, "end": 38559, "idx": 263}, {"begin": 38560, "end": 38727, "idx": 264}, {"begin": 38728, "end": 38841, "idx": 265}, {"begin": 38842, "end": 39154, "idx": 266}, {"begin": 39186, "end": 39373, "idx": 267}, {"begin": 39374, "end": 39436, "idx": 268}, {"begin": 39437, "end": 39630, "idx": 269}, {"begin": 39631, "end": 39772, "idx": 270}, {"begin": 39773, "end": 39987, "idx": 271}, {"begin": 39988, "end": 40145, "idx": 272}, {"begin": 40146, "end": 40304, "idx": 273}, {"begin": 40305, "end": 40392, "idx": 274}, {"begin": 40393, "end": 40458, "idx": 275}, {"begin": 40459, "end": 40577, "idx": 276}, {"begin": 40578, "end": 40720, "idx": 277}, {"begin": 40721, "end": 40771, "idx": 278}, {"begin": 40772, "end": 40941, "idx": 279}, {"begin": 40942, "end": 41104, "idx": 280}, {"begin": 41105, "end": 41282, "idx": 281}, {"begin": 41374, "end": 41392, "idx": 282}, {"begin": 41523, "end": 41548, "idx": 283}, {"begin": 41549, "end": 41728, "idx": 284}, {"begin": 41729, "end": 41801, "idx": 285}, {"begin": 41802, "end": 41918, "idx": 286}, {"begin": 41919, "end": 42067, "idx": 287}, {"begin": 42068, "end": 42128, "idx": 288}, {"begin": 42129, "end": 42303, "idx": 289}, {"begin": 42343, "end": 42533, "idx": 290}, {"begin": 42534, "end": 42639, "idx": 291}, {"begin": 42640, "end": 42761, "idx": 292}, {"begin": 42762, "end": 42838, "idx": 293}, {"begin": 42839, "end": 42922, "idx": 294}, {"begin": 42923, "end": 43065, "idx": 295}, {"begin": 43066, "end": 43365, "idx": 296}, {"begin": 43366, "end": 43544, "idx": 297}, {"begin": 43545, "end": 43755, "idx": 298}, {"begin": 43756, "end": 43964, "idx": 299}, {"begin": 43965, "end": 44054, "idx": 300}, {"begin": 44055, "end": 44151, "idx": 301}, {"begin": 44152, "end": 44354, "idx": 302}, {"begin": 44355, "end": 44391, "idx": 303}, {"begin": 44392, "end": 44529, "idx": 304}, {"begin": 44530, "end": 44710, "idx": 305}, {"begin": 44711, "end": 44877, "idx": 306}, {"begin": 44878, "end": 44956, "idx": 307}, {"begin": 44957, "end": 45059, "idx": 308}, {"begin": 45060, "end": 45361, "idx": 309}, {"begin": 45362, "end": 45495, "idx": 310}, {"begin": 45496, "end": 45677, "idx": 311}, {"begin": 45678, "end": 45762, "idx": 312}, {"begin": 45763, "end": 45861, "idx": 313}, {"begin": 45862, "end": 45946, "idx": 314}, {"begin": 45947, "end": 46008, "idx": 315}, {"begin": 46009, "end": 46104, "idx": 316}, {"begin": 46105, "end": 46272, "idx": 317}, {"begin": 46273, "end": 46454, "idx": 318}, {"begin": 46455, "end": 46599, "idx": 319}, {"begin": 46600, "end": 46721, "idx": 320}, {"begin": 46722, "end": 46895, "idx": 321}, {"begin": 46896, "end": 47103, "idx": 322}, {"begin": 47104, "end": 47308, "idx": 323}, {"begin": 47309, "end": 47436, "idx": 324}, {"begin": 47437, "end": 47650, "idx": 325}], "ReferenceToFigure": [{"begin": 3495, "end": 3496, "target": "#fig_0", "idx": 0}, {"begin": 10522, "end": 10523, "target": "#fig_2", "idx": 1}, {"begin": 20544, "end": 20545, "target": "#fig_1", "idx": 2}, {"begin": 21445, "end": 21446, "target": "#fig_2", "idx": 3}, {"begin": 23253, "end": 23254, "target": "#fig_2", "idx": 4}, {"begin": 26050, "end": 26051, "target": "#fig_2", "idx": 5}, {"begin": 40456, "end": 40457, "target": "#fig_3", "idx": 6}, {"begin": 42126, "end": 42127, "target": "#fig_4", "idx": 7}], "Abstract": [{"begin": 73, "end": 1384, "idx": 0}], "SectionFootnote": [{"begin": 47672, "end": 47682, "idx": 0}], "ReferenceString": [{"begin": 47699, "end": 47846, "id": "b0", "idx": 0}, {"begin": 47848, "end": 48027, "id": "b1", "idx": 1}, {"begin": 48031, "end": 48173, "id": "b2", "idx": 2}, {"begin": 48177, "end": 48355, "id": "b3", "idx": 3}, {"begin": 48359, "end": 48636, "id": "b4", "idx": 4}, {"begin": 48640, "end": 48852, "id": "b5", "idx": 5}, {"begin": 48856, "end": 49059, "id": "b6", "idx": 6}, {"begin": 49063, "end": 49269, "id": "b7", "idx": 7}, {"begin": 49273, "end": 49436, "id": "b8", "idx": 8}, {"begin": 49440, "end": 49660, "id": "b9", "idx": 9}, {"begin": 49664, "end": 49888, "id": "b10", "idx": 10}, {"begin": 49892, "end": 50120, "id": "b11", "idx": 11}, {"begin": 50124, "end": 50379, "id": "b12", "idx": 12}, {"begin": 50383, "end": 50644, "id": "b13", "idx": 13}, {"begin": 50648, "end": 50926, "id": "b14", "idx": 14}, {"begin": 50930, "end": 51137, "id": "b15", "idx": 15}, {"begin": 51141, "end": 51270, "id": "b16", "idx": 16}, {"begin": 51274, "end": 51429, "id": "b17", "idx": 17}, {"begin": 51433, "end": 51575, "id": "b18", "idx": 18}, {"begin": 51579, "end": 51709, "id": "b19", "idx": 19}, {"begin": 51713, "end": 51872, "id": "b20", "idx": 20}, {"begin": 51876, "end": 52003, "id": "b21", "idx": 21}, {"begin": 52007, "end": 52255, "id": "b22", "idx": 22}, {"begin": 52259, "end": 52392, "id": "b23", "idx": 23}, {"begin": 52396, "end": 52564, "id": "b24", "idx": 24}, {"begin": 52568, "end": 52759, "id": "b25", "idx": 25}, {"begin": 52763, "end": 52969, "id": "b26", "idx": 26}, {"begin": 52973, "end": 53205, "id": "b27", "idx": 27}, {"begin": 53209, "end": 53420, "id": "b28", "idx": 28}, {"begin": 53424, "end": 53608, "id": "b29", "idx": 29}, {"begin": 53612, "end": 53814, "id": "b30", "idx": 30}, {"begin": 53818, "end": 54022, "id": "b31", "idx": 31}, {"begin": 54026, "end": 54243, "id": "b32", "idx": 32}, {"begin": 54247, "end": 54417, "id": "b33", "idx": 33}, {"begin": 54421, "end": 54584, "id": "b34", "idx": 34}, {"begin": 54588, "end": 54707, "id": "b35", "idx": 35}, {"begin": 54711, "end": 54896, "id": "b36", "idx": 36}, {"begin": 54900, "end": 55098, "id": "b37", "idx": 37}, {"begin": 55102, "end": 55323, "id": "b38", "idx": 38}, {"begin": 55327, "end": 55491, "id": "b39", "idx": 39}, {"begin": 55495, "end": 55739, "id": "b40", "idx": 40}, {"begin": 55743, "end": 55985, "id": "b41", "idx": 41}, {"begin": 55989, "end": 56197, "id": "b42", "idx": 42}, {"begin": 56201, "end": 56410, "id": "b43", "idx": 43}]}}